prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix dcm:       <http://purl.org/dc/dcmitype/>
prefix dct:       <http://purl.org/dc/terms/>
prefix foaf:      <http://xmlns.com/foaf/0.1/>
prefix owl:       <http://www.w3.org/2002/07/owl#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfa:      <http://www.w3.org/ns/rdfa/model/def/>
prefix rdfs:      <http://www.w3.org/2000/01/rdf-schema#>
prefix respec:    <https://respec.org/model/def/>
prefix sh:        <http://www.w3.org/ns/shacl#>
prefix skos:      <http://www.w3.org/2004/02/skos/core#>
prefix status:    <http://purl.org/adms/status/>
prefix vann:      <http://purl.org/vocab/vann/>
prefix void:      <http://rdfs.org/ns/void#>
prefix xsd:       <http://www.w3.org/2001/XMLSchema#>
prefix xml:       <http://www.w3.org/XML/model/def/>
prefix xmlns:     <http://www.w3.org/2000/xmlns/model/def/> 
prefix xsi:       <http://www.w3.org/2001/XMLSchema-instance/model/def/>

prefix archiXML:  <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function:  <https://data.rijksfinancien.nl/archixml/model/function/>
prefix graph:     <https://data.rijksfinancien.nl/archixml/graph/>
prefix rule:      <https://data.rijksfinancien.nl/archixml/model/rule/>
prefix section:   <https://data.rijksfinancien.nl/archixml/id/section/>
prefix shp:       <https://data.rijksfinancien.nl/archixml/model/shp/>
prefix standard:  <https://data.rijksfinancien.nl/archixml/id/standard/>
prefix target:    <https://data.rijksfinancien.nl/archixml/model/target/>

rule: {

archiXML:
    a
      owl:Ontology,
      respec:Ontology,
      void:Dataset;
    dct:created '2024-02-14'^^xsd:date;
    dct:creator
      'Flores Bakker';
    respec:introduction '''
Introduction of archiXML serialisation vocabulary.
'''@en;
   respec:objective '''Objective of archiXML serialisation vocabulary'''@en;
    respec:audience '''Audience of archiXML serialisation vocabulary'''@en;
    dct:description '''Description of archiXML serialisation vocabulary'''@en;
    dct:abstract '''Abstract of archiXML serialisation vocabulary'''@en; 
    skos:example """
@prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/> .
@prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/> .
@prefix model: <https://data.rijksfinancien.nl/archixml/id/> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix xml1: <http://www.w3.org/XML/model/def/> .
@prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/> .

# Model

model:BasicModel-Document a archiXML:Document ;
    rdf:_1 model:BasicModel-Model .

model:BasicModel-Model a archiXML:Model ;
    rdf:_1 model:BasicModel-ModelName ;
    rdf:_2 model:BasicModel-Documentation ;
    rdf:_3 model:BasicModel-Elements ;
    rdf:_4 model:BasicModel-Relationships ;
    xmlns:xsi "http://www.w3.org/2001/XMLSchema-instance" ;
    xsi:schemaLocation "http://www.opengroup.org/xsd/archimate/3.0/ http://www.opengroup.org/xsd/archimate/3.1/archimate3_Model.xsd" ;
    xml1:xmlns "http://www.opengroup.org/xsd/archimate/3.0/" ;
    prov:wasDerivedFrom model:BasicModel ;
    archiXML:identifier "Model-1" .

model:BasicModel-ModelName a archiXML:Name ;
    rdf:_1 model:BasicModel-ModelNameText ;
    xml1:lang "en" .

model:BasicModel-ModelNameText a archiXML:Text ;
    xml1:fragment "Basic Model" .
    
model:BasicModel-Documentation a archiXML:Documentation ;
    rdf:_1 model:BasicModel-DocumentationText ;
    xml1:lang "en" .

model:BasicModel-DocumentationText a archiXML:Text ;
    xml1:fragment "Example of a basic model with two elements and two relationships" .

# Elements

model:BasicModel-Elements a archiXML:Elements ;
    rdf:_1 model:aBusinessActor-Element ;
    rdf:_2 model:aBusinessObject-Element ;
    rdf:_3 model:aBusinessRole-Element .

model:aBusinessActor-Element a archiXML:Element ;
    rdf:_1 model:aBusinessActor-ElementName ;
    xsi:type "BusinessActor" ;
    prov:wasDerivedFrom model:aBusinessActor ;
    archiXML:identifier "BusinessActor1" .

model:aBusinessActor-ElementName a archiXML:Name ;
    rdf:_1 model:aBusinessActor-ElementNameText ;
    xml1:lang "en" .

model:aBusinessActor-ElementNameText a archiXML:Text ;
    xml1:fragment "A business actor" .

model:aBusinessRole-Element a archiXML:Element ;
    rdf:_1 model:aBusinessRole-ElementName ;
    xsi:type "BusinessRole" ;
    prov:wasDerivedFrom model:aBusinessRole ;
    archiXML:identifier "BusinessRole1" .

model:aBusinessRole-ElementName a archiXML:Name ;
    rdf:_1 model:aBusinessRole-ElementNameText ;
    xml1:lang "en" .

model:aBusinessRole-ElementNameText a archiXML:Text ;
    xml1:fragment "A business role" .

# Relationships

model:BasicModel-Relationships a archiXML:Relationships ;
    rdf:_1 model:aRelationship1-Relationship ;
    rdf:_2 model:aRelationship2-Relationship .

model:aRelationship1-Relationship a archiXML:Relationship ;
    rdf:_1 model:aRelationship1-RelationshipName ;
    xsi:type "Assignment" ;
    prov:wasDerivedFrom model:aRelationship1 ;
    archiXML:identifier "Relation_1" ;
    archiXML:source "BusinessActor1" ;
    archiXML:target "BusinessRole1" .

model:aRelationship1-RelationshipName a archiXML:Name ;
    rdf:_1 model:aRelationship1-RelationshipNameText ;
    xml1:lang "en" .

model:aRelationship1-RelationshipNameText a archiXML:Text ;
    xml1:fragment "Assignment Relationship"@en .




""";
    dct:language 'iso639-1:en';
    dct:license 'https://creativecommons.org/licenses/by/4.0/'^^xsd:anyURI;
    dct:publisher <https://www.example.com>;
    dct:status status:UnderDevelopment;
    dct:title 'archimate Core Vocabulary'@en;
    dct:source <https://www.example.com/archixml-vocabulary>;
    foaf:homepage 'https://www.example.com/'^^xsd:anyURI;
    owl:versionInfo '1.0';
    vann:preferredNamespacePrefix 'archixml';
    vann:preferredNamespaceUri 'https://data.rijksfinancien.nl/archixml/model/def/';
    void:uriRegexPattern '^https://data.rijksfinancien.nl/archixml/model/def/';
    void:uriSpace 'https://data.rijksfinancien.nl/xml/archixml/def/'^^xsd:anyURI.


### Logic


shp:Document
    a sh:NodeShape;
    sh:rule rule:Document;
    sh:targetClass archimate:Model;
    skos:prefLabel 'document shape'@en;
    rdfs:isDefinedBy archiXML:.

rule:Document
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate XML document representation in RDF based on an archimate model.'@en;
    skos:prefLabel 'archimate document rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  ?document rdf:type archiXML:Document;
         skos:prefLabel ?archimateNameModel ;
         skos:definition ?archimateDocumentation ;
         prov:wasDerivedFrom $this;         
         rdf:_1 ?model.
  ?model rdf:type archiXML:Model;
         xmlns:xsi "http://www.w3.org/2001/XMLSchema-instance" ;
         xsi:schemaLocation "http://www.opengroup.org/xsd/archimate/3.0/ http://www.opengroup.org/xsd/archimate/3.1/archimate3_Model.xsd" ;
         xml:xmlns "http://www.opengroup.org/xsd/archimate/3.0/" ;
         archiXML:identifier ?modelIdentifier ;
         archiXML:version ?modelVersion ;
         rdf:_1 ?modelNameNode;
         rdf:_2 ?modelDocumentation;
         rdf:_3 ?elementsNode;
         rdf:_4 ?relationshipsNode;
         rdf:_5 ?viewsNode.         
  ?modelNameNode rdf:type archiXML:Name;
         rdf:_1 ?modelNameTextNode;
         xml:lang "en".
  ?modelNameTextNode rdf:type archiXML:Text;
         xml:fragment ?archimateNameModel.
  ?modelDocumentation rdf:type archiXML:Documentation;
         rdf:_1 ?documentationTextNode;
         xml:lang "en".
  ?documentationTextNode rdf:type archiXML:Text;
         xml:fragment ?archimateDocumentation.
  ?elementsNode rdf:type archiXML:Elements.
  ?relationshipsNode rdf:type archiXML:Relationships.
  ?viewsNode rdf:type archiXML:Views;
         rdf:_1 ?diagramsNode.  
  ?diagramsNode rdf:type archiXML:Diagrams.
 
} where {

    # Get the archimate model
    $this  skos:prefLabel ?archimateNameModel;
           skos:definition ?archimateDocumentation.

    # Create identifiers
    BIND(IRI(CONCAT(STR($this),"-Document")) as ?document)
    BIND(IRI(CONCAT(STR($this),"-Model")) as ?model)
    BIND(IRI(CONCAT(STR($this),"-ModelName")) as ?modelNameNode)
    BIND(IRI(CONCAT(STR($this),"-ModelNameText")) as ?modelNameTextNode)
    BIND(IRI(CONCAT(STR($this),"-Documentation")) as ?modelDocumentation)
    BIND(IRI(CONCAT(STR($this),"-DocumentationText")) as ?documentationTextNode)
    BIND(IRI(CONCAT(STR($this),"-Elements")) as ?elementsNode)
    BIND(IRI(CONCAT(STR($this),"-Relationships")) as ?relationshipsNode)
    BIND(IRI(CONCAT(STR($this),"-Views")) as ?viewsNode)
    BIND(IRI(CONCAT(STR($this),"-Diagrams")) as ?diagramsNode) 

  }

''';
    rdfs:isDefinedBy archiXML:.


  shp:Element
    a sh:NodeShape;
    sh:rule rule:Element;
    sh:target target:Element;
    skos:prefLabel 'element shape'@en;
    rdfs:isDefinedBy archiXML:.

  target:Element
    a sh:SPARQLTarget;
    rdfs:comment 'Select all elements in the model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # Select all elements... 
  $this rdf:type/rdfs:subClassOf* archimate:Element.
    
    }
''';
    rdfs:isDefinedBy archiXML:.

  rule:Element
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an XML element based on an archimate element.'@en;
    skos:prefLabel 'archimate element rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix prov: <http://www.w3.org/ns/prov#> 
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  ?element rdf:type archiXML:Element;
           prov:wasDerivedFrom $this;
           archiXML:identifier ?identifier;
           xsi:type ?xsiType;
           skos:prefLabel ?label;
           rdf:_1 ?elementNameNode;
           rdf:_2 ?elementDocumentationNode.
  ?elementNameNode rdf:type archiXML:Name;
           rdf:_1 ?elementNameTextNode;
           xml:lang "en".
   ?elementNameTextNode rdf:type archiXML:Text;
           xml:fragment ?archimateName.
   ?elementDocumentationNode rdf:type archiXML:Documentation;
           rdf:_1 ?documentationTextNode;
           xml:lang "en".
   ?documentationTextNode rdf:type archiXML:Text;
           xml:fragment ?archimateDocumentation.

} where {

  # Get the archimate tag of the archimate-element to be serialized.
  $this rdf:type ?archimateElement;
        skos:prefLabel ?label;
        skos:definition ?definition.
  ?archimateElement rdfs:subClassOf* archimate:Element;
        dct:identifier ?xsiType.
  
  bind(function:escapeXML(?label) as ?archimateName)
  bind(function:escapeXML(?definition) as ?archimateDocumentation)

  # Create IRI's
  BIND(IRI(CONCAT(STR($this),"-Element")) as ?element)
  BIND(IRI(CONCAT(STR($this),"-ElementName")) as ?elementNameNode)
  BIND(IRI(CONCAT(STR($this),"-ElementNameText")) as ?elementNameTextNode)
  BIND(IRI(CONCAT(STR($this),"-ElementDocumentation")) as ?elementDocumentationNode)
  BIND(IRI(CONCAT(STR($this),"-DocumentationText")) as ?documentationTextNode)
  }

''';
    rdfs:isDefinedBy archiXML:.

shp:Relationship
    a sh:NodeShape;
    sh:rule rule:Relationship;
    sh:target target:Relationship;
    skos:prefLabel 'relationship shape'@en;
    rdfs:isDefinedBy archiXML:.


target:Relationship
    a sh:SPARQLTarget;
    rdfs:comment 'Select all relationships in the model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    
select $this {

  # Select all relationships... 
  $this rdf:type archimate:Relationship.
    
  # ...that are not processed yet
  filter not exists { 
  ?archiXML_relationship rdf:type archiXML:Relationship ;
        prov:wasDerivedFrom $this.
    }
  
  # ...but whose from and to elements have been processed already.
  
  $this archimate:from ?elementFrom.
  ?archiXMLElementSource prov:wasDerivedFrom ?elementFrom;
        rdf:type archiXML:Element.
  $this archimate:from ?elementTo.
  ?archiXMLElementTarget prov:wasDerivedFrom ?elementTo;
        rdf:type archiXML:Element.  

    }
''';
    rdfs:isDefinedBy archiXML:.
    
    
rule:Relationship
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an XML Relationship based on an archimate relationship.'@en;
    skos:prefLabel 'archimate relationship rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  ?relationship rdf:type archiXML:Relationship;
           xsi:type ?xsiType;
           archiXML:source ?source;
           archiXML:target ?target;
           prov:wasDerivedFrom $this;
           skos:prefLabel ?label;           
           archiXML:accessType ?accessType;
           archiXML:modifier ?influenceStrength;           
           rdf:_1 ?relationshipNameNode;
           rdf:_2 ?relationshipDocumentationNode.
   ?relationshipNameNode rdf:type archiXML:Name;
           rdf:_1 ?relationshipNameTextNode;
           xml:lang "en".
   ?relationshipNameTextNode rdf:type archiXML:Text;
           xml:fragment ?archimateName.
   ?relationshipDocumentationNode rdf:type archiXML:Documentation;
           rdf:_1 ?documentationTextNode;
           xml:lang "en".
   ?documentationTextNode rdf:type archiXML:Text;
           xml:fragment ?archimateDocumentation.

} where {

  # Get the archimate metadata of the archimate-relationship
 
  $this archimate:from ?fromElement.
  ?sourceElement prov:wasDerivedFrom ?fromElement;
                 archiXML:identifier ?source.

  $this archimate:to ?toElement.
  ?targetElement prov:wasDerivedFrom ?toElement ;
                 archiXML:identifier ?target.

  $this archimate:relationship ?relationshipArchimate.
  ?relationshipArchimate dct:identifier ?xsiType;
                         skos:prefLabel ?label.

  $this skos:definition ?definition.
  
  optional{
  $this archimate:accessType ?accessType.
  }
  
  optional{
  $this archimate:strength ?influenceStrength.
  }
  
  bind(function:escapeXML(?label) as ?archimateName)
  bind(function:escapeXML(?definition) as ?archimateDocumentation)

  BIND(IRI(CONCAT(STR($this),"-Relationship")) as ?relationship)
  BIND(IRI(CONCAT(STR($this),"-RelationshipName")) as ?relationshipNameNode)
  BIND(IRI(CONCAT(STR($this),"-RelationshipNameText")) as ?relationshipNameTextNode)
  BIND(IRI(CONCAT(STR($this),"-RelationshipDocumentation")) as ?relationshipDocumentationNode)
  BIND(IRI(CONCAT(STR($this),"-DocumentationText")) as ?documentationTextNode)
  }

''';
    rdfs:isDefinedBy archiXML:.


shp:ElementConnector
    a sh:NodeShape;
    sh:rule rule:ElementConnector;
    sh:target target:ElementConnector;
    skos:prefLabel 'archimate elements shape'@en;
    rdfs:isDefinedBy archiXML:.

target:ElementConnector
    a sh:SPARQLTarget;
    rdfs:comment 'Select the elements node in the document that is not yet connected to element nodes.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    
select $this
where {
  # Select individuals of archiXML:Elements
  $this rdf:type archiXML:Elements.
  ?unprocessedElement rdf:type archiXML:Element.
  filter not exists {
      $this ?member ?unprocessedElement .
      ?unprocessedElement rdf:type archiXML:Element.      
      filter(strstarts(str(?member), concat(str(rdf:), '_')))
  }
}
''';
    rdfs:isDefinedBy archiXML:.    

rule:ElementConnector
    a sh:SPARQLRule;
    rdfs:comment 'A rule that connects all archimate elements with the elements node in an archimate document.'@en;
    skos:prefLabel 'archimate element connector rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

construct {

  $this ?rdf_member ?element.
  
} where {
  ?element rdf:type archiXML:Element.
  BIND(IRI(CONCAT(str(rdf:),"_", str(function:getElementPosition(?element)))) as ?rdf_member)  
  BIND(IRI(CONCAT(REPLACE(STR($this),"-Elements", "-Model"))) as ?model)
  }
''';
    rdfs:isDefinedBy archiXML:.

shp:RelationshipConnector
    a sh:NodeShape;
    sh:rule rule:RelationshipConnector;
    sh:target target:Relationships;
    skos:prefLabel 'archimate relationships shape'@en;
    rdfs:isDefinedBy archiXML:.

target:Relationships
    a sh:SPARQLTarget;
    rdfs:comment 'Select the relationships node in the document that is not yet connected to relationship nodes.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    
select $this
where {
  # Select individuals of archiXML:Relationships
  $this rdf:type archiXML:Relationships.
  ?unprocessedRelationship rdf:type archiXML:Relationship.
  filter not exists {
      $this ?member ?unprocessedRelationship .
      ?unprocessedRelationship rdf:type archiXML:Relationship.
      filter(strstarts(str(?member), concat(str(rdf:), '_')))
  }
}
''';
    rdfs:isDefinedBy archiXML:.

rule:RelationshipConnector
    a sh:SPARQLRule;
    rdfs:comment 'A rule that connects all individual archimate relationships with the relationships node in an archimate document.'@en;
    skos:prefLabel 'archimate relationship connector rule'@en;
    sh:construct '''

prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

construct {

  $this ?rdf_member ?relationship.
  
} where {
  ?relationship rdf:type archiXML:Relationship;
                prov:wasDerivedFrom ?archimateRelation.
  bind(iri(concat(str(rdf:),"_", str(function:getRelationshipPosition(?archimateRelation)))) as ?rdf_member)
  }
''';
    rdfs:isDefinedBy archiXML:.

shp:RelationshipIdentifier
    a sh:NodeShape;
    sh:rule rule:RelationshipIdentifier;
    sh:target target:RelationshipIdentifier;
    skos:prefLabel 'Relationship Identifier shape'@en;
    rdfs:isDefinedBy archiXML:.

target:RelationshipIdentifier
 a sh:SPARQLTarget;
    rdfs:comment 'Select all relationships in the model that are lacking an identifier.'@en;
    sh:select '''

prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    
select $this
where {
  
  $this rdf:type archiXML:Relationship.
  filter not exists {$this archiXML:identifier []}
  
}
''';
    rdfs:isDefinedBy archiXML:.

rule:RelationshipIdentifier
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an identifier in the XML document for an archimate relationship'@en;
    skos:prefLabel 'archimate relationship identifier rule'@en;
    sh:construct '''

prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>

construct {

  $this archiXML:identifier ?identifier .
  

} where {
  $this prov:wasDerivedFrom ?archimateRelation.
  BIND(CONCAT("Relation_",str(function:getRelationshipPosition(?archimateRelation))) as ?identifier)
  }
''';
    rdfs:isDefinedBy archiXML:.

shp:ElementIdentifier
    a sh:NodeShape;
    sh:rule rule:ElementIdentifier;
    sh:target target:ElementIdentifier;
    skos:prefLabel 'Element Identifier shape'@en;
    rdfs:isDefinedBy archiXML:.

target:ElementIdentifier
 a sh:SPARQLTarget;
    rdfs:comment 'Select all elements in the model that are lacking an identifier.'@en;
    sh:select '''

prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    
select $this
where {
  
  $this rdf:type archiXML:Element.
  filter not exists {$this archiXML:identifier []}
  
}
''';
    rdfs:isDefinedBy archiXML:.
    
rule:ElementIdentifier
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an identifier in the XML document for an archixml element'@en;
    skos:prefLabel 'archixml element identifier rule'@en;
    sh:construct '''

prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  $this archiXML:identifier ?identifier .
  

} where {
  $this xsi:type ?xsiType.
  BIND(CONCAT(?xsiType, str(function:getSubElementPosition($this))) as ?identifier)  
  }
''';
    rdfs:isDefinedBy archiXML:.

shp:ModelIdentifier
    a sh:NodeShape;
    sh:rule rule:ModelIdentifier;
    sh:targetClass archiXML:Model;
    skos:prefLabel 'Model Identifier shape'@en;
    rdfs:isDefinedBy archiXML:.

rule:ModelIdentifier
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an identifier in the XML document for an archimate model'@en;
    skos:prefLabel 'archimate model identifier rule'@en;
    sh:construct '''

prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>

construct {

  # create the model identifier
  $this archiXML:identifier ?identifier .
  

} where {
  BIND(CONCAT("Model-", str(function:getModelPosition($this))) as ?identifier)  
  }
''';
    rdfs:isDefinedBy archiXML:.
   
shp:View
    a sh:NodeShape;
    sh:rule rule:View;
    sh:target target:View;
    skos:prefLabel 'view shape'@en;
    rdfs:isDefinedBy archiXML:.

target:View
    a sh:SPARQLTarget;
    rdfs:comment 'Select all views in the model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # Select all views... 
  $this rdf:type archimate:View.
    
  # ...that are not processed yet
  filter not exists { 
    ?archiXML_view rdf:type archiXML:View ;
                   prov:wasDerivedFrom $this.
  }
}
''';
    rdfs:isDefinedBy archiXML:.

rule:View
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a archixml view in the XML document based on an archimate view.'@en;
    skos:prefLabel 'archixml view rule'@en;
    sh:construct '''

prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

   ?view rdf:type archiXML:View;
           xsi:type "Diagram";
           skos:prefLabel ?label;
           rdf:_1 ?viewNameNode;
           rdf:_2 ?viewDocumentationNode;
           prov:wasDerivedFrom $this.
   ?viewNameNode rdf:type archiXML:Name;
           rdf:_1 ?viewNameTextNode;
           xml:lang "en".
   ?viewNameTextNode rdf:type archiXML:Text;
           xml:fragment ?archimateName.
   ?viewDocumentationNode rdf:type archiXML:Documentation;
           rdf:_1 ?documentationTextNode;
           xml:lang "en".
   ?documentationTextNode rdf:type archiXML:Text;
           xml:fragment ?archimateDocumentation.                 

} where {

  # Get the archimate metadata of the archimate view
  $this skos:prefLabel ?label;
        skos:definition ?definition.
  
  bind(function:escapeXML(?label) as ?archimateName)
  bind(function:escapeXML(?definition) as ?archimateDocumentation)         
  
  # Create IRI's
  BIND(IRI(CONCAT(STR($this),"-View"))                as ?view)
  BIND(IRI(CONCAT(STR($this),"-ViewName"))            as ?viewNameNode)
  BIND(IRI(CONCAT(STR($this),"-ViewNameText"))        as ?viewNameTextNode)
  BIND(IRI(CONCAT(STR($view),"-Documentation"))       as ?viewDocumentationNode)
  BIND(IRI(CONCAT(STR($view),"-DocumentationText"))   as ?documentationTextNode)    
  }
''';
    rdfs:isDefinedBy archiXML:.

shp:NodeCreator
    a sh:NodeShape;
    sh:rule rule:NodeCreator;
    sh:target target:NodeCreator;
    skos:prefLabel 'node creator shape'@en;
    rdfs:isDefinedBy archiXML:.

target:NodeCreator
    a sh:SPARQLTarget;
    rdfs:comment 'Select all archimate view nodes in the archimate model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # Select all archimate view nodes... 
  
  $this rdf:type archimate:ViewNode.
 
  
  # ...that are not processed yet
  filter not exists { 
    ?archiXML_node rdf:type archiXML:Node ;
                   prov:wasDerivedFrom $this.
  }

  # ...but only if the potential depicted archimate element is already processed
  filter not exists {
  $this foaf:depicts ?element.
   filter not exists {
      [] prov:wasDerivedFrom ?element.
    }
  }
}
''';
    rdfs:isDefinedBy archiXML:.


rule:NodeCreator
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archixml node in the XML document based on an archimate view node.'@en;
    skos:prefLabel 'archixml node creator rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {
             
   ?elementNode rdf:type archiXML:Node;
           xsi:type ?xsiType;
           archiXML:elementRef ?elementIdentifier;
           archiXML:x ?x ;
           archiXML:y ?y ;
           archiXML:w ?w ;
           archiXML:h ?h ;
           prov:wasDerivedFrom $this;
           dct:references ?archiXMLElement;
           rdf:_1 ?nodeStyleIRI.
   ?nodeStyleIRI rdf:type archiXML:Style;
           rdf:_1 ?fillColorIRI;
           rdf:_2 ?lineColorIRI;
           rdf:_3 ?fontIRI.
   ?fillColorIRI rdf:type archiXML:FillColor;
           archiXML:a ?fillColorA ;
           archiXML:b ?fillColorB ;
           archiXML:g ?fillColorG ;
           archiXML:r ?fillColorR .
   ?lineColorIRI rdf:type archiXML:LineColor;
           archiXML:a ?lineColorA ;
           archiXML:b ?lineColorB ;
           archiXML:g ?lineColorG ;
           archiXML:r ?lineColorR .
   ?fontIRI rdf:type archiXML:Font;
           archiXML:name ?fontName;
           archiXML:size ?fontSize;
           rdf:_1 ?fontColorIRI.
   ?fontColorIRI rdf:type archiXML:Color;
           archiXML:b ?fontColorB ;
           archiXML:g ?fontColorG ;
           archiXML:r ?fontColorR .               

} where {

  # Get the archimate metadata of the archimate view
  ?archimateView rdf:type archimate:View;
                  archimate:contains* $this.
  
  # A view node depicts an element, get the metadata for this.
  $this foaf:depicts ?element.
  ?element rdf:type/rdfs:subClassOf* archimate:Element.
  ?archiXMLElement prov:wasDerivedFrom ?element;
                   archiXML:identifier ?elementIdentifier. 
  bind("Element" as ?xsiType)
  
  optional {
  $this
    archimate:horizontal ?x;
    archimate:vertical   ?y;
    archimate:height     ?h;     
    archimate:width      ?w.
  }
  
  optional {
  $this
    archimate:fillColor  ?fillColor;
    archimate:lineColor  ?lineColor;
    archimate:font       ?font.
    
  ?fillColor rdf:type archimate:Color;
    archimate:red   ?fillColorR;
    archimate:green ?fillColorG;
    archimate:blue  ?fillColorB;
    archimate:alpha ?fillColorA. 

  ?lineColor rdf:type archimate:Color;
    archimate:red   ?lineColorR;
    archimate:green ?lineColorG;
    archimate:blue  ?lineColorB;
    archimate:alpha ?lineColorA. 

  ?font rdf:type archimate:Font;
    archimate:fontName  ?fontName;
    archimate:fontSize  ?fontSize;
    archimate:fontColor ?fontColor.

  ?fontColor rdf:type archimate:Color;
    archimate:red   ?fontColorR;
    archimate:green ?fontColorG;
    archimate:blue  ?fontColorB.
  }
  # Set unique identifier
  BIND(CONCAT("Node_",STR(?elementIdentifier)) as ?nodeIdentifier)

  # Create IRI's
  BIND(IRI(CONCAT(STR(?archimateView),"-View-"))                           as ?view)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier))                             as ?elementNode)  
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-nodestyle"))               as ?nodeStyleIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-fillcolor"))               as ?fillColorIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-linecolor"))               as ?lineColorIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-font"))                    as ?fontIRI)    
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-fontcolor"))               as ?fontColorIRI)    
 
  }
''';
    rdfs:isDefinedBy archiXML:.

shp:ContainerCreator
    a sh:NodeShape;
    sh:rule rule:ContainerCreator;
    sh:target target:ContainerCreator;
    skos:prefLabel 'container creator shape'@en;
    rdfs:isDefinedBy archiXML:.

target:ContainerCreator
    a sh:SPARQLTarget;
    rdfs:comment 'Select all archimate containers in the archimate model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # Select all archimate containers... 

  $this rdf:type archimate:Container.
  
  # ...that are not processed yet
  filter not exists { 
    ?archiXML_node rdf:type archiXML:Node ;
                   prov:wasDerivedFrom $this.
  }
}
''';
    rdfs:isDefinedBy archiXML:.


rule:ContainerCreator
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archixml node in the XML document based on an archimate container.'@en;
    skos:prefLabel 'archixml container creator rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {
             
   ?elementNode rdf:type archiXML:Node;
           xsi:type ?xsiType;
           archiXML:x ?x ;
           archiXML:y ?y ;
           archiXML:w ?w ;
           archiXML:h ?h ;
           prov:wasDerivedFrom $this;
           rdf:_1 ?labelNode;
           rdf:_2 ?nodeStyleIRI.
   ?labelNode rdf:type archiXML:Label;
           rdf:_1 ?labelTextNode.
   ?labelTextNode rdf:type archiXML:Text;
           xml:fragment ?label.
   ?nodeStyleIRI rdf:type archiXML:Style;
           rdf:_1 ?fillColorIRI;
           rdf:_2 ?lineColorIRI;
           rdf:_3 ?fontIRI.
   ?fillColorIRI rdf:type archiXML:FillColor;
           archiXML:a ?fillColorA ;
           archiXML:b ?fillColorB ;
           archiXML:g ?fillColorG ;
           archiXML:r ?fillColorR .
   ?lineColorIRI rdf:type archiXML:LineColor;
           archiXML:a ?lineColorA ;
           archiXML:b ?lineColorB ;
           archiXML:g ?lineColorG ;
           archiXML:r ?lineColorR .
   ?fontIRI rdf:type archiXML:Font;
           archiXML:name ?fontName;
           archiXML:size ?fontSize;
           rdf:_1 ?fontColorIRI.
   ?fontColorIRI rdf:type archiXML:Color;
           archiXML:b ?fontColorB ;
           archiXML:g ?fontColorG ;
           archiXML:r ?fontColorR .               

} where {

  # Get the archimate metadata of the archimate view
  ?archimateView rdf:type archimate:View;
                  archimate:contains* $this.
  
  # Establish the unique sequence number of a container across the model
  {select $this ((count(?prevIndex)+1) as ?indexContainer)
   where {
    $this rdf:type archimate:Container.
    bind(str($this) as ?index)
    optional {
              ?prevContainer rdf:type archimate:Container.
              bind(str(?prevContainer) as ?prevIndex)
              filter(?prevIndex < ?index)
             } 
     } group by $this
  }
  bind(concat("Container", str(?indexContainer)) as ?containerIdentifier)
  bind("Container" as ?xsiType)

  # Get optional label for container
  optional {
  $this  
      skos:prefLabel ?label.
  }
  
  optional {
  $this
    archimate:horizontal ?x;
    archimate:vertical   ?y;
    archimate:height     ?h;     
    archimate:width      ?w.
  }
  
  optional {
  $this
    archimate:fillColor  ?fillColor;
    archimate:lineColor  ?lineColor;
    archimate:font       ?font.
    
  ?fillColor rdf:type archimate:Color;
    archimate:red   ?fillColorR;
    archimate:green ?fillColorG;
    archimate:blue  ?fillColorB;
    archimate:alpha ?fillColorA. 

  ?lineColor rdf:type archimate:Color;
    archimate:red   ?lineColorR;
    archimate:green ?lineColorG;
    archimate:blue  ?lineColorB;
    archimate:alpha ?lineColorA. 

  ?font rdf:type archimate:Font;
    archimate:fontName  ?fontName;
    archimate:fontSize  ?fontSize;
    archimate:fontColor ?fontColor.

  ?fontColor rdf:type archimate:Color;
    archimate:red   ?fontColorR;
    archimate:green ?fontColorG;
    archimate:blue  ?fontColorB.
  }
  # Set unique identifier
  BIND(CONCAT("Node_",STR(?containerIdentifier)) as ?nodeIdentifier)

  # Create IRI's
  BIND(IRI(CONCAT(STR(?archimateView),"-View-"))                           as ?view)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier))                             as ?elementNode)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-label"))                   as ?labelNode)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-labelText"))               as ?labelTextNode)  
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-nodestyle"))               as ?nodeStyleIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-fillcolor"))               as ?fillColorIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-linecolor"))               as ?lineColorIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-font"))                    as ?fontIRI)    
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-fontcolor"))               as ?fontColorIRI)    
 
  }
''';
    rdfs:isDefinedBy archiXML:.

shp:LabelCreator
    a sh:NodeShape;
    sh:rule rule:LabelCreator;
    sh:target target:LabelCreator;
    skos:prefLabel 'label creator shape'@en;
    rdfs:isDefinedBy archiXML:.

target:LabelCreator
    a sh:SPARQLTarget;
    rdfs:comment 'Select all archimate notes in the archimate model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # Select all potential archimate notes... 
  
  $this rdf:type archimate:Note.
  
  # ...that are not processed yet
  filter not exists { 
    ?archiXML_node rdf:type archiXML:Node ;
                   prov:wasDerivedFrom $this.
  }
}
''';
    rdfs:isDefinedBy archiXML:.


rule:LabelCreator
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archixml node in the XML document based on an archimate note.'@en;
    skos:prefLabel 'archixml label creator rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {
             
   ?elementNode rdf:type archiXML:Node;
           xsi:type ?xsiType;
           archiXML:x ?x ;
           archiXML:y ?y ;
           archiXML:w ?w ;
           archiXML:h ?h ;
           prov:wasDerivedFrom $this;
           rdf:_1 ?labelNode;
           rdf:_2 ?nodeStyleIRI.
   ?labelNode rdf:type archiXML:Label;
           rdf:_1 ?labelTextNode.
   ?labelTextNode rdf:type archiXML:Text;
           xml:fragment ?label.
   ?nodeStyleIRI rdf:type archiXML:Style;
           rdf:_1 ?fillColorIRI;
           rdf:_2 ?lineColorIRI;
           rdf:_3 ?fontIRI.
   ?fillColorIRI rdf:type archiXML:FillColor;
           archiXML:a ?fillColorA ;
           archiXML:b ?fillColorB ;
           archiXML:g ?fillColorG ;
           archiXML:r ?fillColorR .
   ?lineColorIRI rdf:type archiXML:LineColor;
           archiXML:a ?lineColorA ;
           archiXML:b ?lineColorB ;
           archiXML:g ?lineColorG ;
           archiXML:r ?lineColorR .
   ?fontIRI rdf:type archiXML:Font;
           archiXML:name ?fontName;
           archiXML:size ?fontSize;
           rdf:_1 ?fontColorIRI.
   ?fontColorIRI rdf:type archiXML:Color;
           archiXML:b ?fontColorB ;
           archiXML:g ?fontColorG ;
           archiXML:r ?fontColorR .               

} where {

  # Get the archimate metadata of the archimate view
  ?archimateView rdf:type archimate:View;
                  archimate:contains* $this.

  # A view node can be a note, get the metadata for this
  # Establish the unique sequence number of a note across the model
  {select $this ((count(?prevIndex)+1) as ?indexNote)
   where {
    $this rdf:type archimate:Note.   
    bind(str($this) as ?index)
    optional {
              ?prevNote rdf:type archimate:Note.
              bind(str(?prevNote) as ?prevIndex)
              filter(?prevIndex < ?index)
             } 
     } group by $this
  }
  bind(concat("Label", str(?indexNote)) as ?labelIdentifier)
  bind("Label" as ?xsiType)
  
  # Get optional label for the note
  optional {
  $this  
      skos:prefLabel ?label.
  }
  
  optional {
  $this
    archimate:horizontal ?x;
    archimate:vertical   ?y;
    archimate:height     ?h;     
    archimate:width      ?w.
  }
  
  optional {
  $this
    archimate:fillColor  ?fillColor;
    archimate:lineColor  ?lineColor;
    archimate:font       ?font.
    
  ?fillColor rdf:type archimate:Color;
    archimate:red   ?fillColorR;
    archimate:green ?fillColorG;
    archimate:blue  ?fillColorB;
    archimate:alpha ?fillColorA. 

  ?lineColor rdf:type archimate:Color;
    archimate:red   ?lineColorR;
    archimate:green ?lineColorG;
    archimate:blue  ?lineColorB;
    archimate:alpha ?lineColorA. 

  ?font rdf:type archimate:Font;
    archimate:fontName  ?fontName;
    archimate:fontSize  ?fontSize;
    archimate:fontColor ?fontColor.

  ?fontColor rdf:type archimate:Color;
    archimate:red   ?fontColorR;
    archimate:green ?fontColorG;
    archimate:blue  ?fontColorB.
  }
  # Set unique identifier
  BIND(CONCAT("Node_",STR(?labelIdentifier)) as ?nodeIdentifier)

  # Create IRI's
  BIND(IRI(CONCAT(STR(?archimateView),"-View-"))                           as ?view)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier))                             as ?elementNode)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-label"))                   as ?labelNode)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-labelText"))               as ?labelTextNode)  
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-nodestyle"))               as ?nodeStyleIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-fillcolor"))               as ?fillColorIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-linecolor"))               as ?lineColorIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-font"))                    as ?fontIRI)    
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-fontcolor"))               as ?fontColorIRI)    
 
  }
''';
    rdfs:isDefinedBy archiXML:.    

shp:ViewReferenceCreator
    a sh:NodeShape;
    sh:rule rule:ViewReferenceCreator;
    sh:target target:ViewReferenceCreator;
    skos:prefLabel 'view reference creator shape'@en;
    rdfs:isDefinedBy archiXML:.

target:ViewReferenceCreator
    a sh:SPARQLTarget;
    rdfs:comment 'Select all view references in the archimate model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # Select all nested view references... 
  
  $this rdf:type archimate:ViewReference.
  
  # ...that are not processed yet
  filter not exists { 
    ?archiXML_node rdf:type archiXML:Node ;
                   prov:wasDerivedFrom $this.
  }
}
''';
    rdfs:isDefinedBy archiXML:.


rule:ViewReferenceCreator
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archixml node in the XML document based on a view reference.'@en;
    skos:prefLabel 'archixml view reference creator rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {
             
   ?elementNode rdf:type archiXML:Node;
           xsi:type ?xsiType;
           archiXML:x ?x ;
           archiXML:y ?y ;
           archiXML:w ?w ;
           archiXML:h ?h ;
           prov:wasDerivedFrom $this;
           rdf:_1 ?labelNode;
           rdf:_2 ?nodeStyleIRI;
           rdf:_3 ?viewRefIRI.
   ?labelNode rdf:type archiXML:Label;
           rdf:_1 ?labelTextNode.
   ?labelTextNode rdf:type archiXML:Text;
           xml:fragment ?label.
   ?nodeStyleIRI rdf:type archiXML:Style;
           rdf:_1 ?fillColorIRI;
           rdf:_2 ?lineColorIRI;
           rdf:_3 ?fontIRI.
   ?fillColorIRI rdf:type archiXML:FillColor;
           archiXML:a ?fillColorA ;
           archiXML:b ?fillColorB ;
           archiXML:g ?fillColorG ;
           archiXML:r ?fillColorR .
   ?lineColorIRI rdf:type archiXML:LineColor;
           archiXML:a ?lineColorA ;
           archiXML:b ?lineColorB ;
           archiXML:g ?lineColorG ;
           archiXML:r ?lineColorR .
   ?fontIRI rdf:type archiXML:Font;
           archiXML:name ?fontName;
           archiXML:size ?fontSize;
           rdf:_1 ?fontColorIRI.
   ?fontColorIRI rdf:type archiXML:Color;
           archiXML:b ?fontColorB ;
           archiXML:g ?fontColorG ;
           archiXML:r ?fontColorR . 
   ?viewRefIRI rdf:type archiXML:ViewRef;
           archiXML:ref ?viewIdentifier.    

} where {

  # Get the archimate metadata of the archimate view
  ?archimateView rdf:type archimate:View;
                  archimate:contains* $this.
  $this foaf:depicts ?referencedView.
  ?archiXMLview prov:wasDerivedFrom ?referencedView;
                rdf:type archiXML:View;
                archiXML:identifier ?viewIdentifier.

  # Get the view reference metadata
  # Establish the unique sequence number of the view reference across the model
  {select $this ((count(?prevIndex)+1) as ?indexRef)
   where {
    $this rdf:type archimate:ViewReference.
    bind(str($this) as ?index)
    optional {
              ?prevReference rdf:type archimate:ViewReference.
              bind(str(?prevReference) as ?prevIndex)
              filter(?prevIndex < ?index)
             } 
     } group by $this
  }
  bind(concat("ViewReference", str(?indexRef)) as ?labelIdentifier)
  bind("Label" as ?xsiType)
  
  # Get optional label for the note
  optional {
  $this  
      skos:prefLabel ?label.
  }
  
  optional {
  $this
    archimate:horizontal ?x;
    archimate:vertical   ?y;
    archimate:height     ?h;     
    archimate:width      ?w.
  }
  
  optional {
  $this
    archimate:fillColor  ?fillColor;
    archimate:lineColor  ?lineColor;
    archimate:font       ?font.
    
  ?fillColor rdf:type archimate:Color;
    archimate:red   ?fillColorR;
    archimate:green ?fillColorG;
    archimate:blue  ?fillColorB;
    archimate:alpha ?fillColorA. 

  ?lineColor rdf:type archimate:Color;
    archimate:red   ?lineColorR;
    archimate:green ?lineColorG;
    archimate:blue  ?lineColorB;
    archimate:alpha ?lineColorA. 

  ?font rdf:type archimate:Font;
    archimate:fontName  ?fontName;
    archimate:fontSize  ?fontSize;
    archimate:fontColor ?fontColor.

  ?fontColor rdf:type archimate:Color;
    archimate:red   ?fontColorR;
    archimate:green ?fontColorG;
    archimate:blue  ?fontColorB.
  }
  # Set unique identifier
  BIND(CONCAT("Node_",STR(?labelIdentifier)) as ?nodeIdentifier)

  # Create IRI's
  BIND(IRI(CONCAT(STR(?archimateView),"-View-"))                           as ?view)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier))                             as ?elementNode)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-label"))                   as ?labelNode)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-labelText"))               as ?labelTextNode)  
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-nodestyle"))               as ?nodeStyleIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-fillcolor"))               as ?fillColorIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-linecolor"))               as ?lineColorIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-font"))                    as ?fontIRI)    
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-fontcolor"))               as ?fontColorIRI) 
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-viewref"))                 as ?viewRefIRI)   
 
  }
''';
    rdfs:isDefinedBy archiXML:.    

shp:ConnectionCreator
    a sh:NodeShape;
    sh:rule rule:ConnectionCreator;
    sh:target target:ConnectionCreator;
    skos:prefLabel 'connection creator shape'@en;
    rdfs:isDefinedBy archiXML:.

target:ConnectionCreator
    a sh:SPARQLTarget;
    rdfs:comment 'Select all view connections in the model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # Select all view connections... 
  $this rdf:type archimate:Connection.
    
  # ...that are not processed yet
  filter not exists { 
    ?archiXML_view rdf:type archiXML:Connection ;
                   prov:wasDerivedFrom $this.
  }

  # ...but only if the depicted archimate element is already processed
  filter not exists {
  ?archimateView archimate:contains $this.
  $this foaf:depicts ?relationship.
   filter not exists {
      [] prov:wasDerivedFrom ?relationship.
    }
  }
}
''';
    rdfs:isDefinedBy archiXML:.


rule:ConnectionCreator
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a connection in the XML document based on a relationship in an archimate view.'@en;
    skos:prefLabel 'archimate connection creator rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

   ?view 
           ?memberConnection ?connectionNode.
   
   ?connectionNode 
           rdf:type archiXML:Connection;
           xsi:type "Relationship";
           archiXML:relationshipRef ?relationIdentifier;
           dct:references ?archiXMLRelationship ;
           prov:wasDerivedFrom $this;
           rdf:_1 ?connectionStyle;
           ?memberBendPoint ?connectionBendPointIRI.
           
   ?connectionStyle 
           rdf:type archiXML:Style;
           rdf:_1 ?connectionLineColorIRI;
           rdf:_2 ?connectionFontIRI.
           
   ?connectionLineColorIRI 
           rdf:type archiXML:LineColor;
           archiXML:b ?connectionLineColorB ;
           archiXML:g ?connectionLineColorG ;
           archiXML:r ?connectionLineColorR .
           
   ?connectionFontIRI 
           rdf:type archiXML:Font;
           archiXML:name ?connectionFontName;
           archiXML:size ?connectionFontSize;
           rdf:_1 ?connectionFontColorIRI.
           
   ?connectionFontColorIRI 
           rdf:type archiXML:Color;
           archiXML:b ?connectionFontColorB ;
           archiXML:g ?connectionFontColorG ;
           archiXML:r ?connectionFontColorR . 
           
   ?connectionBendPointIRI 
          rdf:type archiXML:BendPoint;
          archiXML:x ?x;
          archiXML:y ?y.

} where {

  ?archimateView archimate:contains $this.
  $this foaf:depicts ?relationship.
  
  optional {
  $this
    archimate:lineColor  ?connectionLineColor;
    archimate:font       ?connectionFont.

  ?connectionLineColor rdf:type archimate:Color;
    archimate:red   ?connectionLineColorR;
    archimate:green ?connectionLineColorG;
    archimate:blue  ?connectionLineColorB. 

  ?connectionFont rdf:type archimate:Font;
    archimate:fontName  ?connectionFontName;
    archimate:fontSize  ?connectionFontSize;
    archimate:fontColor ?connectionFontColor.

  ?connectionFontColor rdf:type archimate:Color;
    archimate:red   ?connectionFontColorR;
    archimate:green ?connectionFontColorG;
    archimate:blue  ?connectionFontColorB.
  }
  
  optional {
  $this 
     archimate:bendPoint ?bendPointList.
  ?bendPointList rdf:rest*/rdf:first ?bendPoint.
  
  ?bendPoint 
     rdf:type archimate:BendPoint;
     archimate:horizontal ?x;
     archimate:vertical   ?y.
  }
  
  ?relationship rdf:type/rdfs:subClassOf* archimate:Relationship.
  
  ?archiXMLRelationship prov:wasDerivedFrom ?relationship;
                   archiXML:identifier ?relationIdentifier;
                   archiXML:source ?source;
                   archiXML:target ?target.
  
  ?archiXMLElementSource archiXML:identifier ?source;
                   rdf:type ?classSource.

  ?archiXMLElementTarget archiXML:identifier ?target;
                   rdf:type ?classTarget. 
  
  # Establish position of the relationship 
  {select ?archimateView $this ((count(?prevIndex)) as ?indexRelationship)
   where {
    ?archimateView archimate:contains $this.
    bind(str($this) as ?index)
    optional {
              ?archimateView archimate:contains ?prevDepiction.
              bind(str(?prevDepiction) as ?prevIndex)
              filter(?prevIndex < ?index)
             } 
     } group by ?archimateView $this
  }

  # Establish the node index 
  {select ?archimateView (count(?node) as ?indexNode)
   where {
    ?archimateView rdf:type archimate:View;
                   archimate:contains ?node.
    ?node rdf:type ?nodeClass.
    filter (?nodeClass in (archimate:ViewNode, archimate:Container, archimate:Note, archimate:ViewReference))
    } group by ?archimateView
  }
  
  # Establish the bendpoint index, if present
  optional {
  {select ?bendPointList ?bendPoint (count(?sublist) as ?indexBendPoint) {
   $this rdf:type archimate:Connection;
         archimate:bendPoint ?bendPointList.
   ?bendPointList rdf:rest* ?sublist.
   ?sublist rdf:rest*/rdf:first ?bendPoint.
    } group by ?bendPointList ?bendPoint
   }
  }
    
  # Set unique identifiers
  BIND(CONCAT("Connection_",STR(?relationIdentifier)) as ?connectionIdentifier)    
  BIND(IF(?classSource = archiXML:Element, "Node_", if(?classSource = archiXML:Relationship, "Connection_", ?unboundDummy)) as ?sourceIdentifierString)
  BIND(IF(?classTarget = archiXML:Element, "Node_", if(?classTarget = archiXML:Relationship, "Connection_", ?unboundDummy)) as ?targetIdentifierString)
  BIND(CONCAT(?sourceIdentifierString, ?source) as ?sourceIdentifier)
  BIND(CONCAT(?targetIdentifierString, ?target) as ?targetIdentifier)
  
  # Establish instance of rdfs:member for the connection and bendpoint. 
  # - Take into account that the indexRelationship starts with 0 and needs an offset of +1
  # - Take into account the name & documentation nodes (hence offset of +2).  
  # - Take into account that viewnodes, containers and notes take precedence over relationships (hence offset of + ?indexNode)
  BIND(IRI(CONCAT(STR(rdf:), "_", STR(?indexRelationship + 3 + ?indexNode))) as ?memberConnection)
  BIND(IRI(CONCAT(STR(rdf:), "_", STR(?indexBendPoint +2))) as ?memberBendPoint)
  
  # Create IRI's
  BIND(IRI(CONCAT(STR(?archimateView),"-View"))                                             as ?view)
  BIND(IRI(CONCAT(STR(?view),?connectionIdentifier))                                        as ?connectionNode)
  BIND(IRI(CONCAT(STR(?view),?connectionIdentifier, "-nodestyle"))                          as ?connectionStyle)
  BIND(IRI(CONCAT(STR(?view),?connectionIdentifier, "-linecolor"))                          as ?connectionLineColorIRI)
  BIND(IRI(CONCAT(STR(?view),?connectionIdentifier, "-font"))                               as ?connectionFontIRI)    
  BIND(IRI(CONCAT(STR(?view),?connectionIdentifier, "-fontcolor"))                          as ?connectionFontColorIRI)
  BIND(IRI(CONCAT(STR(?view),?connectionIdentifier, "-bendpoint-", str(?indexBendPoint+1))) as ?connectionBendPointIRI)
 
  }
''';
    rdfs:isDefinedBy archiXML:.

shp:NodeConnector
    a sh:NodeShape;
    sh:rule rule:NodeConnector;
    sh:target target:NodeConnector;
    skos:prefLabel 'node connector shape'@en;
    rdfs:isDefinedBy archiXML:.

target:NodeConnector
    a sh:SPARQLTarget;
    rdfs:comment 'Select all archixml nodes in the model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # Select all archixml nodes for which a parent exists but who are not connected yet.
  $this rdf:type archiXML:Node;
        prov:wasDerivedFrom ?viewNode. 
  ?parent archimate:contains ?viewNode.
  ?parentNode prov:wasDerivedFrom ?parent.
    
  # ...that are not processed yet
  filter not exists { 
    ?parentNode ?member $this.
    filter(strstarts(str(?member), concat(str(rdf:), '_')))
  }
}
''';
    rdfs:isDefinedBy archiXML:.

rule:NodeConnector
    a sh:SPARQLRule;
    rdfs:comment 'A rule that connects a node in the XML document with its parent node or archimate view.'@en;
    skos:prefLabel 'archimate node connector rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  ?parentNode ?memberNode $this.        

} where {

  # Get the parent node
  $this prov:wasDerivedFrom ?node. 
  ?parent archimate:contains ?node.
  ?parentNode prov:wasDerivedFrom ?parent.

  # Establish position of the element within the parent
  {select ?parent ?node ((count(?prevIndex)) as ?indexMember)
   where{
    ?parent archimate:contains ?node.
    bind(str(?node) as ?index)
    optional {
              ?parent archimate:contains ?prevNode.
              ?prevNode rdf:type ?prevNodeClass.
              filter (?prevNodeClass in (archimate:ViewNode, archimate:Container, archimate:Note, archimate:ViewReference))
              bind(str(?prevNode) as ?prevIndex)
              filter(?prevIndex < ?index)
             } 
     } group by ?parent ?node
  }
  
  # Establish instance of rdfs:member for the node.
  # Take into account that the indexMember starts with 0 and hence needs an offset of +1
  # Take into account the name & documentation nodes (hence offset of +2). 
  # Together this makes 3 as a total offset.
  
  BIND(IRI(CONCAT(STR(rdf:), "_", STR(?indexMember+3))) as ?memberNode)
 
  }
''';
    rdfs:isDefinedBy archiXML:.


shp:DiagramsConnector
    a sh:NodeShape;
    sh:rule rule:DiagramsConnector;
    sh:target target:DiagramsConnector;
    skos:prefLabel 'archixml diagrams connector shape'@en;
    rdfs:isDefinedBy archiXML:.

target:DiagramsConnector
    a sh:SPARQLTarget;
    rdfs:comment 'Select the view in an archixml document that is not connected to the diagrams node.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # Select the archiXML view...
  $this rdf:type archiXML:View .
  
  #...but only if the view is not yet connected .
  filter not exists { 
    $this rdf:type archiXML:View .
    ?diagrams ?member $this.
    filter(strstarts(str(?member), concat(str(rdf:), '_')))
    ?diagrams rdf:type archiXML:Diagrams.
  }

  #...and if all archimate views are processed into archiXML views
  filter not exists { 
  ?someArchimateView rdf:type archimate:View.
    filter not exists {
    ?someArchiXMLView rdf:type archiXML:View ;
                      prov:wasDerivedFrom ?someArchimateView.
    }
  }
}
''';
    rdfs:isDefinedBy archiXML:.
    
rule:DiagramsConnector
    a sh:SPARQLRule;
    rdfs:comment 'A rule that connects a view with the diagrams node in an archixml document.'@en;
    skos:prefLabel 'archixml diagrams connector rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

construct {

  ?archixmlDiagrams ?rdf_member $this.
  
} where {

  $this prov:wasDerivedFrom ?archimateView.
  ?archimateView rdf:type archimate:View;
                 rdfs:isDefinedBy ?archimateModel.
  ?archimateModel rdf:type archimate:Model.                 
  ?archixmlDocument rdf:type archiXML:Document;
                    prov:wasDerivedFrom ?archimateModel;
                    rdf:_1 ?archixmlModel.
  ?archixmlModel rdf:type archiXML:Model;
                 rdf:_5 ?archixmlViews.
  ?archixmlViews rdf:type archiXML:Views;
                 rdf:_1 ?archixmlDiagrams.
  ?archixmlDiagrams rdf:type archiXML:Diagrams.                 
  
  BIND(STR(function:getViewPosition($this)) as ?index)
  BIND(IRI(CONCAT(str(rdf:),"_", ?index)) as ?rdf_member)
  
  }
''';
    rdfs:isDefinedBy archiXML:.

shp:ViewIdentifier
    a sh:NodeShape;
    sh:rule rule:ViewIdentifier;
    sh:target target:ViewIdentifier;
    skos:prefLabel 'archimate view identifier shape'@en;
    rdfs:isDefinedBy archiXML:.

target:ViewIdentifier
    a sh:SPARQLTarget;
    rdfs:comment 'Select the view in an archixml document that has no identifier.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # Select the archiXML view...
  $this rdf:type archiXML:View .
  
  #...but only if the view does not have an identifier.
  filter not exists { 
    $this archiXML:identifier [].
  }
  
  #...and if all archimate views are processed into archiXML views
  filter not exists { 
  ?someArchimateView rdf:type archimate:View.
    filter not exists {
    ?someArchiXMLView rdf:type archiXML:View ;
                      prov:wasDerivedFrom ?someArchimateView.
    }
  }
}
''';
    rdfs:isDefinedBy archiXML:.
    
rule:ViewIdentifier
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an identifier for a view in an archixml document.'@en;
    skos:prefLabel 'archixml view identifier rule'@en;
    sh:construct '''

prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>


construct {

  $this archiXML:identifier ?viewIdentifier.
  
} where {                 
  
  BIND(STR(function:getViewPosition($this)) as ?index)
  BIND(IRI(CONCAT(str(rdf:),"_", ?index)) as ?rdf_member)
  BIND(CONCAT("View_",?index) as ?viewIdentifier)
  
  }
''';
    rdfs:isDefinedBy archiXML:.

shp:NodeIdentifier
    a sh:NodeShape;
    sh:rule rule:NodeIdentifier;
    sh:target target:NodeIdentifier;
    skos:prefLabel 'archimate node identifier shape'@en;
    rdfs:isDefinedBy archiXML:.

target:NodeIdentifier
    a sh:SPARQLTarget;
    rdfs:comment 'Select the archixml nodes that have to get an identifier.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # Select the archixml node
  $this rdf:type archiXML:Node;
        prov:wasDerivedFrom ?node.
  ?view archimate:contains+ ?node;
        rdf:type archimate:View.
   ?archiXMLView prov:wasDerivedFrom ?view;
        rdf:type archiXML:View.        
   filter not exists { $this archiXML:identifier [].}
    }
''';
    rdfs:isDefinedBy archiXML:.
    
rule:NodeIdentifier
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an identifier for nodes and connections within a archixml view.'@en;
    skos:prefLabel 'archimate node identifier rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  $this archiXML:identifier ?nodeIdentifier.

} where {

  $this rdf:type archiXML:Node;
        prov:wasDerivedFrom ?node.
  ?view archimate:contains+ ?node;
        rdf:type archimate:View.
  ?archiXMLView prov:wasDerivedFrom ?view;
        archiXML:identifier ?viewIdentifier;
        rdf:type archiXML:View.       

  optional {
  $this dct:references ?archiXMLElement.
  ?archiXMLElement archiXML:identifier ?identifier.
  }
  
  # Establish the unique sequence number of a container or note across the model
  optional {
    {select $this ?xsiType ((count(?prevIndex)+1) as ?indexNode)
   where {
    $this xsi:type ?xsiType;
          prov:wasDerivedFrom ?node.
    bind(str(?node) as ?index)
    optional {
              ?prevThis xsi:type ?xsiType;
              prov:wasDerivedFrom ?prevNode.
              bind(str(?prevNode) as ?prevIndex)
              filter(?prevIndex < ?index)
             } 
     } group by $this ?xsiType
  }
  bind(concat(?xsiType, str(?indexNode)) as ?identifier)
  }
  
  BIND("Node_" as ?key)
  # Set unique identifier
  BIND(CONCAT(?key,STR(?viewIdentifier),"_",STR(?identifier)) as ?nodeIdentifier) 
  }
''';
    rdfs:isDefinedBy archiXML:.

shp:ConnectionIdentifier
    a sh:NodeShape;
    sh:rule rule:ConnectionIdentifier;
    sh:target target:ConnectionIdentifier;
    skos:prefLabel 'archimate connection identifier shape'@en;
    rdfs:isDefinedBy archiXML:.

target:ConnectionIdentifier
    a sh:SPARQLTarget;
    rdfs:comment 'Select the views of which the connections have to get an identifier.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # Select the archixml view
  $this rdf:type archiXML:View;
        archiXML:identifier [].
    }
''';
    rdfs:isDefinedBy archiXML:.
    
rule:ConnectionIdentifier
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an identifier for nodes and connections within a archixml view.'@en;
    skos:prefLabel 'archimate node identifier rule'@en;
    sh:construct '''

prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

construct {

  ?component archiXML:identifier ?componentIdentifier;
             archiXML:source ?sourceIdentifier;
             archiXML:target ?targetIdentifier.

} where {

  $this archiXML:identifier ?viewIdentifier;
        ?member ?component.
  ?component rdf:type archiXML:Connection;
              dct:references ?archiXMLRelationship.
  ?archiXMLRelationship archiXML:identifier ?identifier;
                        archiXML:source ?source;
                        archiXML:target ?target.
  
  ?archiXMLElementSource archiXML:identifier ?source;
                   rdf:type ?classSource.

  ?archiXMLElementTarget archiXML:identifier ?target;
                   rdf:type ?classTarget. 

  BIND(IF(?classSource = archiXML:Element, "Node_", if(?classSource = archiXML:Relationship, "Connection_", ?unboundDummy)) as ?sourceIdentifierString)
  BIND(IF(?classTarget = archiXML:Element, "Node_", if(?classTarget = archiXML:Relationship, "Connection_", ?unboundDummy)) as ?targetIdentifierString)
  BIND(CONCAT(?sourceIdentifierString, ?viewIdentifier, "_",?source) as ?sourceIdentifier)
  BIND(CONCAT(?targetIdentifierString, ?viewIdentifier, "_",?target) as ?targetIdentifier)                   
  BIND("Connection_" as ?key)
  
  # Set unique identifier
  BIND(CONCAT(?key,STR(?viewIdentifier),"_",STR(?identifier)) as ?componentIdentifier) 
  }
''';
    rdfs:isDefinedBy archiXML:.

function:getSubElementPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of an archimate element within the set of elements that share the same xsi:type." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:anyURI ;
        sh:description "The element for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

       SELECT ?result WHERE {
       {SELECT ?element (COUNT(?prevElement) + 1 AS ?member)
        WHERE {
          ?element rdf:type archiXML:Element;
                   xsi:type ?xsiType.
          OPTIONAL {
            ?prevElement rdf:type archiXML:Element;
                         xsi:type ?xsiType.
            FILTER(str(?prevElement) < str(?element))
          }
        }
        GROUP BY ?element
        ORDER BY ?element
        }
       FILTER (?element = $input)
       BIND(?member as ?result)
      }
        """ .

function:getElementPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of an archimate element within the set of all elements." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:anyURI ;
        sh:description "The element for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

       SELECT ?result WHERE {
       {SELECT ?element (COUNT(?prevElement) + 1 AS ?member)
        WHERE {
          ?element rdf:type archiXML:Element.
          OPTIONAL {
            ?prevElement rdf:type archiXML:Element.
            FILTER(str(?prevElement) < str(?element))
          }
        }
        GROUP BY ?element
        ORDER BY ?element
        }
       FILTER (?element = $input)
       BIND(?member as ?result)
      }
        """ .

function:getRelationshipPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of an archimate relationship within the set of all relationships." ;
    sh:parameter [
        sh:path function:relationship ;
        sh:datatype xsd:anyURI ;
        sh:description "The relationship for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

       SELECT ?result WHERE {
       {SELECT $relationship (COUNT(?prevRelationship) + 1 AS ?member)
        WHERE {
          $relationship rdf:type archimate:Relationship.
          OPTIONAL {
            ?prevRelationship rdf:type archimate:Relationship.
            FILTER(str(?prevRelationship) < str($relationship))
          }
        }
        GROUP BY $relationship
        ORDER BY $relationship
        }
       BIND(?member as ?result)
      }
        """ .

function:getModelPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of an archimate model within the set of all models." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:anyURI ;
        sh:description "The model for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

       SELECT ?result WHERE {
       {SELECT ?model (COUNT(?prevModel) + 1 AS ?member)
        WHERE {
          ?model rdf:type archiXML:Model.
          OPTIONAL {
            ?prevModel rdf:type archiXML:Model.
            FILTER(str(?prevModel) < str(?model))
          }
        }
        GROUP BY ?model
        ORDER BY ?model
        }
       FILTER (?model = $input)
       BIND(?member as ?result)
      }
        """ .

function:getViewPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of a view node within the set of all views." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:anyURI ;
        sh:description "The view for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

       SELECT ?result WHERE {
       {SELECT ?view (COUNT(?prevView) + 1 AS ?member)
        WHERE {
          ?view rdf:type archiXML:View.
          OPTIONAL {
            ?prevView rdf:type archiXML:View.
            FILTER(str(?prevView) < str(?view))
          }
        }
        GROUP BY ?view
        ORDER BY ?view
        }
       FILTER (?view = $input)
       BIND(?member as ?result)
      }
        """ .

function:escapeXML
    a sh:SPARQLFunction ;
    rdfs:comment "Escapes XML characters in the input string." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:string ;
        sh:description "The input string to escape XML characters from." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """
       SELECT ?result WHERE {
       BIND(replace(
                    replace(
                        replace(
                            replace(
                                replace(
                                    $input,
                                    '&', '&amp;'),
                                '<', '&lt;'),
                            '>', '&gt;'),
                        '\"', '&quot;'),
                    "\'", '&apos;')
                AS ?result).
        }
        """ .

}       