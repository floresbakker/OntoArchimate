prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix dcm: <http://purl.org/dc/dcmitype/>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfa: <http://www.w3.org/ns/rdfa#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix respec:   <https://respec.org/model/def/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix status: <http://purl.org/adms/status/>
prefix vann: <http://purl.org/vocab/vann/>
prefix void: <http://rdfs.org/ns/void#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/> 
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

prefix archiXML:  <https://data.rijksfinancien.nl/archixml/model/def/>
prefix graph:     <https://data.rijksfinancien.nl/archixml/graph/>
prefix rule:      <https://data.rijksfinancien.nl/archixml/model/rule/>
prefix section:   <https://data.rijksfinancien.nl/archixml/id/section/>
prefix shp:       <https://data.rijksfinancien.nl/archixml/model/shp/>
prefix standard:  <https://data.rijksfinancien.nl/archixml/id/standard/>
prefix target:    <https://data.rijksfinancien.nl/archixml/model/target/>

archiXML:
    a
      owl:Ontology,
      respec:Ontology,
      void:Dataset;
    dct:created '2024-02-14'^^xsd:date;
    dct:creator
      'Flores Bakker';
    respec:introduction '''
Introduction of archiXML serialisation vocabulary.
'''@en;
   respec:objective '''Objective of archiXML serialisation vocabulary'''@en;
    respec:audience '''Audience of archiXML serialisation vocabulary'''@en;
    dct:description '''Description of archiXML serialisation vocabulary'''@en;
    dct:abstract '''Abstract of archiXML serialisation vocabulary'''@en; 
    skos:example """
@prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/> .
@prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/> .
@prefix model: <https://data.rijksfinancien.nl/archixml/id/> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix xml1: <http://www.w3.org/XML/model/def/> .
@prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/> .

# Model

model:BasicModel-Document a archiXML:Document ;
    rdf:_1 model:BasicModel-Model .

model:BasicModel-Model a archiXML:Model ;
    rdf:_1 model:BasicModel-ModelName ;
    rdf:_2 model:BasicModel-Documentation ;
    rdf:_3 model:BasicModel-Elements ;
    rdf:_4 model:BasicModel-Relationships ;
    xmlns:xsi "http://www.w3.org/2001/XMLSchema-instance" ;
    xsi:schemaLocation "http://www.opengroup.org/xsd/archimate/3.0/ http://www.opengroup.org/xsd/archimate/3.1/archimate3_Model.xsd" ;
    xml1:xmlns "http://www.opengroup.org/xsd/archimate/3.0/" ;
    prov:wasDerivedFrom model:BasicModel ;
    archiXML:identifier "Model-1" .

model:BasicModel-ModelName a archiXML:Name ;
    rdf:_1 model:BasicModel-ModelNameText ;
    xml1:lang "en" .

model:BasicModel-ModelNameText a archiXML:Text ;
    xml1:fragment "Basic Model" .
    
model:BasicModel-Documentation a archiXML:Documentation ;
    rdf:_1 model:BasicModel-DocumentationText ;
    xml1:lang "en" .

model:BasicModel-DocumentationText a archiXML:Text ;
    xml1:fragment "Example of a basic model with two elements and two relationships" .

# Elements

model:BasicModel-Elements a archiXML:Elements ;
    rdf:_1 model:aBusinessActor-Element ;
    rdf:_2 model:aBusinessObject-Element ;
    rdf:_3 model:aBusinessRole-Element .

model:aBusinessActor-Element a archiXML:Element ;
    rdf:_1 model:aBusinessActor-ElementName ;
    xsi:type "BusinessActor" ;
    prov:wasDerivedFrom model:aBusinessActor ;
    archiXML:identifier "BusinessActor1" .

model:aBusinessActor-ElementName a archiXML:Name ;
    rdf:_1 model:aBusinessActor-ElementNameText ;
    xml1:lang "en" .

model:aBusinessActor-ElementNameText a archiXML:Text ;
    xml1:fragment "A business actor" .

model:aBusinessRole-Element a archiXML:Element ;
    rdf:_1 model:aBusinessRole-ElementName ;
    xsi:type "BusinessRole" ;
    prov:wasDerivedFrom model:aBusinessRole ;
    archiXML:identifier "BusinessRole1" .

model:aBusinessRole-ElementName a archiXML:Name ;
    rdf:_1 model:aBusinessRole-ElementNameText ;
    xml1:lang "en" .

model:aBusinessRole-ElementNameText a archiXML:Text ;
    xml1:fragment "A business role" .

# Relationships

model:BasicModel-Relationships a archiXML:Relationships ;
    rdf:_1 model:aRelationship1-Relationship ;
    rdf:_2 model:aRelationship2-Relationship .

model:aRelationship1-Relationship a archiXML:Relationship ;
    rdf:_1 model:aRelationship1-RelationshipName ;
    xsi:type "Assignment" ;
    prov:wasDerivedFrom model:aRelationship1 ;
    archiXML:identifier "Relation_1" ;
    archiXML:source "BusinessActor1" ;
    archiXML:target "BusinessRole1" .

model:aRelationship1-RelationshipName a archiXML:Name ;
    rdf:_1 model:aRelationship1-RelationshipNameText ;
    xml1:lang "en" .

model:aRelationship1-RelationshipNameText a archiXML:Text ;
    xml1:fragment "Assignment Relationship"@en .




""";
    dct:language 'iso639-1:en';
    dct:license 'https://creativecommons.org/licenses/by/4.0/'^^xsd:anyURI;
    dct:publisher <https://www.example.com>;
    dct:status status:UnderDevelopment;
    dct:title 'archimate Core Vocabulary'@en;
    dct:source <https://www.example.com/archixml-vocabulary>;
    foaf:homepage 'https://www.example.com/'^^xsd:anyURI;
    owl:versionInfo '1.0';
    vann:preferredNamespacePrefix 'archixml';
    vann:preferredNamespaceUri 'https://data.rijksfinancien.nl/archixml/model/def/';
    void:uriRegexPattern '^https://data.rijksfinancien.nl/archixml/model/def/';
    void:uriSpace 'https://data.rijksfinancien.nl/xml/archixml/def/'^^xsd:anyURI.


### Logic


shp:Document
    a sh:NodeShape;
    sh:rule rule:Document;
    sh:targetClass archimate:Model;
    skos:prefLabel 'document shape'@en;
    rdfs:isDefinedBy archiXML:.

rule:Document
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate XML document representation in RDF based on an archimate model.'@en;
    skos:prefLabel 'archimate document rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix prov: <http://www.w3.org/ns/prov#> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  ?document rdf:type archiXML:Document;
         rdf:_1 ?model.
  ?model rdf:type archiXML:Model;
         xmlns:xsi "http://www.w3.org/2001/XMLSchema-instance" ;
         xsi:schemaLocation "http://www.opengroup.org/xsd/archimate/3.0/ http://www.opengroup.org/xsd/archimate/3.1/archimate3_Model.xsd" ;
         xml:xmlns "http://www.opengroup.org/xsd/archimate/3.0/" ;
         archiXML:identifier ?modelIdentifier ;
         archiXML:version ?modelVersion ;
         prov:wasDerivedFrom $this;
         rdf:_1 ?modelNameNode;
         rdf:_2 ?modelDocumentation;
         rdf:_3 ?elementsNode;
         rdf:_4 ?relationshipsNode;
         rdf:_5 ?viewsNode.
  ?modelNameNode rdf:type archiXML:Name;
         rdf:_1 ?modelNameTextNode;
         xml:lang "en".
  ?modelNameTextNode rdf:type archiXML:Text;
         xml:fragment ?archimateNameModel.
  ?modelDocumentation rdf:type archiXML:Documentation;
         rdf:_1 ?documentationTextNode;
         xml:lang "en".
  ?documentationTextNode rdf:type archiXML:Text;
         xml:fragment ?archimateDocumentation.
  ?elementsNode rdf:type archiXML:Elements.
  ?relationshipsNode rdf:type archiXML:Relationships.
  ?viewsNode rdf:type archiXML:Views;
             rdf:_1 ?diagramsNode.
  ?diagramsNode rdf:type archiXML:Diagrams.

} where {

    # Get the archimate model
    $this  skos:prefLabel ?archimateNameModel;
           skos:definition ?archimateDocumentation.
           
    # Create identifiers
    BIND(IRI(CONCAT(STR($this),"-Document")) as ?document)
    BIND(IRI(CONCAT(STR($this),"-Model")) as ?model)
    BIND(IRI(CONCAT(STR($this),"-ModelName")) as ?modelNameNode)
    BIND(IRI(CONCAT(STR($this),"-ModelNameText")) as ?modelNameTextNode)
    BIND(IRI(CONCAT(STR($this),"-Documentation")) as ?modelDocumentation)
    BIND(IRI(CONCAT(STR($this),"-DocumentationText")) as ?documentationTextNode)
    BIND(IRI(CONCAT(STR($this),"-Elements")) as ?elementsNode)
    BIND(IRI(CONCAT(STR($this),"-Relationships")) as ?relationshipsNode)
    BIND(IRI(CONCAT(STR($this),"-Views")) as ?viewsNode)
    BIND(IRI(CONCAT(STR($viewsNode),"-Diagrams")) as ?diagramsNode)
  }

''';
    rdfs:isDefinedBy archiXML:.


  shp:Element
    a sh:NodeShape;
    sh:rule rule:Element;
    sh:target target:Element;
    skos:prefLabel 'element shape'@en;
    rdfs:isDefinedBy archiXML:.

  target:Element
    a sh:SPARQLTarget;
    rdfs:comment 'Select all elements in the model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    
select $this {

  # Select all elements... 
  $this rdf:type/rdfs:subClassOf* archimate:Element.
    
    }
''';
    rdfs:isDefinedBy archiXML:.

  rule:Element
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate fragment based on an archimate element.'@en;
    skos:prefLabel 'archimate element rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix prov: <http://www.w3.org/ns/prov#> 
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  # create the archimate-fragment for the archimate-element to be serialized.
  ?element rdf:type archiXML:Element;
           prov:wasDerivedFrom $this;
           archiXML:identifier ?identifier;
           xsi:type ?xsiType;
           rdf:_1 ?elementNameNode.
  ?elementNameNode rdf:type archiXML:Name;
           rdf:_1 ?elementNameTextNode;
           xml:lang "en".
   ?elementNameTextNode rdf:type archiXML:Text;
           xml:fragment ?archimateName.

} where {

  # Get the archimate tag of the archimate-element to be serialized.
  $this rdf:type ?archimateElement;
        skos:prefLabel ?archimateName.
  ?archimateElement rdfs:subClassOf* archimate:Element;
        dct:identifier ?xsiType.
  BIND(IRI(CONCAT(STR($this),"-Element")) as ?element)
  BIND(IRI(CONCAT(STR($this),"-ElementName")) as ?elementNameNode)
  BIND(IRI(CONCAT(STR($this),"-ElementNameText")) as ?elementNameTextNode)
  }

''';
    rdfs:isDefinedBy archiXML:.

shp:Relationship
    a sh:NodeShape;
    sh:rule rule:Relationship;
    sh:target target:Relationship;
    skos:prefLabel 'relationship shape'@en;
    rdfs:isDefinedBy archiXML:.


target:Relationship
    a sh:SPARQLTarget;
    rdfs:comment 'Select all relationships in the model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    
select $this {

  # Select all relationships... 
  $this rdf:type archimate:Relationship.
    
  # ...that are not processed yet
  filter not exists { 
  ?archiXML_relationship rdf:type archiXML:Relationship ;
        prov:wasDerivedFrom $this.
    }
  
  # ...but whose from and to elements have been processed yet.
  
  $this archimate:from ?elementFrom.
  ?archiXMLElementSource prov:wasDerivedFrom ?elementFrom;
        rdf:type archiXML:Element.
  $this archimate:from ?elementTo.
  ?archiXMLElementTarget prov:wasDerivedFrom ?elementTo;
        rdf:type archiXML:Element.  
  
    }
''';
    rdfs:isDefinedBy archiXML:.
    
    
rule:Relationship
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate fragment based on an archimate relationship.'@en;
    skos:prefLabel 'archimate relationship rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  # create the archimate-fragment for the archimate-relationship
  ?relationship rdf:type archiXML:Relationship;
           xsi:type ?xsiType;
           archiXML:source ?source;
           archiXML:target ?target;
           prov:wasDerivedFrom $this;           
           rdf:_1 ?relationshipNameNode.
   ?relationshipNameNode rdf:type archiXML:Name;
           rdf:_1 ?relationshipNameTextNode;
           xml:lang "en".
   ?relationshipNameTextNode rdf:type archiXML:Text;
           xml:fragment ?archimateName.
  
} where {

  # Get the archimate metadata of the archimate-relationship
 
  $this archimate:from ?fromElement.
  ?sourceElement prov:wasDerivedFrom ?fromElement;
                 archiXML:identifier ?source.
  
  $this archimate:to ?toElement.
  ?targetElement prov:wasDerivedFrom ?toElement ;
                 archiXML:identifier ?target.
  
  $this archimate:relationship ?relationshipArchimate.
  ?relationshipArchimate dct:identifier ?xsiType;
                skos:prefLabel ?archimateName.

  BIND(IRI(CONCAT(STR($this),"-Relationship")) as ?relationship)
  BIND(IRI(CONCAT(STR($this),"-RelationshipName")) as ?relationshipNameNode)
  BIND(IRI(CONCAT(STR($this),"-RelationshipNameText")) as ?relationshipNameTextNode)
  }

''';
    rdfs:isDefinedBy archiXML:.


shp:ElementConnector
    a sh:NodeShape;
    sh:rule rule:ElementConnector;
    sh:targetClass archiXML:Elements;
    skos:prefLabel 'archimate elements shape'@en;
    rdfs:isDefinedBy archiXML:.

rule:ElementConnector
    a sh:SPARQLRule;
    rdfs:comment 'A rule that connects all archimate elements with the elements node in an archimate document.'@en;
    skos:prefLabel 'archimate element connector rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  # create the archimate fragment for the archimate element
  
  ?model rdf:_3 $this.
  $this ?rdf_member ?element.
  

} where {
  ?element rdf:type archiXML:Element.
  BIND(IRI(CONCAT(str(rdf:),"_", str(function:getElementPosition(?element)))) as ?rdf_member)  
  BIND(IRI(CONCAT(REPLACE(STR($this),"-Elements", "-Model"))) as ?model)
  }
''';
    rdfs:isDefinedBy archiXML:.

shp:RelationshipConnector
    a sh:NodeShape;
    sh:rule rule:RelationshipConnector;
    sh:target target:Relationships;
    skos:prefLabel 'archimate relationships shape'@en;
    rdfs:isDefinedBy archiXML:.

target:Relationships
    a sh:SPARQLTarget;
    rdfs:comment 'Select all relationships in the model that have to be placed under the parent Relationships.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    
select ?this
where {
  # Select individuals of archiXML:Relationships 
  ?connector rdf:type archiXML:Relationships.
  OPTIONAL
  {select ?unprocessedRelationship where {
 
    ?unprocessedRelationship rdf:type archimate:Relationship .
    filter not exists {
      [] prov:wasDerivedFrom ?unprocessedRelationship .
     }
    }
   }
  bind(if(!bound(?unprocessedRelationship), ?connector, ?unboundDummy) as ?this)
}
''';
    rdfs:isDefinedBy archiXML:.
    
rule:RelationshipConnector
    a sh:SPARQLRule;
    rdfs:comment 'A rule that connects all individual archimate relationships with the relationships node in an archimate document.'@en;
    skos:prefLabel 'archimate relationship connector rule'@en;
    sh:construct '''

prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

construct {

  # create the archimate-fragment for the archimate-relationship
  
  $this ?rdf_member ?relationship.
  
} where {
  ?relationship rdf:type archiXML:Relationship;
                prov:wasDerivedFrom ?archimateRelation.    
  bind(iri(concat(str(rdf:),"_", str(function:getRelationshipPosition(?archimateRelation)))) as ?rdf_member)
  }
''';
    rdfs:isDefinedBy archiXML:.

shp:RelationshipIdentifier
    a sh:NodeShape;
    sh:rule rule:RelationshipIdentifier;
    sh:target target:RelationshipIdentifier;
    skos:prefLabel 'Relationship Identifier shape'@en;
    rdfs:isDefinedBy archiXML:.

target:RelationshipIdentifier
 a sh:SPARQLTarget;
    rdfs:comment 'Select all relationships in the model that have to be placed under the parent Relationships.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    
select ?this
where {
  
  $this rdf:type archiXML:Relationship.
  filter not exists {$this archiXML:identifier []}
  
}
''';
    rdfs:isDefinedBy archiXML:.

rule:RelationshipIdentifier
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate identifier for an archimate relationship'@en;
    skos:prefLabel 'archimate relationship identifier rule'@en;
    sh:construct '''

prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>

construct {

  # create the archimate-fragment for the archimate-relationship
  
  $this archiXML:identifier ?identifier .
  

} where {
  $this prov:wasDerivedFrom ?archimateRelation.
  BIND(CONCAT("Relation_",str(function:getRelationshipPosition(?archimateRelation))) as ?identifier)
  }
''';
    rdfs:isDefinedBy archiXML:.

shp:ElementIdentifier
    a sh:NodeShape;
    sh:rule rule:ElementIdentifier;
    sh:targetClass archiXML:Element;
    skos:prefLabel 'Element Identifier shape'@en;
    rdfs:isDefinedBy archiXML:.

rule:ElementIdentifier
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate identifier for an archimate element'@en;
    skos:prefLabel 'archimate element identifier rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  # create the archimate-fragment for the archimate-relationship
  
  $this archiXML:identifier ?identifier .
  

} where {
  $this xsi:type ?xsiType.
  BIND(CONCAT(?xsiType, str(function:getSubElementPosition($this))) as ?identifier)  
  }
''';
    rdfs:isDefinedBy archiXML:.

shp:ModelIdentifier
    a sh:NodeShape;
    sh:rule rule:ModelIdentifier;
    sh:targetClass archiXML:Model;
    skos:prefLabel 'Model Identifier shape'@en;
    rdfs:isDefinedBy archiXML:.

rule:ModelIdentifier
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate identifier for an archimate model'@en;
    skos:prefLabel 'archimate model identifier rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  # create the archimate-fragment for the archimate-relationship
  
  $this archiXML:identifier ?identifier .
  

} where {
  BIND(CONCAT("Model-", str(function:getModelPosition($this))) as ?identifier)  
  }
''';
    rdfs:isDefinedBy archiXML:.

shp:View
    a sh:NodeShape;
    sh:rule rule:View;
    sh:target target:View;
    skos:prefLabel 'view shape'@en;
    rdfs:isDefinedBy archiXML:.


target:View
    a sh:SPARQLTarget;
    rdfs:comment 'Select all views in the model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    
select $this {

  # Select all views... 
  $this rdf:type archimate:View.
    
  # ...that are not processed yet
  filter not exists { 
  ?archiXML_view rdf:type archiXML:View ;
        prov:wasDerivedFrom $this.
    }
  
  # ...but whose elements already have been processed.
  
  minus
  {$this ?member ?concept.
  filter(strstarts(str(?member),concat(str(rdf:),'_')))
  ?concept rdf:type/rdfs:subClassOf* archimate:Concept.
  filter not exists
  {[] prov:wasDerivedFrom ?concept}
   }
  }
''';
    rdfs:isDefinedBy archiXML:.
    
    
rule:View
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate fragment based on an archimate view.'@en;
    skos:prefLabel 'archimate view rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  # create the archimate-fragment for the archimate-view
   ?view rdf:type archiXML:View;
           archiXML:identifier ?viewIdentifier;
           xsi:type "Diagram";
           rdf:_1 ?viewNameNode;
           ?memberNode ?elementNode;
           ?memberConnection ?connectionNode;
           prov:wasDerivedFrom $this.                      
   ?viewNameNode rdf:type archiXML:Name;
           rdf:_1 ?viewNameTextNode;
           xml:lang "en".
   ?viewNameTextNode rdf:type archiXML:Text;
           xml:fragment ?viewName.
   ?elementNode rdf:type archiXML:Node;
           archiXML:identifier ?elementNodeIdentifier;
           xsi:type "Element";
           archiXML:elementRef ?elementIdentifier;
           archiXML:x ?x ;
           archiXML:y ?y ;
           archiXML:w ?w ;
           archiXML:h ?h .
   ?connectionNode rdf:type archiXML:Connection;
           archiXML:identifier ?connectionIdentifier;
           xsi:type "Relationship";
           archiXML:relationshipRef ?relationIdentifier;
           archiXML:source ?sourceIdentifier;
           archiXML:target ?targetIdentifier.
   
   
} where {

  # Get the archimate metadata of the archimate view
  $this skos:prefLabel ?viewName.
  
  {$this ?memberElement ?element.
  ?element rdf:type/rdfs:subClassOf* archimate:Element.
  
  ?archiXMLElement prov:wasDerivedFrom ?element;
                   archiXML:identifier ?elementIdentifier.

  # Establish position of the element
  BIND(xsd:integer(STRAFTER(STR(?memberElement),CONCAT(STR(rdf:),'_')))+1 as ?index)
  BIND(IRI(CONCAT(STR(rdf:), "_", STR(?index))) as ?memberNode)
  
  # Define constants for standard element width and height
  BIND(120 AS ?elementWidth)
  BIND(55 AS ?elementHeight)
  
  # Define spacing between elements
  BIND(150 AS ?xSpacing) # Space between elements on the x-axis
  BIND(100 AS ?ySpacing) # Space between elements on the y-axis

  # Calculate x and y positions for each element
  BIND(xsd:integer(?index * ?xSpacing) AS ?x)
  BIND(xsd:integer(FLOOR(?index / 10) * ?ySpacing) AS ?y) # Adjust y to create rows every 10 elements

  # Set standard width and height
  BIND(?elementWidth AS ?w)
  BIND(?elementHeight AS ?h)
  
  # Set unique identifier
  BIND(CONCAT("node_",STR(?elementIdentifier)) as ?elementNodeIdentifier)
  
  }
  
  UNION
  {$this ?memberRelation ?relationship.
  ?relationship rdf:type/rdfs:subClassOf* archimate:Relationship.
  
  ?archiXMLRelationship prov:wasDerivedFrom ?relationship;
                   archiXML:identifier ?relationIdentifier;
                   archiXML:source ?source;
                   archiXML:target ?target.
  
  ?archiXMLElementSource archiXML:identifier ?source;
                   rdf:type ?classSource.

  ?archiXMLElementTarget archiXML:identifier ?target;
                   rdf:type ?classTarget. 
                   
  # Set unique identifiers
  BIND(CONCAT("connection_",STR(?relationIdentifier)) as ?connectionIdentifier)    
  BIND(IF(?classSource = archiXML:Element, "node_", if(?classSource = archiXML:Relationship, "connection_", ?unboundDummy)) as ?sourceIdentifierString)
  BIND(IF(?classTarget = archiXML:Element, "node_", if(?classTarget = archiXML:Relationship, "connection_", ?unboundDummy)) as ?targetIdentifierString)
  BIND(CONCAT(?sourceIdentifierString, ?source) as ?sourceIdentifier)
  BIND(CONCAT(?targetIdentifierString, ?target) as ?targetIdentifier)
  
  # Establish position of the connection
  BIND(xsd:integer(STRAFTER(STR(?memberRelation),CONCAT(STR(rdf:),'_')))+1 as ?index)
  BIND(IRI(CONCAT(STR(rdf:), "_", STR(?index))) as ?memberConnection)  
                 
  }
  
  # Create IRI's
  BIND(IRI(CONCAT(STR($this),"-View"))                as ?view)
  BIND(IRI(CONCAT(STR($this),"-ViewName"))            as ?viewNameNode)
  BIND(IRI(CONCAT(STR($this),"-ViewNameText"))        as ?viewNameTextNode)
  BIND(IRI(CONCAT(STR(?view),?elementNodeIdentifier)) as ?elementNode)
  BIND(IRI(CONCAT(STR(?view),?connectionIdentifier))  as ?connectionNode)
  }
''';
    rdfs:isDefinedBy archiXML:.

shp:ViewConnector
    a sh:NodeShape;
    sh:rule rule:ViewConnector;
    sh:targetClass archiXML:Views;
    skos:prefLabel 'archimate view connector shape'@en;
    rdfs:isDefinedBy archiXML:.

rule:ViewConnector
    a sh:SPARQLRule;
    rdfs:comment 'A rule that connects all archimate views with the views and diagrams nodes in an archimate document.'@en;
    skos:prefLabel 'archimate view connector rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  # create the archimate fragment for the archimate view
  
  ?diagramNode ?rdf_member ?view.
  ?view archiXML:identifier ?viewIdentifier.
  

} where {

  ?model rdf:_5 $this.
  $this  rdf:_1 ?diagramNode.
  
  OPTIONAL{
  ?view rdf:type archiXML:View.}
  BIND(STR(function:getViewPosition(?view)) as ?index)
  BIND(IRI(CONCAT(str(rdf:),"_", ?index)) as ?rdf_member)
  BIND(CONCAT("View_",?index) as ?viewIdentifier)
  
  }
''';
    rdfs:isDefinedBy archiXML:.       

function:getSubElementPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of an archimate element within the set of elements that share the same xsi:type." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:anyURI ;
        sh:description "The element for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

       SELECT ?result WHERE {
       {SELECT ?element (COUNT(?prevElement) + 1 AS ?member)
        WHERE {
          ?element rdf:type archiXML:Element;
                   xsi:type ?xsiType.
          OPTIONAL {
            ?prevElement rdf:type archiXML:Element;
                         xsi:type ?xsiType.
            FILTER(str(?prevElement) < str(?element))
          }
        }
        GROUP BY ?element
        ORDER BY ?element
        }
       FILTER (?element = $input)
       BIND(?member as ?result)
      }
        """ .

function:getElementPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of an archimate element within the set of all elements." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:anyURI ;
        sh:description "The element for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

       SELECT ?result WHERE {
       {SELECT ?element (COUNT(?prevElement) + 1 AS ?member)
        WHERE {
          ?element rdf:type archiXML:Element.
          OPTIONAL {
            ?prevElement rdf:type archiXML:Element.
            FILTER(str(?prevElement) < str(?element))
          }
        }
        GROUP BY ?element
        ORDER BY ?element
        }
       FILTER (?element = $input)
       BIND(?member as ?result)
      }
        """ .

function:getRelationshipPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of an archimate relationship within the set of all relationships." ;
    sh:parameter [
        sh:path function:relationship ;
        sh:datatype xsd:anyURI ;
        sh:description "The relationship for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

       SELECT ?result WHERE {
       {SELECT $relationship (COUNT(?prevRelationship) + 1 AS ?member)
        WHERE {
          $relationship rdf:type archimate:Relationship.
          OPTIONAL {
            ?prevRelationship rdf:type archimate:Relationship.
            FILTER(str(?prevRelationship) < str($relationship))
          }
        }
        GROUP BY $relationship
        ORDER BY $relationship
        }
       BIND(?member as ?result)
      }
        """ .

function:getModelPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of an archimate model within the set of all models." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:anyURI ;
        sh:description "The model for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

       SELECT ?result WHERE {
       {SELECT ?model (COUNT(?prevModel) + 1 AS ?member)
        WHERE {
          ?model rdf:type archiXML:Model.
          OPTIONAL {
            ?prevModel rdf:type archiXML:Model.
            FILTER(str(?prevModel) < str(?model))
          }
        }
        GROUP BY ?model
        ORDER BY ?model
        }
       FILTER (?model = $input)
       BIND(?member as ?result)
      }
        """ .

function:getViewPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of a view node within the set of all views." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:anyURI ;
        sh:description "The view for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

       SELECT ?result WHERE {
       {SELECT ?view (COUNT(?prevView) + 1 AS ?member)
        WHERE {
          ?view rdf:type archiXML:View.
          OPTIONAL {
            ?prevView rdf:type archiXML:View.
            FILTER(str(?prevView) < str(?view))
          }
        }
        GROUP BY ?view
        ORDER BY ?view
        }
       FILTER (?view = $input)
       BIND(?member as ?result)
      }
        """ .    