prefix dcm: <http://purl.org/dc/dcmitype/>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfa: <http://www.w3.org/ns/rdfa#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix status: <http://purl.org/adms/status/>
prefix vann: <http://purl.org/vocab/vann/>
prefix void: <http://rdfs.org/ns/void#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xml: <http://www.w3.org/XML/1998/namespace#>
prefix xmlns: <http://www.w3.org/2000/xmlns/> 
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance#>

prefix documentType: <https://data.rijksfinancien.nl/dom/model/id/documentType/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix graph: <https://data.rijksfinancien.nl/archixml/graph/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix respec: <https://respec.org/model/>
prefix rule: <https://data.rijksfinancien.nl/archixml/model/rule/>
prefix section: <https://data.rijksfinancien.nl/archixml/id/section/>
prefix shp: <https://data.rijksfinancien.nl/archixml/model/shp/>
prefix standard: <https://data.rijksfinancien.nl/archixml/id/standard/>
prefix target: <https://data.rijksfinancien.nl/archixml/model/target/>

archiXML:
    a
      owl:Ontology,
      respec:Ontology,
      void:Dataset;
    dct:conformsTo 'https://www.w3.org/TR/Archimate11/'^^xsd:anyURI;
    dct:created '2024-02-14'^^xsd:date;
    dct:creator
      'Flores Bakker';
    respec:introduction '''
Introduction of archimate vocabulary.
'''@en;
   respec:objective '''Objective of archimate vocabulary'''@en;
    respec:audience '''Audience of archimate vocabulary'''@en;
    dct:description '''Description of archimate vocabulary'''@en;
    dct:abstract '''Abstract of archimate vocabulary'''@en; 
    skos:example """

An example of an Archimate model:


This can be represented in RDF using the ArchiXML vocabulary as follows:


""";
    dct:language 'iso639-1:en';
    dct:license 'https://creativecommons.org/licenses/by/4.0/'^^xsd:anyURI;
    dct:publisher <https://www.example.com>;
    dct:status status:UnderDevelopment;
    dct:title 'ArchiXML Core Vocabulary'@en;
    dct:source <https://www.opengroup.org/xsd/archimate/>;
    foaf:homepage 'https://www.opengroup.org/xsd/archimate/';
    owl:versionInfo '1.0';
    vann:preferredNamespacePrefix 'archiXML';
    vann:preferredNamespaceUri 'https://data.rijksfinancien.nl/archixml/model/def/';
    void:uriRegexPattern '^https://data.rijksfinancien.nl/archixml/model/def/';
    void:uriSpace 'https://data.rijksfinancien.nl/xml/archixml/def/'^^xsd:anyURI.

  standard:archimate
    a dct:Standard;
    dct:created '2023-10-29'^^xsd:date;
    dct:source 'http://www.opengroup.org/xsd/archimate/3.0/'^^xsd:anyURI;
    skos:prefLabel 'The ArchiMate® Enterprise Architecture Modeling Language'@en.


### Serialization Logic

shp:SerializableElement
    a sh:NodeShape;
    sh:rule rule:SerializeArchimateFragment;
    sh:target target:SerializableElement;
    skos:prefLabel 'serializable element shape'@en;
    rdfs:isDefinedBy archiXML:.

  target:SerializableElement
    a sh:SPARQLTarget;
    sh:select '''
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

# Select the Archimate element for which there does not yet exist an Archimate
# fragment, with the additional requirement that each and any
# underlying child element contains an Archimate fragment.
select $this {
  # Any XML element (`dom:Element`)
  $this a/rdfs:subClassOf* dom:Element.
  
  # The Archimate element must not have an XML fragment yet.
  filter not exists {
    $this archiXML:fragment [].
  }
  # The Archimate element may not contain one or more child elements that lack an Archimate fragment.
  minus {
    $this ?member ?childElement.
    ?childElement a/rdfs:subClassOf* dom:Element.
    filter not exists {
      ?childElement archiXML:fragment [].
    }
  }
}''';
    rdfs:isDefinedBy archiXML:.

  rule:SerializeArchimateFragment
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an Archimate fragment for an Archimate element.'@en;
    skos:prefLabel 'Archimate element fragment serialisation rule'@en;
    sh:construct '''

prefix function: <https://data.rijksfinancien.nl/archixml/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix xml: <http://www.w3.org/XML/1998/namespace#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>


construct {

  # create the Archimate-fragment for the Archimate-element to be serialized.
  $this archiXML:fragment ?fragment.
} where {

  # Get the Archimate tag of the Archimate-element to be serialized.
  $this a/xml:tag ?tag.

  # Get the (possibly empty) sequence of Archimate attributes, if there are any.
  {
    select (group_concat(distinct ?attribute;separator=' ') as ?attributes) {
      $this ?attribute0 ?value.
      ?attribute0 rdfs:subPropertyOf xml:attribute.
      bind(function:escapeXML(?value) as ?cleanValue)
      bind(function:getXMLKey(?attribute0) as ?key)
      bind(concat(?key,'="',str(?cleanValue),'"') as ?attribute)
    }
  }

  # Get the (possibly empty) sequence of child element fragments, if there are any.
  {
    select (group_concat(str(?fragment);separator='') as ?fragments) {
      {
        select ?member ?fragment {
          $this ?member ?element.
          ?element archiXML:fragment ?fragment.
          filter(strstarts(str(?member),concat(str(rdf:),'_')))
        }
        order by xsd:integer(strafter(str(?member),concat(str(rdf:),'_')))
      }
    }
  }

  # Create the Archimate fragment of this Archimate element by combining everything retrieved above.
  bind(strdt(
    concat(
      # open tag and include any attributes if there are any
      '<',?tag,if(?attributes='','',concat(' ',?attributes)),'>',
      # retrieved svg content of children svg elements
      ?fragments,
      # close tag and cast as Archimate snippet
      '</',?tag,'>'),xsd:string) as ?fragment)
}
''';
    rdfs:isDefinedBy archiXML:.


# Document

  shp:Document
    a sh:NodeShape;
    sh:description 'A Archimate document contains a required documenttype Archimate and a root Archimate element.'@en;
    sh:name 'Archimate Document'@en;
    sh:property
      shp:Document_documentType,
      shp:Document_root;
    sh:rule rule:Document;
    sh:target target:Document;
    rdfs:isDefinedBy archiXML:.

  target:Document a sh:SPARQLTarget;
  sh:select '''

prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this where {
  $this rdf:type archiXML:Document.
  filter not exists {
    $this archiXML:fragment [].
  }
}''';
    rdfs:isDefinedBy archiXML:.

  rule:Document
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates the upper Archimate fragment for an Archimate document and connects it with the previously generated tree of serialized Archimate elements and their Archimate fragments.'@en;
    rdfs:label 'Archimate document generation rule'@en;
    sh:construct '''
prefix documentType: <https://data.rijksfinancien.nl/dom/model/id/documentType/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix archiXML <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rule: <https://data.rijksfinancien.nl/archixml/model/rule/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

construct {
  $this
    dom:documentType documentType:archimate;
    archiXML:fragment ?fragmentDocument;
    prov:wasGeneratedBy ?activity.
  ?activity
    a prov:Activity;
    prov:atTime ?activityDateTime;
    prov:used
      archiXML: , # Archimate Ontology
      rule:Document.
} where {
  $this ?member ?root.
  ?root rdf:type archiXML:Model;
        archiXML:fragment ?fragmentRoot.
  bind(strdt(concat("""<?xml version="1.0" encoding="UTF-8"?>""",str(?fragmentRoot)),xsd:string) as ?fragmentDocument)
  bind(iri(concat(str($this),'-svg-document-generation')) as ?activity)
  bind(now() as ?activityDateTime)
}''';
    rdfs:isDefinedBy archiXML:.

  shp:Document_documentType
    a sh:PropertyShape;
    rdfs:comment 'An Archimate document contains excactly one document type with value ‘Archimate’.'@en;
    rdfs:label 'has document type Archimate'@en;
    sh:hasValue documentType:svg;
    sh:minCount 1;
    sh:maxCount 1;
    sh:path dom:documentType;
    rdfs:isDefinedBy archiXML:.

  shp:Document_root
    a sh:PropertyShape;
    rdfs:comment 'The <model> tag is the root of the Archimate document and a container for all other Archimate elements (except for the <!DOCTYPE> tag). A Archimate document contains no less and no more than one model tag.'@en;
    rdfs:label 'has root element svg'@en;
    sh:class archiXML:model;
    sh:minCount 1;
    sh:maxCount 1;
    sh:path rdfs:member;
    rdfs:isDefinedBy archiXML:.

function:getXMLKey
    a sh:SPARQLFunction ;
    rdfs:comment "Returns the key of an XML attribute, either with or without prefix." ;
    sh:parameter [
        sh:path function:attribute ;
        sh:datatype xsd:anyURI ;
        sh:description "An xml attribute as defined in an ontology." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix vann: <http://purl.org/vocab/vann/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xml: <http://www.w3.org/XML/1998/namespace#>

SELECT ?result WHERE {
         $attribute xml:key ?key;
         rdfs:isDefinedBy ?ontology.   
         ?ontology vann:preferredNamespacePrefix ?prefix.
         BIND(IF(?prefix = "archiXML" || $attribute = xml:xmlns,?key, CONCAT(?prefix,":",?key)) as ?result).
  }

       """ .

function:escapeXML
    a sh:SPARQLFunction ;
    rdfs:comment "Escapes XML characters in the input string." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:string ;
        sh:description "The input string to escape XML characters from." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """
       SELECT ?result WHERE {
       BIND(replace(
                    replace(
                        replace(
                            replace(
                                replace(
                                    $input,
                                    '&', '&amp;', 'g'),
                                '<', '&lt;', 'g'),
                            '>', '&gt;', 'g'),
                        '\"', '&quot;', 'g'),
                    "\'", '&apos;', 'g')
                AS ?result).
        }
        """ .