prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix dcm:       <http://purl.org/dc/dcmitype/>
prefix dct:       <http://purl.org/dc/terms/>
prefix foaf:      <http://xmlns.com/foaf/0.1/>
prefix owl:       <http://www.w3.org/2002/07/owl#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfa:      <http://www.w3.org/ns/rdfa#>
prefix rdfs:      <http://www.w3.org/2000/01/rdf-schema#>
prefix respec:    <https://respec.org/model/def/>
prefix sh:        <http://www.w3.org/ns/shacl#>
prefix skos:      <http://www.w3.org/2004/02/skos/core#>
prefix status:    <http://purl.org/adms/status/>
prefix svg:       <http://www.w3.org/SVG/model/def/>
prefix vann:      <http://purl.org/vocab/vann/>
prefix void:      <http://rdfs.org/ns/void#>
prefix xsd:       <http://www.w3.org/2001/XMLSchema#>
prefix xml:       <http://www.w3.org/XML/model/def/>
prefix xmlns:     <http://www.w3.org/2000/xmlns/model/def/> 
prefix xsi:       <http://www.w3.org/2001/XMLSchema-instance/model/def/>

prefix archiSVG:  <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix function:  <https://data.rijksfinancien.nl/archisvg/model/function/>
prefix graph:     <https://data.rijksfinancien.nl/archisvg/graph/>
prefix rule:      <https://data.rijksfinancien.nl/archisvg/model/rule/>
prefix section:   <https://data.rijksfinancien.nl/archisvg/id/section/>
prefix shp:       <https://data.rijksfinancien.nl/archisvg/model/shp/>
prefix standard:  <https://data.rijksfinancien.nl/archisvg/id/standard/>
prefix target:    <https://data.rijksfinancien.nl/archisvg/model/target/>

archiSVG:
    a
      owl:Ontology,
      respec:Ontology,
      void:Dataset;
    dct:created '2024-02-14'^^xsd:date;
    dct:creator
      'Flores Bakker';
    respec:introduction '''
Introduction of archiSVG serialisation vocabulary.
'''@en;
   respec:objective '''Objective of archiSVG serialisation vocabulary'''@en;
    respec:audience '''Audience of archiSVG serialisation vocabulary'''@en;
    dct:description '''Description of archiSVG serialisation vocabulary'''@en;
    dct:abstract '''Abstract of archiSVG serialisation vocabulary'''@en; 
    skos:example """
@prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/> .
@prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/> .
@prefix model: <https://data.rijksfinancien.nl/archisvg/id/> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix xml1: <http://www.w3.org/XML/model/def/> .
@prefix xmlns: <http://www.w3.org/2000/xmlns/model/def/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/> .

# Model

model:BasicModel-Document a archiSVG:Document ;
    rdf:_1 model:BasicModel-Model .

model:BasicModel-Model a archiSVG:Model ;
    rdf:_1 model:BasicModel-ModelName ;
    rdf:_2 model:BasicModel-Documentation ;
    rdf:_3 model:BasicModel-Elements ;
    rdf:_4 model:BasicModel-Relationships ;
    xmlns:xsi "http://www.w3.org/2001/XMLSchema-instance" ;
    xsi:schemaLocation "http://www.opengroup.org/xsd/archimate/3.0/ http://www.opengroup.org/xsd/archimate/3.1/archimate3_Model.xsd" ;
    xml1:xmlns "http://www.opengroup.org/xsd/archimate/3.0/" ;
    prov:wasDerivedFrom model:BasicModel ;
    archiSVG:identifier "Model-1" .

model:BasicModel-ModelName a archiSVG:Name ;
    rdf:_1 model:BasicModel-ModelNameText ;
    xml1:lang "en" .

model:BasicModel-ModelNameText a archiSVG:Text ;
    xml1:fragment "Basic Model" .
    
model:BasicModel-Documentation a archiSVG:Documentation ;
    rdf:_1 model:BasicModel-DocumentationText ;
    xml1:lang "en" .

model:BasicModel-DocumentationText a archiSVG:Text ;
    xml1:fragment "Example of a basic model with two elements and two relationships" .

# Elements

model:BasicModel-Elements a archiSVG:Elements ;
    rdf:_1 model:aBusinessActor-Element ;
    rdf:_2 model:aBusinessObject-Element ;
    rdf:_3 model:aBusinessRole-Element .

model:aBusinessActor-Element a archiSVG:Element ;
    rdf:_1 model:aBusinessActor-ElementName ;
    xsi:type "BusinessActor" ;
    prov:wasDerivedFrom model:aBusinessActor ;
    archiSVG:identifier "BusinessActor1" .

model:aBusinessActor-ElementName a archiSVG:Name ;
    rdf:_1 model:aBusinessActor-ElementNameText ;
    xml1:lang "en" .

model:aBusinessActor-ElementNameText a archiSVG:Text ;
    xml1:fragment "A business actor" .

model:aBusinessRole-Element a archiSVG:Element ;
    rdf:_1 model:aBusinessRole-ElementName ;
    xsi:type "BusinessRole" ;
    prov:wasDerivedFrom model:aBusinessRole ;
    archiSVG:identifier "BusinessRole1" .

model:aBusinessRole-ElementName a archiSVG:Name ;
    rdf:_1 model:aBusinessRole-ElementNameText ;
    xml1:lang "en" .

model:aBusinessRole-ElementNameText a archiSVG:Text ;
    xml1:fragment "A business role" .

# Relationships

model:BasicModel-Relationships a archiSVG:Relationships ;
    rdf:_1 model:aRelationship1-Relationship ;
    rdf:_2 model:aRelationship2-Relationship .

model:aRelationship1-Relationship a archiSVG:Relationship ;
    rdf:_1 model:aRelationship1-RelationshipName ;
    xsi:type "Assignment" ;
    prov:wasDerivedFrom model:aRelationship1 ;
    archiSVG:identifier "Relation_1" ;
    archiSVG:source "BusinessActor1" ;
    archiSVG:target "BusinessRole1" .

model:aRelationship1-RelationshipName a archiSVG:Name ;
    rdf:_1 model:aRelationship1-RelationshipNameText ;
    xml1:lang "en" .

model:aRelationship1-RelationshipNameText a archiSVG:Text ;
    xml1:fragment "Assignment Relationship"@en .

""";
    dct:language 'iso639-1:en';
    dct:license 'https://creativecommons.org/licenses/by/4.0/'^^xsd:anyURI;
    dct:publisher <https://www.example.com>;
    dct:status status:UnderDevelopment;
    dct:title 'archimate Core Vocabulary'@en;
    dct:source <https://www.example.com/archisvg-vocabulary>;
    foaf:homepage 'https://www.example.com/'^^xsd:anyURI;
    owl:versionInfo '1.0';
    vann:preferredNamespacePrefix 'archisvg';
    vann:preferredNamespaceUri 'https://data.rijksfinancien.nl/archisvg/model/def/';
    void:uriRegexPattern '^https://data.rijksfinancien.nl/archisvg/model/def/';
    void:uriSpace 'https://data.rijksfinancien.nl/xml/archisvg/def/'^^xsd:anyURI.


### Logic
 
shp:View
    a sh:NodeShape;
    sh:rule rule:View;
    sh:target target:View;
    skos:prefLabel 'view shape'@en;
    rdfs:isDefinedBy archiSVG:.

target:View
    a sh:SPARQLTarget;
    rdfs:comment 'Select all views in the archimate model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix svg: <http://www.w3.org/SVG/model/def/>

select $this {

  # Select all views... 
  $this rdf:type archimate:View.
    
  # ...that are not processed yet
  filter not exists { 
    ?archiSVG_view rdf:type svg:Document ;
                   prov:wasDerivedFrom $this.
  }
}
''';
    rdfs:isDefinedBy archiSVG:.

rule:View
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an SVG image based on an archimate view.'@en;
    skos:prefLabel 'Archimate view to SVG rule'@en;
    sh:construct '''

prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix function: <https://data.rijksfinancien.nl/archisvg/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix svg: <http://www.w3.org/SVG/model/def/>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  ?view  rdf:type svg:Document;
         skos:prefLabel ?label;
         skos:definition ?definition;
         rdf:_1 ?svg;
         prov:wasDerivedFrom $this.
  ?svg   rdf:type svg:Svg;
         xml:xmlns "http://www.w3.org/2000/svg" ;
         rdf:_1 ?elements;
         rdf:_2 ?relationships.
  ?elements rdf:type svg:G;
         dct:subject "Elements";
         skos:prefLabel "Archimate elements".
  ?relationships rdf:type svg:G;
         skos:prefLabel "Archimate relationships";
         dct:subject "Relationships".

} where {

  # Get the archimate metadata of the archimate view
  $this skos:prefLabel ?label;
        skos:definition ?definition.

  # Create IRI's
  BIND(IRI(CONCAT(STR($this),"-View"))                as ?view)
  BIND(IRI(CONCAT(STR($this),"-SVG"))                 as ?svg)
  BIND(IRI(CONCAT(STR($this),"-Elements"))            as ?elements)
  BIND(IRI(CONCAT(STR($this),"-Relationships"))       as ?relationships)

  }
''';
    rdfs:isDefinedBy archiSVG:.

shp:NodeCreator
    a sh:NodeShape;
    sh:rule rule:NodeCreator;
    sh:target target:NodeCreator;
    skos:prefLabel 'node creator shape'@en;
    rdfs:isDefinedBy archiSVG:.

target:NodeCreator
    a sh:SPARQLTarget;
    rdfs:comment 'Select all archimate view nodes in the archimate model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix svg: <http://www.w3.org/SVG/model/def/>

select $this {

  # Select all archimate view nodes... 
  
  $this rdf:type archimate:ViewNode.
 
  # ...that are not processed yet
  filter not exists { 
    ?archiSVG_node rdf:type svg:G ;
                   prov:wasDerivedFrom $this.
  }
}
''';
    rdfs:isDefinedBy archiSVG:.


rule:NodeCreator
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archisvg node in the XML document based on an archimate view node.'@en;
    skos:prefLabel 'archisvg node creator rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix function: <https://data.rijksfinancien.nl/archisvg/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix svg: <http://www.w3.org/SVG/model/def/>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

    ?elementNode 
          rdf:type svg:G, archiSVG:Element;
          skos:prefLabel ?elementName;
          rdf:_1 ?box;
          rdf:_2 ?icon;
          rdf:_3 ?text;
          prov:wasDerivedFrom $this;
          foaf:depicts ?element.

    ?box 
          rdf:type ?boxClass;
          svg:x      ?horizontal ;
          svg:y      ?vertical ;
          svg:height ?height ;
          svg:width  ?width ; 
          svg:fill   ?fillColor ;
          svg:stroke ?lineColor .

    ?icon 
          rdf:type svg:G;
          archiSVG:offsetX ?horizontal;
          archiSVG:offsetY ?vertical;
          prov:wasDerivedFrom ?iconTemplate;
          ?iconMember ?iconPart.

    ?iconPart 
          rdf:type ?iconPartClass, archiSVG:ElementIconPart;
          prov:wasDerivedFrom ?iconTemplatePart.

    ?text rdf:type svg:TextElement ;
          svg:font-family ?fontName ;
          svg:font-size   ?fontSize ;
          svg:x           ?textX ;
          svg:y           ?textY ;
          svg:transform   ?translate;
          rdf:_1          ?textFragment .
          
    ?textFragment rdf:type svg:Text;
          xml:fragment ?elementName.

} where {
  
  $this
    archimate:horizontal ?horizontal;
    archimate:vertical   ?vertical.
    
  optional {
  $this
    archimate:height     ?heightElement; 
    archimate:width      ?widthElement.
  }
  
  optional {
  $this
    archimate:fillColor  ?fillColorIRI;
    archimate:lineColor  ?lineColorIRI;
    archimate:font       ?fontIRI.
    
  ?fillColorIRI rdf:type archimate:Color;
    archimate:red   ?fillColorR;
    archimate:green ?fillColorG;
    archimate:blue  ?fillColorB;
    archimate:alpha ?fillColorA. 

  bind(concat("rgb(", ?fillColorR, "," ,?fillColorG, "," ,?fillColorB, ")") as ?fillColorElement)

  ?lineColorIRI rdf:type archimate:Color;
    archimate:red   ?lineColorR;
    archimate:green ?lineColorG;
    archimate:blue  ?lineColorB;
    archimate:alpha ?lineColorA. 
  
  bind(concat("rgb(", ?lineColorR, "," ,?lineColorG, "," ,?lineColorB, ")") as ?lineColorElement)

  ?fontIRI rdf:type archimate:Font;
    archimate:fontName  ?fontNameElement;
    archimate:fontSize  ?fontSizeElement;
    archimate:fontColor ?fontColorIRI.

  ?fontColorIRI rdf:type archimate:Color;
    archimate:red   ?fontColorR;
    archimate:green ?fontColorG;
    archimate:blue  ?fontColorB.

  bind(concat("rgb(", ?fontColorR, "," ,?fontColorG, "," ,?fontColorB, ")") as ?fontColorElement)
  }
  
  BIND(COALESCE(?heightElement,    ?defaultHeight)        as ?height)
  BIND(COALESCE(?widthElement,     ?defaultWidth)         as ?width)
  BIND(COALESCE(?fillColorElement, ?defaultFillColor)     as ?fillColor)
  BIND(COALESCE(?lineColorElement, ?defaultLineColor)     as ?lineColor)
  BIND(COALESCE(?fontColorElement, ?defaultFontColor)     as ?fontColor)
  BIND(COALESCE(?fontNameElement,  ?defaultFontName)      as ?fontName)
  BIND(COALESCE(?fontSizeElement,  ?defaultFontSize)      as ?fontSize)
  
  BIND(CONCAT('translate(', str(?horizontal), ',', str(?vertical), ')') as ?translate)
  
  # A view node depicts an element, get the metadata for this.
  $this foaf:depicts ?element.
  ?element rdf:type ?archimateClass;
           skos:prefLabel ?elementName.
  ?archimateClass rdfs:subClassOf* archimate:Element.
  
  ?svgTemplate rdf:type svg:G, archiSVG:Template;
               foaf:depicts ?archimateClass;
               rdf:_1 ?boxTemplate;
               rdf:_2 ?iconTemplate;
               rdf:_3 ?textTemplate.

  ?boxTemplate rdf:type ?boxClass, archiSVG:Template;
               svg:height ?defaultHeight ;
               svg:width  ?defaultWidth ; 
               svg:fill   ?defaultFillColor ;
               svg:stroke ?defaultLineColor .
  ?boxClass rdfs:subClassOf* svg:Element.

  ?iconTemplate rdf:type svg:G, archiSVG:Template;
               ?iconMember ?iconTemplatePart.

  ?iconTemplatePart rdf:type ?iconPartClass, archiSVG:Template.
  ?iconPartClass rdfs:subClassOf* svg:Element.
    
  ?textTemplate rdf:type svg:TextElement, archiSVG:Template;
                svg:font-family ?defaultFontName ;
                svg:font-size   ?defaultFontSize ;
                svg:x           ?textX;
                svg:y           ?textY.

  # Set unique identifier icon part
  BIND(str(strafter(str(?iconMember), concat(str(rdf:), '_'))) as ?iconPartIdentifier)

  # Create IRI's
  BIND(IRI(CONCAT(STR($this),"-SVG-Element"))                                    as ?elementNode)
  BIND(IRI(CONCAT(STR($this),"-SVG-Element","-Box"))                             as ?box)
  BIND(IRI(CONCAT(STR($this),"-SVG-Element","-Icon"))                            as ?icon)
  BIND(IRI(CONCAT(STR($this),"-SVG-Element","-IconPart", ?iconPartIdentifier))   as ?iconPart)
  BIND(IRI(CONCAT(STR($this),"-SVG-Element","-Text"))                            as ?text)
  BIND(IRI(CONCAT(STR($this),"-SVG-Element","-TextFragment"))                    as ?textFragment)
}
''';
    rdfs:isDefinedBy archiSVG:.

shp:ContainerCreator
    a sh:NodeShape;
    #sh:rule rule:ContainerCreator;
    sh:target target:ContainerCreator;
    skos:prefLabel 'container creator shape'@en;
    rdfs:isDefinedBy archiSVG:.

target:ContainerCreator
    a sh:SPARQLTarget;
    rdfs:comment 'Select all archimate containers in the archimate model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # Select all archimate containers... 

  $this rdf:type archimate:Container.
  
  # ...that are not processed yet
  filter not exists { 
    ?archiSVG_node rdf:type archiSVG:Node ;
                   prov:wasDerivedFrom $this.
  }
}
''';
    rdfs:isDefinedBy archiSVG:.


rule:ContainerCreator
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archixml node in the XML document based on an archimate container.'@en;
    skos:prefLabel 'archixml container creator rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix function: <https://data.rijksfinancien.nl/archisvg/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

   ?elementNode rdf:type archiSVG:Node;
           xsi:type ?xsiType;
           archiSVG:x ?x ;
           archiSVG:y ?y ;
           archiSVG:w ?w ;
           archiSVG:h ?h ;
           prov:wasDerivedFrom $this;
           rdf:_1 ?labelNode;
           rdf:_2 ?nodeStyleIRI.
   ?labelNode rdf:type archiSVG:Label;
           rdf:_1 ?labelTextNode.
   ?labelTextNode rdf:type archiSVG:Text;
           xml:fragment ?label.
   ?nodeStyleIRI rdf:type archiSVG:Style;
           rdf:_1 ?fillColorIRI;
           rdf:_2 ?lineColorIRI;
           rdf:_3 ?fontIRI.
   ?fillColorIRI rdf:type archiSVG:FillColor;
           archiSVG:a ?fillColorA ;
           archiSVG:b ?fillColorB ;
           archiSVG:g ?fillColorG ;
           archiSVG:r ?fillColorR .
   ?lineColorIRI rdf:type archiSVG:LineColor;
           archiSVG:a ?lineColorA ;
           archiSVG:b ?lineColorB ;
           archiSVG:g ?lineColorG ;
           archiSVG:r ?lineColorR .
   ?fontIRI rdf:type archiSVG:Font;
           archiSVG:name ?fontName;
           archiSVG:size ?fontSize;
           rdf:_1 ?fontColorIRI.
   ?fontColorIRI rdf:type archiSVG:Color;
           archiSVG:b ?fontColorB ;
           archiSVG:g ?fontColorG ;
           archiSVG:r ?fontColorR .

} where {

  # Get the archimate metadata of the archimate view
  ?archimateView rdf:type archimate:View;
                  archimate:contains* $this.

  # Establish the unique sequence number of a container across the model
  {select $this ((count(?prevIndex)+1) as ?indexContainer)
   where {
    $this rdf:type archimate:Container.
    bind(str($this) as ?index)
    optional {
              ?prevContainer rdf:type archimate:Container.
              bind(str(?prevContainer) as ?prevIndex)
              filter(?prevIndex < ?index)
             } 
     } group by $this
  }
  bind(concat("Container", str(?indexContainer)) as ?containerIdentifier)
  bind("Container" as ?xsiType)

  # Get optional label for container
  optional {
  $this  
      skos:prefLabel ?label.
  }
  
  optional {
  $this
    archimate:horizontal ?x;
    archimate:vertical   ?y;
    archimate:height     ?h;
    archimate:width      ?w.
  }

  optional {
  $this
    archimate:fillColor  ?fillColor;
    archimate:lineColor  ?lineColor;
    archimate:font       ?font.

  ?fillColor rdf:type archimate:Color;
    archimate:red   ?fillColorR;
    archimate:green ?fillColorG;
    archimate:blue  ?fillColorB;
    archimate:alpha ?fillColorA. 

  ?lineColor rdf:type archimate:Color;
    archimate:red   ?lineColorR;
    archimate:green ?lineColorG;
    archimate:blue  ?lineColorB;
    archimate:alpha ?lineColorA. 

  ?font rdf:type archimate:Font;
    archimate:fontName  ?fontName;
    archimate:fontSize  ?fontSize;
    archimate:fontColor ?fontColor.

  ?fontColor rdf:type archimate:Color;
    archimate:red   ?fontColorR;
    archimate:green ?fontColorG;
    archimate:blue  ?fontColorB.
  }
  # Set unique identifier
  BIND(CONCAT("Node_",STR(?containerIdentifier)) as ?nodeIdentifier)

  # Create IRI's
  BIND(IRI(CONCAT(STR(?archimateView),"-View-"))                           as ?view)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier))                             as ?elementNode)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-label"))                   as ?labelNode)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-labelText"))               as ?labelTextNode)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-nodestyle"))               as ?nodeStyleIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-fillcolor"))               as ?fillColorIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-linecolor"))               as ?lineColorIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-font"))                    as ?fontIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-fontcolor"))               as ?fontColorIRI)

  }
''';
    rdfs:isDefinedBy archiSVG:.

shp:LabelCreator
    a sh:NodeShape;
    #sh:rule rule:LabelCreator;
    sh:target target:LabelCreator;
    skos:prefLabel 'label creator shape'@en;
    rdfs:isDefinedBy archiSVG:.

target:LabelCreator
    a sh:SPARQLTarget;
    rdfs:comment 'Select all archimate notes in the archimate model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # Select all potential archimate notes... 
  
  $this rdf:type archimate:Note.
  
  # ...that are not processed yet
  filter not exists { 
    ?archiSVG_node rdf:type archiSVG:Node ;
                   prov:wasDerivedFrom $this.
  }
}
''';
    rdfs:isDefinedBy archiSVG:.


rule:LabelCreator
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archixml node in the XML document based on an archimate note.'@en;
    skos:prefLabel 'archixml label creator rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix function: <https://data.rijksfinancien.nl/archisvg/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {
             
   ?elementNode rdf:type archiSVG:Node;
           xsi:type ?xsiType;
           archiSVG:x ?x ;
           archiSVG:y ?y ;
           archiSVG:w ?w ;
           archiSVG:h ?h ;
           prov:wasDerivedFrom $this;
           rdf:_1 ?labelNode;
           rdf:_2 ?nodeStyleIRI.
   ?labelNode rdf:type archiSVG:Label;
           rdf:_1 ?labelTextNode.
   ?labelTextNode rdf:type archiSVG:Text;
           xml:fragment ?label.
   ?nodeStyleIRI rdf:type archiSVG:Style;
           rdf:_1 ?fillColorIRI;
           rdf:_2 ?lineColorIRI;
           rdf:_3 ?fontIRI.
   ?fillColorIRI rdf:type archiSVG:FillColor;
           archiSVG:a ?fillColorA ;
           archiSVG:b ?fillColorB ;
           archiSVG:g ?fillColorG ;
           archiSVG:r ?fillColorR .
   ?lineColorIRI rdf:type archiSVG:LineColor;
           archiSVG:a ?lineColorA ;
           archiSVG:b ?lineColorB ;
           archiSVG:g ?lineColorG ;
           archiSVG:r ?lineColorR .
   ?fontIRI rdf:type archiSVG:Font;
           archiSVG:name ?fontName;
           archiSVG:size ?fontSize;
           rdf:_1 ?fontColorIRI.
   ?fontColorIRI rdf:type archiSVG:Color;
           archiSVG:b ?fontColorB ;
           archiSVG:g ?fontColorG ;
           archiSVG:r ?fontColorR .

} where {

  # Get the archimate metadata of the archimate view
  ?archimateView rdf:type archimate:View;
                  archimate:contains* $this.

  # A view node can be a note, get the metadata for this
  # Establish the unique sequence number of a note across the model
  {select $this ((count(?prevIndex)+1) as ?indexNote)
   where {
    $this rdf:type archimate:Note.
    bind(str($this) as ?index)
    optional {
              ?prevNote rdf:type archimate:Note.
              bind(str(?prevNote) as ?prevIndex)
              filter(?prevIndex < ?index)
             } 
     } group by $this
  }
  bind(concat("Label", str(?indexNote)) as ?labelIdentifier)
  bind("Label" as ?xsiType)
  
  # Get optional label for the note
  optional {
  $this  
      skos:prefLabel ?label.
  }
  
  optional {
  $this
    archimate:horizontal ?x;
    archimate:vertical   ?y;
    archimate:height     ?h;
    archimate:width      ?w.
  }
  
  optional {
  $this
    archimate:fillColor  ?fillColor;
    archimate:lineColor  ?lineColor;
    archimate:font       ?font.
    
  ?fillColor rdf:type archimate:Color;
    archimate:red   ?fillColorR;
    archimate:green ?fillColorG;
    archimate:blue  ?fillColorB;
    archimate:alpha ?fillColorA. 

  ?lineColor rdf:type archimate:Color;
    archimate:red   ?lineColorR;
    archimate:green ?lineColorG;
    archimate:blue  ?lineColorB;
    archimate:alpha ?lineColorA. 

  ?font rdf:type archimate:Font;
    archimate:fontName  ?fontName;
    archimate:fontSize  ?fontSize;
    archimate:fontColor ?fontColor.

  ?fontColor rdf:type archimate:Color;
    archimate:red   ?fontColorR;
    archimate:green ?fontColorG;
    archimate:blue  ?fontColorB.
  }
  # Set unique identifier
  BIND(CONCAT("Node_",STR(?labelIdentifier)) as ?nodeIdentifier)

  # Create IRI's
  BIND(IRI(CONCAT(STR(?archimateView),"-View-"))                           as ?view)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier))                             as ?elementNode)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-label"))                   as ?labelNode)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-labelText"))               as ?labelTextNode)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-nodestyle"))               as ?nodeStyleIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-fillcolor"))               as ?fillColorIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-linecolor"))               as ?lineColorIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-font"))                    as ?fontIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-fontcolor"))               as ?fontColorIRI)
 
  }
''';
    rdfs:isDefinedBy archiSVG:.    

shp:ViewReferenceCreator
    a sh:NodeShape;
    #sh:rule rule:ViewReferenceCreator;
    sh:target target:ViewReferenceCreator;
    skos:prefLabel 'view reference creator shape'@en;
    rdfs:isDefinedBy archiSVG:.

target:ViewReferenceCreator
    a sh:SPARQLTarget;
    rdfs:comment 'Select all view references in the archimate model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # Select all nested view references... 
  
  $this rdf:type archimate:ViewReference.
  
  # ...that are not processed yet
  filter not exists { 
    ?archiSVG_node rdf:type archiSVG:Node ;
                   prov:wasDerivedFrom $this.
  }
}
''';
    rdfs:isDefinedBy archiSVG:.


rule:ViewReferenceCreator
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archixml node in the XML document based on a view reference.'@en;
    skos:prefLabel 'archixml view reference creator rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG:  <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix dct:       <http://purl.org/dc/terms/>
prefix foaf:      <http://xmlns.com/foaf/0.1/>
prefix function:  <https://data.rijksfinancien.nl/archisvg/model/function/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs:      <http://www.w3.org/2000/01/rdf-schema#>
prefix skos:      <http://www.w3.org/2004/02/skos/core#>
prefix xml:       <http://www.w3.org/XML/model/def/>
prefix xsd:       <http://www.w3.org/2001/XMLSchema#>
prefix xsi:       <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

   ?elementNode rdf:type archiSVG:Node;
           xsi:type ?xsiType;
           archiSVG:x ?x ;
           archiSVG:y ?y ;
           archiSVG:w ?w ;
           archiSVG:h ?h ;
           prov:wasDerivedFrom $this;
           rdf:_1 ?labelNode;
           rdf:_2 ?nodeStyleIRI;
           rdf:_3 ?viewRefIRI.
   ?labelNode rdf:type archiSVG:Label;
           rdf:_1 ?labelTextNode.
   ?labelTextNode rdf:type archiSVG:Text;
           xml:fragment ?label.
   ?nodeStyleIRI rdf:type archiSVG:Style;
           rdf:_1 ?fillColorIRI;
           rdf:_2 ?lineColorIRI;
           rdf:_3 ?fontIRI.
   ?fillColorIRI rdf:type archiSVG:FillColor;
           archiSVG:a ?fillColorA ;
           archiSVG:b ?fillColorB ;
           archiSVG:g ?fillColorG ;
           archiSVG:r ?fillColorR .
   ?lineColorIRI rdf:type archiSVG:LineColor;
           archiSVG:a ?lineColorA ;
           archiSVG:b ?lineColorB ;
           archiSVG:g ?lineColorG ;
           archiSVG:r ?lineColorR .
   ?fontIRI rdf:type archiSVG:Font;
           archiSVG:name ?fontName;
           archiSVG:size ?fontSize;
           rdf:_1 ?fontColorIRI.
   ?fontColorIRI rdf:type archiSVG:Color;
           archiSVG:b ?fontColorB ;
           archiSVG:g ?fontColorG ;
           archiSVG:r ?fontColorR . 
   ?viewRefIRI rdf:type archiSVG:ViewRef;
           archiSVG:ref ?viewIdentifier.

} where {

  # Get the archimate metadata of the archimate view
  ?archimateView rdf:type archimate:View;
                  archimate:contains* $this.
  $this foaf:depicts ?referencedView.
  ?archiSVGview prov:wasDerivedFrom ?referencedView;
                rdf:type archiSVG:View;
                archiSVG:identifier ?viewIdentifier.

  # Get the view reference metadata
  # Establish the unique sequence number of the view reference across the model
  {select $this ((count(?prevIndex)+1) as ?indexRef)
   where {
    $this rdf:type archimate:ViewReference.
    bind(str($this) as ?index)
    optional {
              ?prevReference rdf:type archimate:ViewReference.
              bind(str(?prevReference) as ?prevIndex)
              filter(?prevIndex < ?index)
             } 
     } group by $this
  }
  bind(concat("ViewReference", str(?indexRef)) as ?labelIdentifier)
  bind("Label" as ?xsiType)
  
  # Get optional label for the note
  optional {
  $this  
      skos:prefLabel ?label.
  }
  
  optional {
  $this
    archimate:horizontal ?x;
    archimate:vertical   ?y;
    archimate:height     ?h;     
    archimate:width      ?w.
  }
  
  optional {
  $this
    archimate:fillColor  ?fillColor;
    archimate:lineColor  ?lineColor;
    archimate:font       ?font.
    
  ?fillColor rdf:type archimate:Color;
    archimate:red   ?fillColorR;
    archimate:green ?fillColorG;
    archimate:blue  ?fillColorB;
    archimate:alpha ?fillColorA. 

  ?lineColor rdf:type archimate:Color;
    archimate:red   ?lineColorR;
    archimate:green ?lineColorG;
    archimate:blue  ?lineColorB;
    archimate:alpha ?lineColorA. 

  ?font rdf:type archimate:Font;
    archimate:fontName  ?fontName;
    archimate:fontSize  ?fontSize;
    archimate:fontColor ?fontColor.

  ?fontColor rdf:type archimate:Color;
    archimate:red   ?fontColorR;
    archimate:green ?fontColorG;
    archimate:blue  ?fontColorB.
  }
  # Set unique identifier
  BIND(CONCAT("Node_",STR(?labelIdentifier)) as ?nodeIdentifier)

  # Create IRI's
  BIND(IRI(CONCAT(STR(?archimateView),"-View-"))                           as ?view)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier))                             as ?elementNode)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-label"))                   as ?labelNode)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-labelText"))               as ?labelTextNode)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-nodestyle"))               as ?nodeStyleIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-fillcolor"))               as ?fillColorIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-linecolor"))               as ?lineColorIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-font"))                    as ?fontIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-fontcolor"))               as ?fontColorIRI)
  BIND(IRI(CONCAT(STR(?view),?nodeIdentifier, "-viewref"))                 as ?viewRefIRI)
 
  }
''';
    rdfs:isDefinedBy archiSVG:.    

shp:ConnectionCreator
    a sh:NodeShape;
    sh:rule rule:ConnectionCreator;
    sh:target target:ConnectionCreator;
    skos:prefLabel 'connection creator shape'@en;
    rdfs:isDefinedBy archiSVG:.

target:ConnectionCreator
    a sh:SPARQLTarget;
    rdfs:comment 'Select all view connections in the model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # Select all view connections... 
  $this rdf:type archimate:Connection.
    
  # ...that are not processed yet
  filter not exists { 
    ?archiSVG_view rdf:type archiSVG:Connection ;
                   prov:wasDerivedFrom $this.
  }

  # ...but only if all the archimate view nodes in the view are already processed
  filter not exists {
  ?archimateView archimate:contains $this;
                 archimate:contains ?viewnodes.
  ?viewnodes rdf:type archimate:ViewNode.
   filter not exists {
      ?viewnodes prov:wasDerivedFrom [].
    }
  }
}
''';
    rdfs:isDefinedBy archiSVG:.


rule:ConnectionCreator
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a connection in the XML document based on a relationship in an archimate view.'@en;
    skos:prefLabel 'archimate connection creator rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix svg: <http://www.w3.org/SVG/model/def/>

construct {

    ?connection
          rdf:type svg:G, archiSVG:Connection;
          skos:prefLabel ?relationshipName;
          rdf:_1 ?connectionPart1;
          rdf:_2 ?connectionPart2;
          rdf:_3 ?connectionPart3;
          archiSVG:fromX ?fromX ;
          archiSVG:fromY ?fromY ;
          archiSVG:fromW ?fromW ;
          archiSVG:fromH ?fromH ;
          archiSVG:toX ?toX ;
          archiSVG:toY ?toY ;
          archiSVG:toW ?toW ;
          archiSVG:toH ?toH ;
          prov:wasDerivedFrom $this;
          foaf:depicts ?relationship.

    ?connectionPart1 
          rdf:type ?template1Class, archiSVG:ConnectionTail;
          prov:wasDerivedFrom ?iconTemplate1.

    ?connectionPart2
          rdf:type svg:Polyline, archiSVG:ConnectionLine;
          prov:wasDerivedFrom ?iconTemplate2.

    ?connectionPart3 
          rdf:type svg:Polyline, archiSVG:ConnectionHead;
          prov:wasDerivedFrom ?iconTemplate3.

}
  where {

  ?archimateView archimate:contains $this.
  $this foaf:depicts ?relationship.
  ?relationship rdf:type archimate:Relationship;
                archimate:from ?fromArchimateElement;
                archimate:relationship ?relationType;
                archimate:to ?toArchimateElement;
                skos:prefLabel ?relationshipName.
  ?relationType rdf:type/rdfs:subClassOf+ archimate:RelationType.

  ?archimateView archimate:contains ?source, ?target.
  ?source foaf:depicts ?fromArchimateElement.
  ?target foaf:depicts ?toArchimateElement.

?source
    archimate:horizontal ?fromX;
    archimate:vertical   ?fromY.

optional {
  ?source
    archimate:height     ?fromH;
    archimate:width      ?fromW.
  }

?target
    archimate:horizontal ?toX;
    archimate:vertical   ?toY.
    

optional {
  ?target
    archimate:height     ?toH;
    archimate:width      ?toW.

  }

  # Get the template SVG for the relationship.
  ?svgTemplate rdf:type svg:G, archiSVG:Template;
               foaf:depicts ?relationType;
               rdf:_1 ?iconTemplate1;
               rdf:_2 ?iconTemplate2;
               rdf:_3 ?iconTemplate3.

  ?iconTemplate1 rdf:type ?template1Class, archiSVG:Template.
  ?template1Class rdfs:subClassOf* svg:Element.

  # Create IRI's
  BIND(IRI(CONCAT(STR($this),"-SVG-Relationship"))                 as ?connection)
  BIND(IRI(CONCAT(STR($this),"-SVG-Relationship","-1"))            as ?connectionPart1)
  BIND(IRI(CONCAT(STR($this),"-SVG-Relationship","-2"))            as ?connectionPart2)
  BIND(IRI(CONCAT(STR($this),"-SVG-Relationship","-3"))            as ?connectionPart3)

}
''';
    rdfs:isDefinedBy archiSVG:.

shp:NodeConnector
    a sh:NodeShape;
    sh:rule rule:NodeConnector;
    sh:target target:NodeConnector;
    skos:prefLabel 'node connector shape'@en;
    rdfs:isDefinedBy archiSVG:.

target:NodeConnector
    a sh:SPARQLTarget;
    rdfs:comment 'Select all archixml nodes in the model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # Select all archisvg elements for which a parent exists but who are not connected yet.
  $this rdf:type archiSVG:Element;

  # ...that are not processed yet
  filter not exists { 
    ?parentNode ?member $this.
    filter(strstarts(str(?member), concat(str(rdf:), '_')))
  }
}
''';
    rdfs:isDefinedBy archiSVG:.

rule:NodeConnector
    a sh:SPARQLRule;
    rdfs:comment 'A rule that connects a node in the XML document with its parent node or archimate view.'@en;
    skos:prefLabel 'archimate node connector rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG:  <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix dct:       <http://purl.org/dc/terms/>
prefix foaf:      <http://xmlns.com/foaf/0.1/>
prefix function:  <https://data.rijksfinancien.nl/archisvg/model/function/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs:      <http://www.w3.org/2000/01/rdf-schema#>
prefix skos:      <http://www.w3.org/2004/02/skos/core#>
prefix xml:       <http://www.w3.org/XML/model/def/>
prefix xsd:       <http://www.w3.org/2001/XMLSchema#>
prefix xsi:       <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  ?elements ?memberNode $this.

} where {

  # Get the parent node
  $this prov:wasDerivedFrom ?node. 
  ?parent archimate:contains ?node.
  ?documentNode prov:wasDerivedFrom ?parent;
                rdf:_1 ?svg.
  ?svg rdf:_1 ?elements.

  # Establish position of the element within the parent
  {select ?parent ?node ((count(?prevIndex)) as ?indexMember)
   where{
    ?parent archimate:contains ?node.
    bind(str(?node) as ?index)
    optional {
              ?parent archimate:contains ?prevNode.
              ?prevNode rdf:type ?prevNodeClass.
              filter (?prevNodeClass in (archimate:ViewNode, archimate:Container, archimate:Note, archimate:ViewReference))
              bind(str(?prevNode) as ?prevIndex)
              filter(?prevIndex < ?index)
             } 
     } group by ?parent ?node
  }
  
  # Establish instance of rdfs:member for the node.
  # Take into account that the indexMember starts with 0 and hence needs an offset of +1
  
  BIND(IRI(CONCAT(STR(rdf:), "_", STR(?indexMember+1))) as ?memberNode)
 
  }
''';
    rdfs:isDefinedBy archiSVG:.

shp:ConnectionConnector
    a sh:NodeShape;
    sh:rule rule:ConnectionConnector;
    sh:target target:ConnectionConnector;
    skos:prefLabel 'connection connector shape'@en;
    rdfs:isDefinedBy archiSVG:.

target:ConnectionConnector
    a sh:SPARQLTarget;
    rdfs:comment 'Select all archisvg connections in the model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # Select all archisvg connections that are not connected yet.
  $this rdf:type archiSVG:Connection;

  # ...that are not processed yet
  filter not exists { 
    ?parentNode ?member $this.
    filter(strstarts(str(?member), concat(str(rdf:), '_')))
  }
}
''';
    rdfs:isDefinedBy archiSVG:.

rule:ConnectionConnector
    a sh:SPARQLRule;
    rdfs:comment 'A rule that connects a connection in the XML document with its parent node.'@en;
    skos:prefLabel 'archimate connection connector rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix function: <https://data.rijksfinancien.nl/archisvg/model/function/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  ?connections ?memberConnection $this.

} where {

  # Get the parent node
  $this prov:wasDerivedFrom ?connection.
  ?parent archimate:contains ?connection.
  ?documentNode prov:wasDerivedFrom ?parent;
                rdf:_1 ?svg.
  ?svg rdf:_2 ?connections.

  # Establish position of the connection within the parent
  {select ?parent ?connection ((count(?prevIndex)) as ?indexMember)
   where{
    ?parent archimate:contains ?connection.
    bind(str(?connection) as ?index)
    optional {
              ?parent archimate:contains ?prevConnection.
              ?prevConnection rdf:type archimate:Connection.
              bind(str(?prevConnection) as ?prevIndex)
              filter(?prevIndex < ?index)
             } 
     } group by ?parent ?connection
  }
  
  # Establish instance of rdfs:member for the connection.
  # Take into account that the indexMember starts with 0 and hence needs an offset of +1
  
  BIND(IRI(CONCAT(STR(rdf:), "_", STR(?indexMember+1))) as ?memberConnection)
 
  }
''';
    rdfs:isDefinedBy archiSVG:.

shp:IconPartPolyLine
    a sh:NodeShape;
    sh:rule rule:IconPartPolyLine;
    sh:target target:IconPartPolyLine;
    skos:prefLabel 'archisvg icon part polyline shape'@en;
    rdfs:isDefinedBy archiSVG:.

target:IconPartPolyLine
    a sh:SPARQLTarget;
    rdfs:comment 'Select the archisvg icon part polyline that have to get enriched with attributes.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG:  <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rule:      <https://data.rijksfinancien.nl/archisvg/model/rule/>
prefix svg:       <http://www.w3.org/SVG/model/def/> 

select $this {

  # Select the archiSVG icon part that needs to be processed
  $this rdf:type archiSVG:ElementIconPart, svg:Polyline.
  filter not exists { 
   $this prov:wasDerivedFrom rule:IconPartPolyLine.
   }
}
''';
    rdfs:isDefinedBy archiSVG:.
    
rule:IconPartPolyLine
    a sh:SPARQLRule;
    rdfs:comment 'A rule that adds attributes to an icon part polyline in archiSVG.'@en;
    skos:prefLabel 'icon part polyline rule'@en;
    sh:construct '''

prefix archimate:   <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG:    <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix dct:         <http://purl.org/dc/terms/>
prefix prov:        <http://www.w3.org/ns/prov#>
prefix rdf:         <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rule:        <https://data.rijksfinancien.nl/archisvg/model/rule/>
prefix svg:         <http://www.w3.org/SVG/model/def/> 
prefix xsi:         <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  $this svg:fill ?fill;
        svg:points ?bendPoints;
        svg:stroke ?lineColor ;
        svg:stroke-width ?lineSize ;
        svg:transform ?translate;
        prov:wasDerivedFrom rule:IconPartPolyLine.

} where {
  
  ?icon ?member $this; 
        archiSVG:offsetX ?offsetX;
        archiSVG:offsetY ?offsetY.
        
  $this prov:wasDerivedFrom ?template.
        
  ?template
            rdf:type svg:Polyline, archiSVG:Template;
            svg:fill ?fill;
            svg:stroke ?lineColor;
            svg:stroke-width ?lineSize;
            svg:points ?bendPoints.
           
  bind(concat('translate(', str(?offsetX), ',', str(?offsetY), ')') as ?translate)
}
''';
    rdfs:isDefinedBy archiSVG:.

shp:IconPartRect
    a sh:NodeShape;
    sh:rule rule:IconPartRect;
    sh:target target:IconPartRect;
    skos:prefLabel 'archisvg icon part rect shape'@en;
    rdfs:isDefinedBy archiSVG:.

target:IconPartRect
    a sh:SPARQLTarget;
    rdfs:comment 'Select the archisvg icon part rect that have to get enriched with attributes.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG:  <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rule:      <https://data.rijksfinancien.nl/archisvg/model/rule/>
prefix svg:       <http://www.w3.org/SVG/model/def/> 

select $this {

  # Select the archiSVG icon part that needs to be processed
  $this rdf:type archiSVG:ElementIconPart, svg:Rect.
  filter not exists { 
   $this prov:wasDerivedFrom rule:IconPartRect.
   }
}
''';
    rdfs:isDefinedBy archiSVG:.
    
rule:IconPartRect
    a sh:SPARQLRule;
    rdfs:comment 'A rule that adds attributes to an icon part rect in archiSVG.'@en;
    skos:prefLabel 'icon part rect rule'@en;
    sh:construct '''

prefix archimate:   <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG:    <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix dct:         <http://purl.org/dc/terms/>
prefix prov:        <http://www.w3.org/ns/prov#>
prefix rdf:         <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rule:        <https://data.rijksfinancien.nl/archisvg/model/rule/>
prefix svg:         <http://www.w3.org/SVG/model/def/> 
prefix xsi:         <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  $this svg:fill ?fill;
        svg:width  ?width;
        svg:height ?height;
        svg:x ?horizontal;
        svg:y ?vertical;
        svg:rx ?rx ;
        svg:ry ?ry ;
        svg:transform ?translate;
        svg:stroke ?lineColor ;
        svg:stroke-width ?lineSize ;
        prov:wasDerivedFrom rule:IconPartRect.

} where {

  ?icon ?member $this; 
        archiSVG:offsetX ?offsetX;
        archiSVG:offsetY ?offsetY.
  
  $this prov:wasDerivedFrom ?template.
        
  ?template
            rdf:type svg:Rect, archiSVG:Template;
            svg:fill ?fill;
            svg:stroke ?lineColor;
            svg:x ?horizontal;
            svg:y ?vertical;
            svg:width ?width;
            svg:height ?height.

  optional {
  ?template svg:rx ?rx;
            svg:ry ?ry.
  }   
  
  optional {
  ?template svg:stroke-width ?lineSize;
  }
  
  bind(concat('translate(', str(?offsetX), ',', str(?offsetY), ')') as ?translate)
}
''';
    rdfs:isDefinedBy archiSVG:.
    

shp:IconPartCircle
    a sh:NodeShape;
    sh:rule rule:IconPartCircle;
    sh:target target:IconPartCircle;
    skos:prefLabel 'archisvg icon part circle shape'@en;
    rdfs:isDefinedBy archiSVG:.

target:IconPartCircle
    a sh:SPARQLTarget;
    rdfs:comment 'Select the archisvg icon part circle that have to get enriched with attributes.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG:  <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rule:      <https://data.rijksfinancien.nl/archisvg/model/rule/>
prefix svg:       <http://www.w3.org/SVG/model/def/> 

select $this {

  # Select the archiSVG icon part that needs to be processed
  $this rdf:type archiSVG:ElementIconPart, svg:Circle.
  filter not exists { 
   $this prov:wasDerivedFrom rule:IconPartCircle.
   }
}
''';
    rdfs:isDefinedBy archiSVG:.
    
rule:IconPartCircle
    a sh:SPARQLRule;
    rdfs:comment 'A rule that adds attributes to an icon part circle in archiSVG.'@en;
    skos:prefLabel 'icon part circle rule'@en;
    sh:construct '''

prefix archimate:   <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG:    <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix dct:         <http://purl.org/dc/terms/>
prefix prov:        <http://www.w3.org/ns/prov#>
prefix rdf:         <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rule:        <https://data.rijksfinancien.nl/archisvg/model/rule/>
prefix svg:         <http://www.w3.org/SVG/model/def/> 
prefix xsi:         <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  $this svg:fill ?fill;
        svg:cx ?horizontal;
        svg:cy ?vertical;
        svg:r  ?radius ;
        svg:transform ?translate;
        svg:stroke ?lineColor ;
        svg:stroke-width ?lineSize ;
        prov:wasDerivedFrom rule:IconPartCircle.

} where {

  ?icon ?member $this; 
        archiSVG:offsetX ?offsetX;
        archiSVG:offsetY ?offsetY.

  $this prov:wasDerivedFrom ?template.

  ?template
            rdf:type svg:Circle, archiSVG:Template;
            svg:fill ?fill;
            svg:stroke ?lineColor;
            svg:stroke-width ?lineSize;
            svg:cx ?horizontal ;
            svg:cy ?vertical ;
            svg:r  ?radius .

  bind(concat('translate(', str(?offsetX), ',', str(?offsetY), ')') as ?translate)
}
''';
    rdfs:isDefinedBy archiSVG:.

shp:IconPartLine
    a sh:NodeShape;
    sh:rule rule:IconPartLine;
    sh:target target:IconPartLine;
    skos:prefLabel 'archisvg icon part line shape'@en;
    rdfs:isDefinedBy archiSVG:.

target:IconPartLine
    a sh:SPARQLTarget;
    rdfs:comment 'Select the archisvg icon part line that have to get enriched with attributes.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG:  <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rule:      <https://data.rijksfinancien.nl/archisvg/model/rule/>
prefix svg:       <http://www.w3.org/SVG/model/def/> 

select $this {

  # Select the archiSVG icon part that needs to be processed
  $this rdf:type archiSVG:ElementIconPart, svg:Line.
  filter not exists { 
   $this prov:wasDerivedFrom rule:IconPartLine.
   }
}
''';
    rdfs:isDefinedBy archiSVG:.
    
rule:IconPartLine
    a sh:SPARQLRule;
    rdfs:comment 'A rule that adds attributes to an icon part line in archiSVG.'@en;
    skos:prefLabel 'icon part line rule'@en;
    sh:construct '''

prefix archimate:   <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG:    <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix dct:         <http://purl.org/dc/terms/>
prefix prov:        <http://www.w3.org/ns/prov#>
prefix rdf:         <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rule:        <https://data.rijksfinancien.nl/archisvg/model/rule/>
prefix svg:         <http://www.w3.org/SVG/model/def/> 
prefix xsi:         <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  $this svg:fill ?fill;
        svg:x1 ?horizontal1;
        svg:y1 ?vertical1;
        svg:x2 ?horizontal2;
        svg:y2 ?vertical2;
        svg:transform ?translate;
        svg:stroke ?lineColor ;
        svg:stroke-width ?lineSize ;
        prov:wasDerivedFrom rule:IconPartLine.

} where {
  
  ?icon ?member $this; 
        archiSVG:offsetX ?offsetX;
        archiSVG:offsetY ?offsetY.

  $this prov:wasDerivedFrom ?template.

  ?template
            rdf:type svg:Line, archiSVG:Template;
            svg:fill ?fill;
            svg:stroke ?lineColor;
            svg:stroke-width ?lineSize;
            svg:x1 ?horizontal1;
            svg:y1 ?vertical1;
            svg:x2 ?horizontal2;
            svg:y2 ?vertical2.

  bind(concat('translate(', str(?offsetX), ',', str(?offsetY), ')') as ?translate)
}
''';
    rdfs:isDefinedBy archiSVG:.

shp:ConnectionLine
    a sh:NodeShape;
    sh:rule rule:ConnectionLine;
    sh:target target:ConnectionLine;
    skos:prefLabel 'archisvg connection line shape'@en;
    rdfs:isDefinedBy archiSVG:.

target:ConnectionLine
    a sh:SPARQLTarget;
    rdfs:comment 'Select the archisvg connection line that has to get enriched with attributes.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG:  <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rule:      <https://data.rijksfinancien.nl/archisvg/model/rule/>
prefix svg:       <http://www.w3.org/SVG/model/def/> 

select $this {

  # Select the archiSVG connection line that needs to be processed
  $this rdf:type archiSVG:ConnectionLine, svg:Polyline.
  filter not exists { 
   $this prov:wasDerivedFrom rule:ConnectionLine.
   }
}
''';
    rdfs:isDefinedBy archiSVG:.
    
rule:ConnectionLine
    a sh:SPARQLRule;
    rdfs:comment 'A rule that adds attributes to an connection line in archiSVG.'@en;
    skos:prefLabel 'connection line rule'@en;
    sh:construct '''

prefix archiSVG:    <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix function:    <https://data.rijksfinancien.nl/archisvg/model/function/>
prefix prov:        <http://www.w3.org/ns/prov#>
prefix rdf:         <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rule:        <https://data.rijksfinancien.nl/archisvg/model/rule/>
prefix svg:         <http://www.w3.org/SVG/model/def/> 

construct {

  $this svg:points ?bendPoints;
        svg:transform ?translate;
        svg:transform ?rotate;
        svg:stroke ?lineColor;
        svg:stroke-width ?lineSize;
        prov:wasDerivedFrom rule:ConnectionLine.

} where {

  ?connection ?member $this.

  $this prov:wasDerivedFrom ?template.

  ?template
            rdf:type svg:Polyline, archiSVG:Template;
            svg:fill ?fill;
            svg:stroke ?lineColor;
            svg:stroke-width ?lineSize.
 bind(function:getBendPoints($this) as ?bendPoints)

}
''';
    rdfs:isDefinedBy archiSVG:.

shp:ConnectionHead
    a sh:NodeShape;
    sh:rule rule:ConnectionHead;
    sh:target target:ConnectionHead;
    skos:prefLabel 'archisvg connection head shape'@en;
    rdfs:isDefinedBy archiSVG:.

target:ConnectionHead
    a sh:SPARQLTarget;
    rdfs:comment 'Select the archisvg connection head that has to get enriched with attributes.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG:  <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rule:      <https://data.rijksfinancien.nl/archisvg/model/rule/>
prefix svg:       <http://www.w3.org/SVG/model/def/> 

select $this {

  # Select the archiSVG connection line that needs to be processed
  $this rdf:type archiSVG:ConnectionHead, svg:Polyline.
  filter not exists { 
   $this prov:wasDerivedFrom rule:ConnectionHead.
   }
}
''';
    rdfs:isDefinedBy archiSVG:.
    
rule:ConnectionHead
    a sh:SPARQLRule;
    rdfs:comment 'A rule that adds attributes to an connection head in archiSVG.'@en;
    skos:prefLabel 'connection head rule'@en;
    sh:construct '''

prefix archiSVG:    <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix function:    <https://data.rijksfinancien.nl/archisvg/model/function/>
prefix prov:        <http://www.w3.org/ns/prov#>
prefix rdf:         <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rule:        <https://data.rijksfinancien.nl/archisvg/model/rule/>
prefix svg:         <http://www.w3.org/SVG/model/def/> 

construct {

  $this svg:points ?bendPoints;
        svg:transform ?translate;
        svg:transform ?rotate;
        prov:wasDerivedFrom rule:ConnectionHead.

} where {

  ?connection ?member $this.

  $this prov:wasDerivedFrom ?template.

  ?template
            rdf:type svg:Polyline, archiSVG:Template;
            svg:fill ?fill;
            svg:stroke ?lineColor;
            svg:stroke-width ?lineSize.
 bind(function:getBendPoints($this) as ?bendPoints)

}
''';
    rdfs:isDefinedBy archiSVG:.


shp:ConnectionTailCircle
    a sh:NodeShape;
    sh:rule rule:ConnectionTailCircle;
    sh:target target:ConnectionTailCircle;
    skos:prefLabel 'archisvg connection tail circle shape'@en;
    rdfs:isDefinedBy archiSVG:.

target:ConnectionTailCircle
    a sh:SPARQLTarget;
    rdfs:comment 'Select the archisvg connection tail circle that has to get enriched with attributes.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG:  <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rule:      <https://data.rijksfinancien.nl/archisvg/model/rule/>
prefix svg:       <http://www.w3.org/SVG/model/def/> 

select $this {

  # Select the archiSVG connection line that needs to be processed
  $this rdf:type archiSVG:ConnectionTail, svg:Circle.
  filter not exists { 
   $this prov:wasDerivedFrom rule:ConnectionTailCircle.
   }
}
''';
    rdfs:isDefinedBy archiSVG:.
    
rule:ConnectionTailCircle
    a sh:SPARQLRule;
    rdfs:comment 'A rule that adds attributes to a connection tail circle in archiSVG.'@en;
    skos:prefLabel 'connection tail circle rule'@en;
    sh:construct '''

prefix archiSVG:    <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix function:    <https://data.rijksfinancien.nl/archisvg/model/function/>
prefix prov:        <http://www.w3.org/ns/prov#>
prefix rdf:         <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rule:        <https://data.rijksfinancien.nl/archisvg/model/rule/>
prefix svg:         <http://www.w3.org/SVG/model/def/> 

construct {

  $this 
        svg:cx ?cx ;
        svg:cy ?cy ;
        svg:fill ?fill;
        svg:r ?r ;
        svg:stroke ?lineColor;
        svg:stroke-width ?lineSize;
        svg:transform ?translate;
        svg:transform ?rotate;
        prov:wasDerivedFrom rule:ConnectionTailCircle.

} where {

  ?connection ?member $this.

  $this prov:wasDerivedFrom ?template.

  ?template
            rdf:type svg:Circle, archiSVG:Template;
            svg:fill ?fill;
            svg:stroke ?lineColor;
            svg:stroke-width ?lineSize;
            svg:cx ?cx ;
            svg:cy ?cy ;
            svg:fill ?fill ;
            svg:r ?r .

}
''';
    rdfs:isDefinedBy archiSVG:.

shp:ConnectionTailPolyline
    a sh:NodeShape;
    sh:rule rule:ConnectionTailPolyline;
    sh:target target:ConnectionTailPolyline;
    skos:prefLabel 'archisvg connection tail polyline shape'@en;
    rdfs:isDefinedBy archiSVG:.

target:ConnectionTailPolyline
    a sh:SPARQLTarget;
    rdfs:comment 'Select the archisvg connection tail polyline that has to get enriched with attributes.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiSVG:  <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rule:      <https://data.rijksfinancien.nl/archisvg/model/rule/>
prefix svg:       <http://www.w3.org/SVG/model/def/> 

select $this {

  # Select the archiSVG connection line that needs to be processed
  $this rdf:type archiSVG:ConnectionTail, svg:Polyline.
  filter not exists { 
   $this prov:wasDerivedFrom rule:ConnectionTailPolyline.
   }
}
''';
    rdfs:isDefinedBy archiSVG:.

rule:ConnectionTailPolyline
    a sh:SPARQLRule;
    rdfs:comment 'A rule that adds attributes to a connection tail polyline in archiSVG.'@en;
    skos:prefLabel 'connection tail polyline rule'@en;
    sh:construct '''

prefix archiSVG:    <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix function:    <https://data.rijksfinancien.nl/archisvg/model/function/>
prefix prov:        <http://www.w3.org/ns/prov#>
prefix rdf:         <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rule:        <https://data.rijksfinancien.nl/archisvg/model/rule/>
prefix svg:         <http://www.w3.org/SVG/model/def/> 

construct {

  $this svg:points ?bendPoints;
        svg:transform ?translate;
        svg:transform ?rotate;
        svg:fill ?fill;
        svg:stroke ?lineColor;
        svg:stroke-width ?lineSize;
        prov:wasDerivedFrom rule:ConnectionTailPolyline.

} where {

  ?connection ?member $this.

  $this prov:wasDerivedFrom ?template.

  ?template
            rdf:type svg:Polyline, archiSVG:Template;
            svg:fill ?fill;
            svg:stroke ?lineColor;
            svg:stroke-width ?lineSize.
 bind(function:getBendPoints($this) as ?bendPoints)

}
''';
    rdfs:isDefinedBy archiSVG:.

function:getBendPoints
    a sh:SPARQLFunction ;
    rdfs:comment "Returns a string containing the bendpoints for a connection line in an archimate view." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:anyURI ;
        sh:description "The element for which the bendpoints coordinates have to be returned." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """

prefix archiSVG:    <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix rdf:         <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix svg:         <http://www.w3.org/SVG/model/def/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

select ?result where {
  optional

  {
    ?connection
      rdf:type svg:G,
        archiSVG:Connection;
      rdf:_2 $input;
      archiSVG:fromX ?fromX_string ;
      archiSVG:fromY ?fromY_string ;
      archiSVG:fromW ?fromW_string ;
      archiSVG:fromH ?fromH_string ;
      archiSVG:toX ?toX_string ;
      archiSVG:toY ?toY_string ;
      archiSVG:toW ?toW_string ;
      archiSVG:toH ?toH_string .

    bind(xsd:integer(?fromX_string) as ?fromX)
    bind(xsd:integer(?fromY_string) as ?fromY)
    bind(xsd:integer(?fromW_string) as ?fromW)
    bind(xsd:integer(?fromH_string) as ?fromH)
    bind(xsd:integer(?toX_string) as ?toX)
    bind(xsd:integer(?toY_string) as ?toY)
    bind(xsd:integer(?toW_string) as ?toW)
    bind(xsd:integer(?toH_string) as ?toH)
    
    # 1. Diagonal line
    # Quadrant 1: diagonal line when [a] left of [b] and [a] above [b]       
    bind(if(((?fromX + ?fromW < ?toX) && (?fromY + ?fromH < ?toY)), str(?fromX + ?fromW),     ?unboundDummy) as ?startX1a)
    bind(if(((?fromX + ?fromW < ?toX) && (?fromY + ?fromH < ?toY)), str(?fromY + ?fromH),     ?unboundDummy) as ?startY1a)
    bind(if(((?fromX + ?fromW < ?toX) && (?fromY + ?fromH < ?toY)), str(?toX),                ?unboundDummy) as ?endX1a)
    bind(if(((?fromX + ?fromW < ?toX) && (?fromY + ?fromH < ?toY)), str(?toY),                ?unboundDummy) as ?endY1a)

    # Quadrant 2: diagonal line when [a] right of [b] and [a] above [b]
    bind(if(((?toX + ?toW < ?fromX)   && (?fromY + ?fromH < ?toY)), str(?fromX),              ?unboundDummy) as ?startX1b)
    bind(if(((?toX + ?toW < ?fromX)   && (?fromY + ?fromH < ?toY)), str(?fromY + ?fromH),     ?unboundDummy) as ?startY1b)
    bind(if(((?toX + ?toW < ?fromX)   && (?fromY + ?fromH < ?toY)), str(?toX+?toW),           ?unboundDummy) as ?endX1b)
    bind(if(((?toX + ?toW < ?fromX)   && (?fromY + ?fromH < ?toY)), str(?toY),                ?unboundDummy) as ?endY1b)

    # Quadrant 3: diagonal line when [a] right of [b] and [a] below [b]
    bind(if(((?toX + ?toW < ?fromX)) && (?toY + ?toH < ?fromY), str(?fromX),                  ?unboundDummy) as ?startX1c)
    bind(if(((?toX + ?toW < ?fromX)) && (?toY + ?toH < ?fromY), str(?fromY),                  ?unboundDummy) as ?startY1c)
    bind(if(((?toX + ?toW < ?fromX)) && (?toY + ?toH < ?fromY), str(?toX+?toW),               ?unboundDummy) as ?endX1c)
    bind(if(((?toX + ?toW < ?fromX)) && (?toY + ?toH < ?fromY), str(?toY+?toH),               ?unboundDummy) as ?endY1c)

    # Quadrant 4: diagonal line when [a] left of [b] and [a] below [b] 
    bind(if(((?fromX + ?fromW < ?toX) && (?toY + ?toH < ?fromY)), str(?fromX + ?fromW),       ?unboundDummy) as ?startX1d)
    bind(if(((?fromX + ?fromW < ?toX) && (?toY + ?toH < ?fromY)), str(?fromY),                ?unboundDummy) as ?startY1d)
    bind(if(((?fromX + ?fromW < ?toX) && (?toY + ?toH < ?fromY)), str(?toX),                  ?unboundDummy) as ?endX1d)
    bind(if(((?fromX + ?fromW < ?toX) && (?toY + ?toH < ?fromY)), str(?toY+?toH),             ?unboundDummy) as ?endY1d)

    # 2. Horizontal line
    # Quadrant 1: horizontal line when [a] left of [b] and [a] above [b] but overlapping      
    bind(if(((?fromX + ?fromW < ?toX) && (?fromY + ?fromH <= ?toY + ?toH) && (?fromY + ?fromH > ?toY)), str(?fromX + ?fromW),                    ?unboundDummy) as ?startX2a)
    bind(if(((?fromX + ?fromW < ?toX) && (?fromY + ?fromH <= ?toY + ?toH) && (?fromY + ?fromH > ?toY)), str(?toY + ((?fromY + ?fromH) -?toY)/2), ?unboundDummy) as ?startY2a)
    bind(if(((?fromX + ?fromW < ?toX) && (?fromY + ?fromH <= ?toY + ?toH) && (?fromY + ?fromH > ?toY)), str(?toX),                               ?unboundDummy) as ?endX2a)
    bind(if(((?fromX + ?fromW < ?toX) && (?fromY + ?fromH <= ?toY + ?toH) && (?fromY + ?fromH > ?toY)), str(?toY + ((?fromY + ?fromH) -?toY)/2), ?unboundDummy) as ?endY2a)

    # Quadrant 2: horizontal line when [a] right of [b] and [a] above [b] but overlapping
    bind(if(((?toX + ?toW < ?fromX) && (?fromY + ?fromH <= ?toY + ?toH) && (?fromY + ?fromH > ?toY)), str(?fromX),                               ?unboundDummy) as ?startX2b)
    bind(if(((?toX + ?toW < ?fromX) && (?fromY + ?fromH <= ?toY + ?toH) && (?fromY + ?fromH > ?toY)), str(?toY + ((?fromY + ?fromH) -?toY)/2),   ?unboundDummy) as ?startY2b)
    bind(if(((?toX + ?toW < ?fromX) && (?fromY + ?fromH <= ?toY + ?toH) && (?fromY + ?fromH > ?toY)), str(?toX + ?toW),                          ?unboundDummy) as ?endX2b)
    bind(if(((?toX + ?toW < ?fromX) && (?fromY + ?fromH <= ?toY + ?toH) && (?fromY + ?fromH > ?toY)), str(?toY + ((?fromY + ?fromH) -?toY)/2),   ?unboundDummy) as ?endY2b)

    # Quadrant 3: horizontal line when [a] left of [b] and [a] below [b] but overlapping  
    bind(if(((?fromX + ?fromW < ?toX) && (?toY + ?toH <= ?fromY + ?fromH) && (?toY + ?toH > ?fromY)), str(?fromX + ?fromW),                    ?unboundDummy) as ?startX2c)
    bind(if(((?fromX + ?fromW < ?toX) && (?toY + ?toH <= ?fromY + ?fromH) && (?toY + ?toH > ?fromY)), str(?fromY + ((?toY + ?toH) -?fromY)/2), ?unboundDummy) as ?startY2c)
    bind(if(((?fromX + ?fromW < ?toX) && (?toY + ?toH <= ?fromY + ?fromH) && (?toY + ?toH > ?fromY)), str(?toX),                               ?unboundDummy) as ?endX2c)
    bind(if(((?fromX + ?fromW < ?toX) && (?toY + ?toH <= ?fromY + ?fromH) && (?toY + ?toH > ?fromY)), str(?fromY + ((?toY + ?toH) -?fromY)/2), ?unboundDummy) as ?endY2c)

    # Quadrant 4: horizontal line when [a] right of [b] and [a] below [b] but overlapping 
    bind(if(((?toX + ?toW < ?fromX) && (?toY + ?toH <= ?fromY + ?fromH) && (?toY + ?toH > ?fromY)), str(?fromX),                               ?unboundDummy) as ?startX2d)
    bind(if(((?toX + ?toW < ?fromX) && (?toY + ?toH <= ?fromY + ?fromH) && (?toY + ?toH > ?fromY)), str(?fromY + ((?toY + ?toH) -?fromY)/2),   ?unboundDummy) as ?startY2d)
    bind(if(((?toX + ?toW < ?fromX) && (?toY + ?toH <= ?fromY + ?fromH) && (?toY + ?toH > ?fromY)), str(?toX + ?toW),                          ?unboundDummy) as ?endX2d)
    bind(if(((?toX + ?toW < ?fromX) && (?toY + ?toH <= ?fromY + ?fromH) && (?toY + ?toH > ?fromY)), str(?fromY + ((?toY + ?toH) -?fromY)/2),   ?unboundDummy) as ?endY2d)

    # 3. Vertical line
    # Quadrant 1: vertical line when [a] left of [b] and [a] above [b] but overlapping      
    bind(if((?fromX + ?fromW > ?toX) && (?toX + ?toW > ?fromX) && (?fromY + ?fromH < ?toY), str(?toX + ((?fromX + ?fromW) -?toX)/2),                                     ?unboundDummy) as ?startX3a)
    bind(if((?fromX + ?fromW > ?toX) && (?toX + ?toW > ?fromX) && (?fromY + ?fromH < ?toY), str(?fromY + ?fromH),                                                        ?unboundDummy) as ?startY3a)
    bind(if((?fromX + ?fromW > ?toX) && (?toX + ?toW > ?fromX) && (?fromY + ?fromH < ?toY), str(?toX + ((?fromX + ?fromW) -?toX)/2),                                     ?unboundDummy) as ?endX3a)
    bind(if((?fromX + ?fromW > ?toX) && (?toX + ?toW > ?fromX) && (?fromY + ?fromH < ?toY), str(?toY),                                                                   ?unboundDummy) as ?endY3a)

    # Quadrant 2: vertical line when [a] right of [b] and [a] above [b] but overlapping
    bind(if((?toX + ?toW > ?fromX) && (?fromX + ?fromW > ?toX) && (?fromY + ?fromH < ?toY), str(?fromX + ((?toX + ?toW) -?fromX)/2),                                      ?unboundDummy) as ?startX3b)
    bind(if((?toX + ?toW > ?fromX) && (?fromX + ?fromW > ?toX) && (?fromY + ?fromH < ?toY), str(?fromY + ?fromH),                                                         ?unboundDummy) as ?startY3b)
    bind(if((?toX + ?toW > ?fromX) && (?fromX + ?fromW > ?toX) && (?fromY + ?fromH < ?toY), str(?fromX + ((?toX + ?toW) -?fromX)/2),                                      ?unboundDummy) as ?endX3b)
    bind(if((?toX + ?toW > ?fromX) && (?fromX + ?fromW > ?toX) && (?fromY + ?fromH < ?toY), str(?toY),                                                                    ?unboundDummy) as ?endY3b)

    # Quadrant 3: vertical line when [a] left of [b] and [a] below [b] but overlapping
    bind(if((?fromX + ?fromW > ?toX) && (?toX + ?toW > ?fromX) && (?toY + ?toH < ?fromY), str(?toX + ((?fromX + ?fromW) -?toX)/2),                                     ?unboundDummy) as ?startX3c)
    bind(if((?fromX + ?fromW > ?toX) && (?toX + ?toW > ?fromX) && (?toY + ?toH < ?fromY), str(?fromY + ?fromH),                                                        ?unboundDummy) as ?startY3c)
    bind(if((?fromX + ?fromW > ?toX) && (?toX + ?toW > ?fromX) && (?toY + ?toH < ?fromY), str(?toX + ((?fromX + ?fromW) -?toX)/2),                                     ?unboundDummy) as ?endX3c)
    bind(if((?fromX + ?fromW > ?toX) && (?toX + ?toW > ?fromX) && (?toY + ?toH < ?fromY), str(?toY),                                                                   ?unboundDummy) as ?endY3c)

    # Quadrant 4: vertical line when [a] right of [b] and [a] below [b] but overlapping 
    bind(if((?toX + ?toW > ?fromX) && (?fromX + ?fromW > ?toX) && (?toY + ?toH < ?fromY), str(?fromX + ((?toX + ?toW) -?fromX)/2),                                ?unboundDummy) as ?startX3d)
    bind(if((?toX + ?toW > ?fromX) && (?fromX + ?fromW > ?toX) && (?toY + ?toH < ?fromY), str(?fromY),                                                            ?unboundDummy) as ?startY3d)
    bind(if((?toX + ?toW > ?fromX) && (?fromX + ?fromW > ?toX) && (?toY + ?toH < ?fromY), str(?fromX + ((?toX + ?toW) -?fromX)/2),                                ?unboundDummy) as ?endX3d)
    bind(if((?toX + ?toW > ?fromX) && (?fromX + ?fromW > ?toX) && (?toY + ?toH < ?fromY), str(?toY + ?toH),                                                       ?unboundDummy) as ?endY3d)
  }

  bind(concat(str(coalesce(?startX1a,?startX1b,?startX1c,?startX1d,?startX2a,?startX2b,?startX2c,?startX2d,?startX3a,?startX3b,?startX3c,?startX3d,"")), ',', str(coalesce(?startY1a,?startY1b,?startY1c,?startY1d,?startY2a,?startY2b,?startY2c,?startY2d,?startY3a,?startY3b,?startY3c,?startY3d,"")), ' ', str(coalesce(?endX1a,?endX1b,?endX1c,?endX1d,?endX2a,?endX2b,?endX2c,?endX2d,?endX3a,?endX3b,?endX3c,?endX3d, "")), ',', str(coalesce(?endY1a,?endY1b,?endY1c,?endY1d,?endY2a,?endY2b,?endY2c,?endY2d,?endY3a,?endY3b,?endY3c,?endY3d,""))) as ?result)
}
""" .
    
function:getSubElementPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of an archimate element within the set of elements that share the same xsi:type." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:anyURI ;
        sh:description "The element for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

       SELECT ?result WHERE {
       {SELECT ?element (COUNT(?prevElement) + 1 AS ?member)
        WHERE {
          ?element rdf:type archiSVG:Element;
                   xsi:type ?xsiType.
          OPTIONAL {
            ?prevElement rdf:type archiSVG:Element;
                         xsi:type ?xsiType.
            FILTER(str(?prevElement) < str(?element))
          }
        }
        GROUP BY ?element
        ORDER BY ?element
        }
       FILTER (?element = $input)
       BIND(?member as ?result)
      }
        """ .

function:getElementPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of an archimate element within the set of all elements." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:anyURI ;
        sh:description "The element for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

       SELECT ?result WHERE {
       {SELECT ?element (COUNT(?prevElement) + 1 AS ?member)
        WHERE {
          ?element rdf:type archiSVG:Element.
          OPTIONAL {
            ?prevElement rdf:type archiSVG:Element.
            FILTER(str(?prevElement) < str(?element))
          }
        }
        GROUP BY ?element
        ORDER BY ?element
        }
       FILTER (?element = $input)
       BIND(?member as ?result)
      }
        """ .

function:getRelationshipPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of an archimate relationship within the set of all relationships." ;
    sh:parameter [
        sh:path function:relationship ;
        sh:datatype xsd:anyURI ;
        sh:description "The relationship for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

       SELECT ?result WHERE {
       {SELECT $relationship (COUNT(?prevRelationship) + 1 AS ?member)
        WHERE {
          $relationship rdf:type archimate:Relationship.
          OPTIONAL {
            ?prevRelationship rdf:type archimate:Relationship.
            FILTER(str(?prevRelationship) < str($relationship))
          }
        }
        GROUP BY $relationship
        ORDER BY $relationship
        }
       BIND(?member as ?result)
      }
        """ .

function:getModelPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of an archimate model within the set of all models." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:anyURI ;
        sh:description "The model for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

       SELECT ?result WHERE {
       {SELECT ?model (COUNT(?prevModel) + 1 AS ?member)
        WHERE {
          ?model rdf:type archiSVG:Model.
          OPTIONAL {
            ?prevModel rdf:type archiSVG:Model.
            FILTER(str(?prevModel) < str(?model))
          }
        }
        GROUP BY ?model
        ORDER BY ?model
        }
       FILTER (?model = $input)
       BIND(?member as ?result)
      }
        """ .

function:getViewPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of a view node within the set of all views." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:anyURI ;
        sh:description "The view for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archiSVG: <https://data.rijksfinancien.nl/archisvg/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

       SELECT ?result WHERE {
       {SELECT ?view (COUNT(?prevView) + 1 AS ?member)
        WHERE {
          ?view rdf:type archiSVG:View.
          OPTIONAL {
            ?prevView rdf:type archiSVG:View.
            FILTER(str(?prevView) < str(?view))
          }
        }
        GROUP BY ?view
        ORDER BY ?view
        }
       FILTER (?view = $input)
       BIND(?member as ?result)
      }
        """ .

function:escapeXML
    a sh:SPARQLFunction ;
    rdfs:comment "Escapes XML characters in the input string." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:string ;
        sh:description "The input string to escape XML characters from." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """
       SELECT ?result WHERE {
       BIND(replace(
                    replace(
                        replace(
                            replace(
                                replace(
                                    $input,
                                    '&', '&amp;'),
                                '<', '&lt;'),
                            '>', '&gt;'),
                        '\"', '&quot;'),
                    "\'", '&apos;')
                AS ?result).
        }
        """ .