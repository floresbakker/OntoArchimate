prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix dcm: <http://purl.org/dc/dcmitype/>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfa: <http://www.w3.org/ns/rdfa#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix status: <http://purl.org/adms/status/>
prefix vann: <http://purl.org/vocab/vann/>
prefix void: <http://rdfs.org/ns/void#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xml: <http://www.w3.org/XML/1998/namespace#>
prefix xmlns: <http://www.w3.org/2000/xmlns/> 
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance#>

prefix documentType: <https://data.rijksfinancien.nl/dom/model/id/documentType/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix graph: <https://data.rijksfinancien.nl/archimate/graph/>
prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix respec: <https://respec.org/model/>
prefix rule: <https://data.rijksfinancien.nl/archimate/model/rule/>
prefix section: <https://data.rijksfinancien.nl/archimate/id/section/>
prefix shp: <https://data.rijksfinancien.nl/archimate/model/shp/>
prefix standard: <https://data.rijksfinancien.nl/archimate/id/standard/>
prefix target: <https://data.rijksfinancien.nl/archimate/model/target/>

archimate:
    a
      owl:Ontology,
      respec:Ontology,
      void:Dataset;
    dct:created '2024-02-14'^^xsd:date;
    dct:creator
      'Flores Bakker';
    respec:introduction '''
Introduction of archimate vocabulary.
'''@en;
   respec:objective '''Objective of archimate vocabulary'''@en;
    respec:audience '''Audience of archimate vocabulary'''@en;
    dct:description '''Description of archimate vocabulary'''@en;
    dct:abstract '''Abstract of archimate vocabulary'''@en; 
    skos:example """

An example of an archimate model:



This can be represented in RDF using the archimate vocabulary as follows:


""";
    dct:language 'iso639-1:en';
    dct:license 'https://creativecommons.org/licenses/by/4.0/'^^xsd:anyURI;
    dct:publisher <https://www.example.com>;
    dct:status status:UnderDevelopment;
    dct:title 'archimate Core Vocabulary'@en;
    dct:source <https://www.example.com/archimate-vocabulary>;
    foaf:homepage 'https://www.example.com/'^^xsd:anyURI;
    owl:versionInfo '1.0';
    vann:preferredNamespacePrefix 'archimate';
    vann:preferredNamespaceUri 'https://data.rijksfinancien.nl/archimate/model/def/';
    void:uriRegexPattern '^https://data.rijksfinancien.nl/archimate/model/def/';
    void:uriSpace 'https://data.rijksfinancien.nl/xml/archimate/def/'^^xsd:anyURI.


### Logic


shp:Document
    a sh:NodeShape;
    sh:rule rule:Document;
    sh:targetClass archimate:Model;
    skos:prefLabel 'document shape'@en;
    rdfs:isDefinedBy archimate:.

rule:Document
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate document based on an archimate model.'@en;
    skos:prefLabel 'archimate document rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/1998/namespace#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance#>

construct {

  # create the archimate-fragment for the archimate-relationship
  ?document rdf:type archimate:Document;
         rdf:_1 ?model.
  ?model rdf:type archimate:Model;
         xmlns:xsi "http://www.w3.org/2001/XMLSchema-instance" ;
         xsi:schemaLocation "http://www.opengroup.org/xsd/archimate/3.0/ http://www.opengroup.org/xsd/archimate/3.1/archimate3_Model.xsd" ;
         xml:xmlns "http://www.opengroup.org/xsd/archimate/3.0/" ;
         archimate:identifier ?modelIdentifier ;
         archimate:version ?modelVersion ;
         rdf:_1 ?modelNameNode;
         rdf:_2 ?modelDocumentation;
         rdf:_3 ?elementsNode;
         rdf:_4 ?relationshipsNode;
         rdf:_5 ?organizationsNode;
         rdf:_6 ?propertiesNode;
         rdf:_7 ?propertyDefinitionsNode;
         rdf:_8 ?viewsNode.
  ?modelNameNode rdf:type archimate:Name;
         archimate:name ?archimateNameModel;
         xml:lang "en".
  ?modelDocumentation rdf:type archimate:Documentation;
         rdf:_1 ?documentationNameNode.
  ?documentationNameNode rdf:type archimate:Name;
         archimate:name ?archimateNameDocumentation;
         xml:lang "en".
  ?elementsNode rdf:type archimate:Elements.
  ?relationshipsNode rdf:type archimate:Relationships.
  ?organizationsNode rdf:type archimate:Organizations.
  ?propertiesNode rdf:type archimate:Properties.
  ?propertyDefinitionsNode rdf:type archimate:PropertyDefinitions.
  ?viewsNode rdf:type archimate:Views.

} where {

  # Get the archimate model
    $this  skos:prefLabel ?archimateNameModel;
           skos:definition ?archimateNameDocumentation.
    BIND(IRI(CONCAT(STR($this),"-Model")) as ?model)
    BIND(IRI(CONCAT(STR($this),"-ModelName")) as ?modelNameNode)
    BIND(IRI(CONCAT(STR($this),"-Documentation")) as ?modelDocumentation)
    BIND(IRI(CONCAT(STR($this),"-DocumentationName")) as ?documentationNameNode)
    BIND(IRI(CONCAT(STR($this),"-Elements")) as ?elementsNode)
    BIND(IRI(CONCAT(STR($this),"-Relationships")) as ?relationshipsNode)
    BIND(IRI(CONCAT(STR($this),"-Organizations")) as ?organizationsNode)
    BIND(IRI(CONCAT(STR($this),"-Properties")) as ?propertiesNode)
    BIND(IRI(CONCAT(STR($this),"-PropertyDefinitions")) as ?propertyDefinitionsNode)
    BIND(IRI(CONCAT(STR($this),"-Views")) as ?viewsNode)
  }

''';
    rdfs:isDefinedBy archimate:.


  shp:Element
    a sh:NodeShape;
    sh:rule rule:Element;
    sh:targetClass archimate:Element;
    skos:prefLabel 'element shape'@en;
    rdfs:isDefinedBy archimate:.

  rule:Element
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate fragment based on an archimate element.'@en;
    skos:prefLabel 'archimate element rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix prov: <http://www.w3.org/ns/prov#> 
prefix xml: <http://www.w3.org/XML/1998/namespace#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance#>

construct {

  # create the archimate-fragment for the archimate-element to be serialized.
  ?element rdf:type archimate:Element;
           prov:wasDerivedFrom $this;
           archimate:identifier ?identifier;
           xsi:type ?xsiType;
           rdf:_1 ?elementNameNode.
  ?elementNameNode rdf:type archimate:Name;
           archimate:name ?archimateName;
           xml:lang "en".

} where {

  # Get the archimate tag of the archimate-element to be serialized.
  $this rdf:type ?archimateElement;
        skos:prefLabel ?archimateName.
  ?archimateElement rdfs:subClassOf archimate:Element;
        xsi:type ?xsiType.
  BIND(IRI(CONCAT(STR($this),"-Element")) as ?element)
  BIND(IRI(CONCAT(STR($this),"-ElementName")) as ?elementNameNode)
  }

''';
    rdfs:isDefinedBy archimate:.

shp:Relationship
    a sh:NodeShape;
    sh:rule rule:Relationship;
    sh:targetClass archimate:Element;
    skos:prefLabel 'relationship shape'@en;
    rdfs:isDefinedBy archimate:.

rule:Relationship
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate fragment based on an archimate relationship.'@en;
    skos:prefLabel 'archimate relationship rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix xml: <http://www.w3.org/XML/1998/namespace#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance#>

construct {

  # create the archimate-fragment for the archimate-relationship
  ?relationship rdf:type archimate:Relationship;
           xsi:type ?xsiType;
           archimate:source ?source;
           archimate:target ?target;
           rdf:_1 ?relationshipNameNode.
   ?relationshipNameNode rdf:type archimate:Name;
           archimate:name ?archimateName;
           xml:lang "en".
  
} where {

  # Get the archimate metadata of the archimate-relationship
  $this prov:wasDerivedFrom ?element;
        archimate:identifier ?source.
  ?element ?relationship ?relatedElement.
  ?xmlTargetElement prov:wasDerivedFrom ?relatedElement;
                    archimate:identifier ?target.  
  ?relationship rdfs:subPropertyOf archimate:relationship;
    skos:prefLabel ?archimateName;
    xsi:type ?xsiType.
  BIND(IRI(CONCAT(STR(?relationship),"-Relationship")) as ?relationship)
  BIND(IRI(CONCAT(STR(?relationship),"-RelationshipName")) as ?relationshipNameNode)
  }

''';
    rdfs:isDefinedBy archimate:.


shp:ElementConnector
    a sh:NodeShape;
    sh:rule rule:ElementConnector;
    sh:targetClass archimate:Elements;
    skos:prefLabel 'archimate elements shape'@en;
    rdfs:isDefinedBy archimate:.

rule:ElementConnector
    a sh:SPARQLRule;
    rdfs:comment 'A rule that connects all archimate elements with the elements node in an archimate document.'@en;
    skos:prefLabel 'archimate element connector rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix xml: <http://www.w3.org/XML/1998/namespace#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance#>

construct {

  # create the archimate-fragment for the archimate-relationship
  
  $this ?rdf_member ?element.
  

} where {
  ?element rdf:type archimate:Element.
  BIND(IRI(CONCAT(str(rdf:),"_", str(function:getElementPosition(?element)))) as ?rdf_member)  
  }
''';
    rdfs:isDefinedBy archimate:.

shp:RelationshipConnector
    a sh:NodeShape;
    sh:rule rule:RelationshipConnector;
    sh:targetClass archimate:Relationships;
    skos:prefLabel 'archimate relationships shape'@en;
    rdfs:isDefinedBy archimate:.

rule:RelationshipConnector
    a sh:SPARQLRule;
    rdfs:comment 'A rule that connects all individual archimate relationships with the relationships node in an archimate document.'@en;
    skos:prefLabel 'archimate relationship connector rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix xml: <http://www.w3.org/XML/1998/namespace#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance#>

construct {

  # create the archimate-fragment for the archimate-relationship
  
  $this ?rdf_member ?relationship.
  

} where {
  ?relationship rdf:type archimate:Relationship.
  BIND(IRI(CONCAT(str(rdf:),"_", str(function:getRelationshipPosition(?relationship)))) as ?rdf_member)  
  }
''';
    rdfs:isDefinedBy archimate:.


shp:ElementIdentifier
    a sh:NodeShape;
    sh:rule rule:ElementIdentifier;
    sh:targetClass archimate:Element;
    skos:prefLabel 'Element Identifier shape'@en;
    rdfs:isDefinedBy archimate:.

rule:ElementIdentifier
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate identifier for an archimate element'@en;
    skos:prefLabel 'archimate element identifier rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix xml: <http://www.w3.org/XML/1998/namespace#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance#>

construct {

  # create the archimate-fragment for the archimate-relationship
  
  $this archimate:identifier ?identifier .
  

} where {
  $this xsi:type ?xsiType.
  BIND(CONCAT(?xsiType, str(function:getSubElementPosition($this))) as ?identifier)  
  }
''';
    rdfs:isDefinedBy archimate:.

function:getSubElementPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of an archimate element within the set of elements that share the same xsi:type." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:anyURI ;
        sh:description "The element for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix xml: <http://www.w3.org/XML/1998/namespace#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance#>

       SELECT ?result WHERE {
       {SELECT ?element (COUNT(?prevElement) + 1 AS ?member)
        WHERE {
          ?element rdf:type archimate:Element;
                   xsi:type ?xsiType.
          OPTIONAL {
            ?prevElement rdf:type archimate:Element;
                         xsi:type ?xsiType.
            FILTER(str(?prevElement) < str(?element))
          }
        }
        GROUP BY ?element
        ORDER BY ?element
        }
       FILTER (?element = $input)
       BIND(?member as ?result)
      }
        """ .

function:getElementPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of an archimate element within the set of all elements." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:anyURI ;
        sh:description "The element for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix xml: <http://www.w3.org/XML/1998/namespace#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance#>

       SELECT ?result WHERE {
       {SELECT ?element (COUNT(?prevElement) + 1 AS ?member)
        WHERE {
          ?element rdf:type archimate:Element.
          OPTIONAL {
            ?prevElement rdf:type archimate:Element.
            FILTER(str(?prevElement) < str(?element))
          }
        }
        GROUP BY ?element
        ORDER BY ?element
        }
       FILTER (?element = $input)
       BIND(?member as ?result)
      }
        """ .

function:getRelationshipPosition
    a sh:SPARQLFunction ;
    rdfs:comment "Returns alphabetical position of an archimate relationship within the set of all relationships." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:anyURI ;
        sh:description "The relationship for which the position has to be returned." ;
    ] ;
    sh:returnType xsd:integer ;
    sh:select """

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix xml: <http://www.w3.org/XML/1998/namespace#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance#>

       SELECT ?result WHERE {
       {SELECT ?relationship (COUNT(?prevRelationship) + 1 AS ?member)
        WHERE {
          ?relationship rdf:type archimate:Relationship.
          OPTIONAL {
            ?prevRelationship rdf:type archimate:Relationship.
            FILTER(str(?prevRelationship) < str(?relationship))
          }
        }
        GROUP BY ?relationship
        ORDER BY ?relationship
        }
       FILTER (?relationship = $input)
       BIND(?member as ?result)
      }
        """ .