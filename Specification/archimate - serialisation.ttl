prefix archiXML:  <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dcm:       <http://purl.org/dc/dcmitype/>
prefix dct:       <http://purl.org/dc/terms/>
prefix foaf:      <http://xmlns.com/foaf/0.1/>
prefix function:  <https://data.rijksfinancien.nl/archimate/model/function/>
prefix owl:       <http://www.w3.org/2002/07/owl#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfa:      <http://www.w3.org/ns/rdfa#>
prefix rdfs:      <http://www.w3.org/2000/01/rdf-schema#>
prefix sh:        <http://www.w3.org/ns/shacl#>
prefix skos:      <http://www.w3.org/2004/02/skos/core#>
prefix status:    <http://purl.org/adms/status/>
prefix vann:      <http://purl.org/vocab/vann/>
prefix void:      <http://rdfs.org/ns/void#>
prefix xsd:       <http://www.w3.org/2001/XMLSchema#>
prefix xml:       <http://www.w3.org/XML/model/def/>
prefix xmlns:     <http://www.w3.org/2000/xmlns/model/def/> 
prefix xsi:       <http://www.w3.org/2001/XMLSchema-instance/model/def/>

prefix graph:     <https://data.rijksfinancien.nl/archimate/graph/>
prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix respec:    <https://respec.org/model/def/>
prefix rule:      <https://data.rijksfinancien.nl/archimate/model/rule/>
prefix section:   <https://data.rijksfinancien.nl/archimate/id/section/>
prefix shp:       <https://data.rijksfinancien.nl/archimate/model/shp/>
prefix standard:  <https://data.rijksfinancien.nl/archimate/id/standard/>
prefix target:    <https://data.rijksfinancien.nl/archimate/model/target/>

archimate:
    a
      owl:Ontology,
      respec:Ontology,
      void:Dataset;
    dct:created '2024-02-14'^^xsd:date;
    dct:creator
      'Flores Bakker';
    respec:introduction '''
Introduction of archimate serialisation vocabulary.
'''@en;
    respec:objective '''Objective of archimate serialisation vocabulary'''@en;
    respec:audience  '''Audience of archimate serialisation vocabulary'''@en;
    dct:description  '''Description of archimate serialisation vocabulary'''@en;
    dct:abstract     '''Abstract of archimate serialisation vocabulary'''@en; 
    skos:example """

""";
    dct:language 'iso639-1:en';
    dct:license 'https://creativecommons.org/licenses/by/4.0/'^^xsd:anyURI;
    dct:publisher <https://www.example.com>;
    dct:status status:UnderDevelopment;
    dct:title 'Archimate Core Vocabulary'@en;
    dct:source <https://www.example.com/archimate-vocabulary>;
    foaf:homepage 'https://www.example.com/'^^xsd:anyURI;
    owl:versionInfo '1.0';
    vann:preferredNamespacePrefix 'archimate';
    vann:preferredNamespaceUri 'https://data.rijksfinancien.nl/archimate/model/def/';
    void:uriRegexPattern '^https://data.rijksfinancien.nl/archimate/model/def/';
    void:uriSpace 'https://data.rijksfinancien.nl/xml/archimate/def/'^^xsd:anyURI.

### Logic


shp:Document
    a sh:NodeShape;
    sh:rule rule:Document;
    sh:targetClass archiXML:Document;
    skos:prefLabel 'Model shape'@en;
    rdfs:isDefinedBy archimate:.

rule:Document
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate representation in RDF based on an RDF-based archimate model in XML.'@en;
    skos:prefLabel 'archimate document rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>

construct {

  ?model rdf:type archimate:Model;
         skos:prefLabel ?modelName;
         skos:definition ?modelDefinition;
         rdfs:isDefinedBy ?model;
         prov:wasDerivedFrom $this.

} where {

    # Get the archiXML Document & Model
    $this  rdf:type archiXML:Document;
           ?member ?modelArchiXML.
    ?modelArchiXML rdf:type archiXML:Model;
           ?memberName ?modelNameNode.
    ?modelNameNode rdf:type archiXML:Name;
                   rdf:_1 ?modelNameTextNode.
    ?modelNameTextNode rdf:type archiXML:Text;
                   xml:fragment ?modelName.

    # Establish definition
    optional {
    ?modelArchiXML ?memberDoc ?documentationNode.
    ?documentationNode rdf:type archiXML:Documentation;
                       rdf:_1 ?documentationTextNode.
    ?documentationTextNode rdf:type archiXML:Text;
                         xml:fragment ?definition.}
    bind(coalesce(?definition, "An archimate model") as ?modelDefinition)

    # Create IRI's    
    BIND(IRI(CONCAT(STR(?modelArchiXML), "-Archimate")) as ?model)

  }

''';
    rdfs:isDefinedBy archiXML:.


  shp:Element
    a sh:NodeShape;
    sh:rule rule:Element;
    sh:targetClass archiXML:Element;
    skos:prefLabel 'element shape'@en;
    rdfs:isDefinedBy archimate:.

  rule:Element
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate element based on an element.'@en;
    skos:prefLabel 'archimate element rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  ?element rdf:type ?elementClass;
           skos:prefLabel ?elementName;
           skos:definition ?elementDefinition;
           rdfs:isDefinedBy ?model;
           prov:wasDerivedFrom $this.

} where {

  # Get the archimate metadata of the archimate element to be serialized.
  
  $this xsi:type ?xsiType;
        ?memberName ?elementNameNode.
  ?elementNameNode rdf:type archiXML:Name;
        rdf:_1 ?elementNameTextNode.
  ?elementNameTextNode rdf:type archiXML:Text;
        xml:fragment ?elementName.

  ?elementsNode ?member $this.
  ?documentModel ?modelMember ?elementsNode.
  ?document ?docMember ?documentModel.
  ?model prov:wasDerivedFrom ?document.

  optional {
  $this ?memberDoc ?documentationNode.
  ?documentationNode rdf:type archiXML:Documentation;
                     rdf:_1 ?documentationTextNode.
  ?documentationTextNode rdf:type archiXML:Text;
                         xml:fragment ?definition.}  
  bind(coalesce(?definition, "An archimate element") as ?elementDefinition)

  # Create IRI's
  BIND(IRI(CONCAT(STR(archimate:), ?xsiType)) as ?elementClass)
  BIND(IRI(CONCAT(STR($this),  '-Archimate')) as ?element)
  }

''';
    rdfs:isDefinedBy archiXML:.

shp:Relationship
    a sh:NodeShape;
    sh:rule rule:Relationship;
    sh:targetClass archiXML:Relationship;
    skos:prefLabel 'relationship shape'@en;
    rdfs:isDefinedBy archimate:.   

rule:Relationship
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate relationship based on an XML document.'@en;
    skos:prefLabel 'archimate relationship rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  ?relationship rdf:type archimate:Relationship;
           skos:prefLabel ?relationshipName;
           skos:definition ?definition;
           archimate:relationship ?relationtype;
           archimate:from ?source;
           archimate:to ?target;
           rdfs:isDefinedBy ?model;
           prov:wasDerivedFrom $this.

} where {

  # Get the archimate metadata of the archiXML relationship
 
  $this rdf:type archiXML:Relationship.
  
  ?relationshipsNode ?member $this.
  ?documentModel ?modelMember ?relationshipsNode.
  ?document ?docMember ?documentModel.
  ?model prov:wasDerivedFrom ?document.

  optional{
  $this ?memberName ?relationshipNameNode.
  ?relationshipNameNode rdf:type archiXML:Name;
        rdf:_1 ?relationshipNameTextNode.
  ?relationshipNameTextNode rdf:type archiXML:Text;
        xml:fragment ?relationshipName.}
 
  $this archiXML:target ?targetIdentifier;
        archiXML:source ?sourceIdentifier;
        xsi:type ?xsiType.
   
  ?sourceNode archiXML:identifier ?sourceIdentifier.
  ?targetNode archiXML:identifier ?targetIdentifier.
  ?relationtype dct:identifier ?xsiType.
  
  optional{
  $this ?memberDoc ?documentationNode.
  ?documentationNode rdf:type archiXML:Documentation;
                     rdf:_1 ?documentationTextNode.
  ?documentationTextNode rdf:type archiXML:Text;
                         xml:fragment ?definition.}                       

  # Create IRI's
  BIND(IRI(CONCAT(STR(?sourceNode),  '-Archimate')) as ?source)
  BIND(IRI(CONCAT(STR(?targetNode),  '-Archimate')) as ?target)
  BIND(IRI(CONCAT(STR($this),        '-Archimate')) as ?relationship)
  
  }

''';
    rdfs:isDefinedBy archimate:.

shp:RelationshipLabel
    a sh:NodeShape;
    sh:rule rule:RelationshipLabel;
    sh:target target:RelationshipLabel;
    skos:prefLabel 'relationship label shape'@en;
    rdfs:isDefinedBy archimate:.   

target:RelationshipLabel
    a sh:SPARQLTarget;
    rdfs:comment 'Select all elements in the model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

select $this {

  # Select all relationships without a prefLabel.
  $this rdf:type archimate:Relationship.
  filter not exists {
    $this skos:prefLabel []
    }    
  }
''';
    rdfs:isDefinedBy archiXML:.

rule:RelationshipLabel
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a label for an archimate relationship.'@en;
    skos:prefLabel 'archimate relationship label rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  $this skos:prefLabel ?label.
  
} where {

  # Get the archimate metadata of the archiXML relationship
 
  $this rdf:type archimate:Relationship;
        archimate:relationship ?relationtype;
        archimate:from ?source;
        archimate:to ?target.
        
  ?relationtype skos:prefLabel ?relationshipName.
  ?source skos:prefLabel ?sourceLabel.
  ?target skos:prefLabel ?targetLabel.
  
  bind(concat(?relationshipName, ' (', ?sourceLabel, ' - ', ?targetLabel, ')') as ?label)
  
  }

''';
    rdfs:isDefinedBy archimate:.


shp:RelationshipDefinition
    a sh:NodeShape;
    sh:rule rule:RelationshipDefinition;
    sh:target target:RelationshipDefinition;
    skos:prefLabel 'relationship definition shape'@en;
    rdfs:isDefinedBy archimate:.   

target:RelationshipDefinition
    a sh:SPARQLTarget;
    rdfs:comment 'Select all relationships in the model without a skos definition.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>


select $this {

  # Select all relationships without a definition.
  $this rdf:type archimate:Relationship.
  filter not exists {
    $this skos:definition []
    }
  }
''';
    rdfs:isDefinedBy archiXML:.

rule:RelationshipDefinition
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a definition for an archimate relationship.'@en;
    skos:prefLabel 'archimate relationship definition rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>


construct {

  $this skos:definition ?definition.
  
} where {

  # Get the archimate metadata of the archiXML relationship
 
  $this rdf:type archimate:Relationship;
        archimate:relationship ?relationtype;
        archimate:from ?source;
        archimate:to ?target.
        
  ?relationtype skos:prefLabel ?relationshipName.
  ?source skos:prefLabel ?sourceLabel.
  ?target skos:prefLabel ?targetLabel.
  
  bind(concat(?relationshipName, ' from "', ?sourceLabel, '" to "', ?targetLabel, '"') as ?definition)
  
  }

''';
    rdfs:isDefinedBy archimate:.

shp:View
    a sh:NodeShape;
    sh:rule rule:View;
    sh:targetClass archiXML:View;
    skos:prefLabel 'view shape'@en;
    rdfs:isDefinedBy archimate:.
    
    
rule:View
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate view based on an XML document.'@en;
    skos:prefLabel 'archimate view rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>

construct {

  ?view rdf:type archimate:View;
        skos:prefLabel ?viewName;
        skos:definition ?viewDefinition;
        rdfs:isDefinedBy ?model;
        prov:wasDerivedFrom $this.
             
} where {

  # Get the archimate metadata of the archiXML relationship
 
  $this rdf:type archiXML:View;
        ?memberView ?viewNameNode.
  ?viewNameNode rdf:type archiXML:Name;
        rdf:_1 ?viewNameTextNode.
  ?viewNameTextNode rdf:type archiXML:Text;
        xml:fragment ?viewName.

  ?diagramNode ?memberViews $this.
  ?viewsNode ?memberDiagram ?diagramNode.
  ?documentModel ?modelMember ?viewsNode.
  ?document ?docMember ?documentModel.
  ?model prov:wasDerivedFrom ?document.

  optional {
  $this ?memberDoc ?documentationNode.
  ?documentationNode rdf:type archiXML:Documentation;
                     rdf:_1 ?documentationTextNode.
  ?documentationTextNode rdf:type archiXML:Text;
                         xml:fragment ?definition.}
  bind(coalesce(?definition, "An archimate view") as ?viewDefinition)
  bind(iri(concat(str($this), '-Archimate')) as ?view)
  }
''';
    rdfs:isDefinedBy archimate:.
    
shp:ViewNodeCreatorElement
    a sh:NodeShape;
    sh:rule rule:ViewNodeCreatorElement;
    sh:target target:ViewNodeCreatorElement;
    skos:prefLabel 'view node creator element shape'@en;
    rdfs:isDefinedBy archimate:.

target:ViewNodeCreatorElement
    a sh:SPARQLTarget;
    rdfs:comment 'Select all element nodes in the XML document that have to be processed into a view node belonging to an archimate model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML:  <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs:      <http://www.w3.org/2000/01/rdf-schema#>
prefix skos:      <http://www.w3.org/2004/02/skos/core#>
prefix xsi:       <http://www.w3.org/2001/XMLSchema-instance/model/def/>

select $this {

  # Select all archiXML nodes describing an element.
  $this rdf:type archiXML:Node;
        xsi:type "Element".
  
  # ...that have not been processed yet
  filter not exists {
  ?viewNode rdf:type archimate:ViewNode;
            prov:wasDerivedFrom $this.
  }
  
  # ...but only when its archiXML elements have been processed into archimate elements
  filter not exists {
    $this archiXML:elementRef ?identifier.
    ?archiXML_Element archiXML:identifier ?identifier.

    filter not exists {
      ?archimate_Element prov:wasDerivedFrom ?archiXML_Element;
                         rdf:type/rdfs:subClassOf* archimate:Element.
    }
  }
}
''';
    rdfs:isDefinedBy archiXML:.
    
rule:ViewNodeCreatorElement
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate view node of an element as part of an archimate view.'@en;
    skos:prefLabel 'archimate view node creator element rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML:  <https://data.rijksfinancien.nl/archixml/model/def/>
prefix foaf:      <http://xmlns.com/foaf/0.1/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs:      <http://www.w3.org/2000/01/rdf-schema#>
prefix skos:      <http://www.w3.org/2004/02/skos/core#>
prefix xml:       <http://www.w3.org/XML/model/def/>
prefix xsi:       <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  # create the archimate view node
  ?viewNode rdf:type archimate:ViewNode;
        skos:prefLabel ?nodeLabel;
        foaf:depicts ?archimate_Element;
        rdfs:isDefinedBy ?model;
        prov:wasDerivedFrom $this;
        archimate:horizontal ?x;
        archimate:vertical   ?y;
        archimate:height     ?h;
        archimate:width      ?w;
        archimate:fillColor  ?fillColorIRI;
        archimate:lineColor  ?lineColorIRI;
        archimate:font       ?fontIRI.
  
  ?fillColorIRI rdf:type archimate:Color;
    archimate:red   ?fillColorR;
    archimate:green ?fillColorG;
    archimate:blue  ?fillColorB;
    archimate:alpha ?fillColorA;
    rdfs:isDefinedBy ?model. 

  ?lineColorIRI rdf:type archimate:Color;
    archimate:red   ?lineColorR;
    archimate:green ?lineColorG;
    archimate:blue  ?lineColorB;
    archimate:alpha ?lineColorA;
    rdfs:isDefinedBy ?model. 

  ?fontIRI rdf:type archimate:Font;
    archimate:fontName ?fontName;
    archimate:fontSize ?fontSize;
    archimate:fontColor ?fontColorIRI;
    rdfs:isDefinedBy ?model.

  ?fontColorIRI rdf:type archimate:Color;
    archimate:red   ?fontColorR;
    archimate:green ?fontColorG;
    archimate:blue  ?fontColorB;
    rdfs:isDefinedBy ?model.     

} where {
  
  # In a view, each node is expected to have coordinates
  $this archiXML:x ?x;
        archiXML:y ?y;
        archiXML:h ?h;
        archiXML:w ?w.
  
  # Get metadata for element
  $this
      archiXML:elementRef ?identifier.  
      ?archiXML_Element archiXML:identifier ?identifier.
      ?archimate_Element prov:wasDerivedFrom ?archiXML_Element;
                         rdfs:isDefinedBy ?model;
                         skos:prefLabel ?elementLabel.  

  # Style is optional                    
  optional {
  $this ?memberStyle ?style.
  ?style     rdf:type archiXML:Style;
             ?styleFillColorMember ?fillColor;
             ?styleLineColorMember ?lineColor;
             ?styleFontMember      ?font.
  ?fillColor rdf:type archiXML:FillColor;
             archiXML:r ?fillColorR;
             archiXML:g ?fillColorG;             
             archiXML:b ?fillColorB;
             archiXML:a ?fillColorA.
  ?lineColor rdf:type archiXML:LineColor;
             archiXML:r ?lineColorR;
             archiXML:g ?lineColorG;             
             archiXML:b ?lineColorB;
             archiXML:a ?lineColorA.             
  ?font      rdf:type archiXML:Font;
             archiXML:name ?fontName;
             archiXML:size ?fontSize;
             ?fontMember   ?fontColor.
  ?fontColor rdf:type archiXML:Color;             
             archiXML:r ?fontColorR;
             archiXML:g ?fontColorG;             
             archiXML:b ?fontColorB.  
  }          

  # Establish a node label
  BIND(CONCAT('A depiction of ',?elementLabel) as ?nodeLabel)
  
  # Create IRI's
  BIND(IRI(CONCAT(STR($this),  '-Archimate'))           as ?viewNode)
  BIND(IRI(CONCAT(STR($this),  '-Archimate_FillColor')) as ?fillColorIRI)
  BIND(IRI(CONCAT(STR($this),  '-Archimate_LineColor')) as ?lineColorIRI)
  BIND(IRI(CONCAT(STR($this),  '-Archimate_Font'))      as ?fontIRI)
  BIND(IRI(CONCAT(STR($this),  '-Archimate_FontColor')) as ?fontColorIRI)

  }
''';
    rdfs:isDefinedBy archimate:.
    
shp:ViewNodeCreatorContainer
    a sh:NodeShape;
    sh:rule rule:ViewNodeCreatorContainer;
    sh:target target:ViewNodeCreatorContainer;
    skos:prefLabel 'view node creator container shape'@en;
    rdfs:isDefinedBy archimate:.

target:ViewNodeCreatorContainer
    a sh:SPARQLTarget;
    rdfs:comment 'Select all container nodes in the XML document that have to be processed into a view node belonging to an archimate model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML:  <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs:      <http://www.w3.org/2000/01/rdf-schema#>
prefix skos:      <http://www.w3.org/2004/02/skos/core#>
prefix xsi:       <http://www.w3.org/2001/XMLSchema-instance/model/def/>

select $this {

  # Select all archiXML nodes describing an container.
  $this rdf:type archiXML:Node;
        xsi:type "Container".
  
  # ...that have not been processed yet
  filter not exists {
  ?viewNode rdf:type archimate:ViewNode;
            prov:wasDerivedFrom $this.
  }
}
''';
    rdfs:isDefinedBy archiXML:.
    
rule:ViewNodeCreatorContainer
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate view node of a container as part of an archimate view.'@en;
    skos:prefLabel 'archimate view node creator container rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML:  <https://data.rijksfinancien.nl/archixml/model/def/>
prefix foaf:      <http://xmlns.com/foaf/0.1/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs:      <http://www.w3.org/2000/01/rdf-schema#>
prefix skos:      <http://www.w3.org/2004/02/skos/core#>
prefix xml:       <http://www.w3.org/XML/model/def/>
prefix xsi:       <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  # create the archimate view node
  ?viewNode rdf:type archimate:Container;
        skos:prefLabel ?nodeLabel;
        rdfs:comment 'A container within an archimate view node.';
        prov:wasDerivedFrom $this;
        archimate:horizontal ?x;
        archimate:vertical   ?y;
        archimate:height     ?h;
        archimate:width      ?w;
        archimate:fillColor  ?fillColorIRI;
        archimate:lineColor  ?lineColorIRI;
        archimate:font       ?fontIRI.
  
  ?fillColorIRI rdf:type archimate:Color;
    archimate:red   ?fillColorR;
    archimate:green ?fillColorG;
    archimate:blue  ?fillColorB;
    archimate:alpha ?fillColorA.

  ?lineColorIRI rdf:type archimate:Color;
    archimate:red   ?lineColorR;
    archimate:green ?lineColorG;
    archimate:blue  ?lineColorB;
    archimate:alpha ?lineColorA. 

  ?fontIRI rdf:type archimate:Font;
    archimate:fontName  ?fontName;
    archimate:fontSize  ?fontSize;
    archimate:fontColor ?fontColorIRI.

  ?fontColorIRI rdf:type archimate:Color;
    archimate:red   ?fontColorR;
    archimate:green ?fontColorG;
    archimate:blue  ?fontColorB.     

} where {
  
  # In a view, each node is expected to have coordinates.
  $this archiXML:x ?x;
        archiXML:y ?y;
        archiXML:h ?h;
        archiXML:w ?w.
  
  # Get required label of the container.
    $this 
      ?memberLabel ?label.
    filter(strstarts(str(?memberLabel), concat(str(rdf:), '_')))
    ?label rdf:type archiXML:Label;
           rdf:_1 ?labelTextNode.
    ?labelTextNode rdf:type archiXML:Text;
                   xml:fragment ?otherLabel. 

  # Style is optional.                  
  optional {
  $this ?memberStyle ?style.
  ?style     rdf:type archiXML:Style;
             ?styleFillColorMember ?fillColor;
             ?styleLineColorMember ?lineColor;
             ?styleFontMember      ?font.
  ?fillColor rdf:type archiXML:FillColor;
             archiXML:r ?fillColorR;
             archiXML:g ?fillColorG;             
             archiXML:b ?fillColorB;
             archiXML:a ?fillColorA.
  ?lineColor rdf:type archiXML:LineColor;
             archiXML:r ?lineColorR;
             archiXML:g ?lineColorG;             
             archiXML:b ?lineColorB;
             archiXML:a ?lineColorA.             
  ?font      rdf:type archiXML:Font;
             archiXML:name ?fontName;
             archiXML:size ?fontSize;
             ?fontMember   ?fontColor.
  ?fontColor rdf:type archiXML:Color;             
             archiXML:r ?fontColorR;
             archiXML:g ?fontColorG;             
             archiXML:b ?fontColorB.  
  }          

  # Establish a node label
  BIND(CONCAT('Container: ',?otherLabel) as ?nodeLabel)

  # Create IRI's
  BIND(IRI(CONCAT(STR($this),  '-Archimate'))           as ?viewNode)
  BIND(IRI(CONCAT(STR($this),  '-Archimate_FillColor')) as ?fillColorIRI)
  BIND(IRI(CONCAT(STR($this),  '-Archimate_LineColor')) as ?lineColorIRI)
  BIND(IRI(CONCAT(STR($this),  '-Archimate_Font'))      as ?fontIRI)
  BIND(IRI(CONCAT(STR($this),  '-Archimate_FontColor')) as ?fontColorIRI)

  }
''';
    rdfs:isDefinedBy archimate:.

shp:ViewNodeCreatorLabel
    a sh:NodeShape;
    sh:rule rule:ViewNodeCreatorLabel;
    sh:target target:ViewNodeCreatorLabel;
    skos:prefLabel 'view node creator label shape'@en;
    rdfs:isDefinedBy archimate:.

target:ViewNodeCreatorLabel
    a sh:SPARQLTarget;
    rdfs:comment 'Select all label nodes in the XML document that have to be processed into a view node belonging to an archimate model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML:  <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs:      <http://www.w3.org/2000/01/rdf-schema#>
prefix skos:      <http://www.w3.org/2004/02/skos/core#>
prefix xsi:       <http://www.w3.org/2001/XMLSchema-instance/model/def/>

select $this {

  # Select all archiXML nodes describing an container.
  $this rdf:type archiXML:Node;
        xsi:type "Label".
  
  # ...that have not been processed yet
  filter not exists {
  ?viewNode rdf:type archimate:ViewNode;
            prov:wasDerivedFrom $this.
  }
}
''';
    rdfs:isDefinedBy archiXML:.
    
rule:ViewNodeCreatorLabel
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate view node of a label as part of an archimate view.'@en;
    skos:prefLabel 'archimate view node creator label rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML:  <https://data.rijksfinancien.nl/archixml/model/def/>
prefix foaf:      <http://xmlns.com/foaf/0.1/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs:      <http://www.w3.org/2000/01/rdf-schema#>
prefix skos:      <http://www.w3.org/2004/02/skos/core#>
prefix xml:       <http://www.w3.org/XML/model/def/>
prefix xsi:       <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  # create the archimate view node
  ?viewNode rdf:type archimate:Note;
        skos:prefLabel ?nodeLabel;
        rdfs:comment 'A label within an archimate view node.';
        prov:wasDerivedFrom $this;
        archimate:horizontal ?x;
        archimate:vertical   ?y;
        archimate:height     ?h;
        archimate:width      ?w;
        archimate:fillColor  ?fillColorIRI;
        archimate:lineColor  ?lineColorIRI;
        archimate:font       ?fontIRI.
  
  ?fillColorIRI rdf:type archimate:Color;
    archimate:red   ?fillColorR;
    archimate:green ?fillColorG;
    archimate:blue  ?fillColorB;
    archimate:alpha ?fillColorA.

  ?lineColorIRI rdf:type archimate:Color;
    archimate:red   ?lineColorR;
    archimate:green ?lineColorG;
    archimate:blue  ?lineColorB;
    archimate:alpha ?lineColorA. 

  ?fontIRI rdf:type archimate:Font;
    archimate:fontName  ?fontName;
    archimate:fontSize  ?fontSize;
    archimate:fontColor ?fontColorIRI.

  ?fontColorIRI rdf:type archimate:Color;
    archimate:red   ?fontColorR;
    archimate:green ?fontColorG;
    archimate:blue  ?fontColorB.     

} where {
  
  # In a view, each node is expected to have coordinates.
  $this archiXML:x ?x;
        archiXML:y ?y;
        archiXML:h ?h;
        archiXML:w ?w.
  
  # Get required label of the label node.
  $this 
      ?memberLabel ?label.
  filter(strstarts(str(?memberLabel), concat(str(rdf:), '_')))
  ?label rdf:type archiXML:Label;
         rdf:_1 ?labelTextNode.
  ?labelTextNode rdf:type archiXML:Text;
                 xml:fragment ?otherLabel. 

  # Style is optional                    
  optional {
  $this ?memberStyle ?style.
  ?style     rdf:type archiXML:Style;
             ?styleFillColorMember ?fillColor;
             ?styleLineColorMember ?lineColor;
             ?styleFontMember      ?font.
  ?fillColor rdf:type archiXML:FillColor;
             archiXML:r ?fillColorR;
             archiXML:g ?fillColorG;             
             archiXML:b ?fillColorB;
             archiXML:a ?fillColorA.
  ?lineColor rdf:type archiXML:LineColor;
             archiXML:r ?lineColorR;
             archiXML:g ?lineColorG;             
             archiXML:b ?lineColorB;
             archiXML:a ?lineColorA.             
  ?font      rdf:type archiXML:Font;
             archiXML:name ?fontName;
             archiXML:size ?fontSize;
             ?fontMember   ?fontColor.
  ?fontColor rdf:type archiXML:Color;             
             archiXML:r ?fontColorR;
             archiXML:g ?fontColorG;             
             archiXML:b ?fontColorB.  
  }

  # Establish a node label
  BIND(CONCAT('Label: ',?otherLabel) as ?nodeLabel)  

  # Create IRI's
  BIND(IRI(CONCAT(STR($this),  '-Archimate'))           as ?viewNode)
  BIND(IRI(CONCAT(STR($this),  '-Archimate_FillColor')) as ?fillColorIRI)
  BIND(IRI(CONCAT(STR($this),  '-Archimate_LineColor')) as ?lineColorIRI)
  BIND(IRI(CONCAT(STR($this),  '-Archimate_Font'))      as ?fontIRI)
  BIND(IRI(CONCAT(STR($this),  '-Archimate_FontColor')) as ?fontColorIRI)

  }
''';
    rdfs:isDefinedBy archimate:.

shp:ConnectionDepiction
    a sh:NodeShape;
    sh:rule rule:ConnectionDepiction;
    sh:target target:ConnectionDepiction;
    skos:prefLabel 'connection depiction shape'@en;
    rdfs:isDefinedBy archimate:.

target:ConnectionDepiction
    a sh:SPARQLTarget;
    rdfs:comment 'Select all connections in the XML document that have to be processed into a archimate connection belonging to an archimate view.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML:  <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs:      <http://www.w3.org/2000/01/rdf-schema#>
prefix skos:      <http://www.w3.org/2004/02/skos/core#>
prefix xsi:       <http://www.w3.org/2001/XMLSchema-instance/model/def/>

select $this {

  # Select all archiXML connections...
  $this rdf:type archiXML:Connection.

  # ...that have not been processed yet
  filter not exists {
  ?relationshipDepiction rdf:type archimate:Connection;
                         prov:wasDerivedFrom $this.
  }
}
''';
    rdfs:isDefinedBy archiXML:.
    
rule:ConnectionDepiction
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate depiction connection as part of an archimate view.'@en;
    skos:prefLabel 'archimate connection depiction rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the depiction of an archimate relationship
  
  ?relationshipDepiction 
    rdf:type archimate:Connection;
    skos:prefLabel ?depictionLabel;
    foaf:depicts ?archimate_Relationship;
    archimate:lineColor  ?lineColorIRI;
    archimate:font       ?fontIRI;
    prov:wasDerivedFrom $this;
    rdfs:isDefinedBy ?model.    
  
  ?lineColorIRI 
    rdf:type archimate:Color;
    archimate:red   ?lineColorR;
    archimate:green ?lineColorG;
    archimate:blue  ?lineColorB;
    prov:wasDerivedFrom ?lineColor;    
    rdfs:isDefinedBy ?model. 

  ?fontIRI 
    rdf:type archimate:Font;
    archimate:fontName  ?fontName;
    archimate:fontSize  ?fontSize;
    archimate:fontColor ?fontColorIRI;
    prov:wasDerivedFrom ?font;    
    rdfs:isDefinedBy ?model.

  ?fontColorIRI 
    rdf:type archimate:Color;
    archimate:red   ?fontColorR;
    archimate:green ?fontColorG;
    archimate:blue  ?fontColorB;
    prov:wasDerivedFrom ?fontColor;    
    rdfs:isDefinedBy ?model.

  ?bendPointListItem
    rdf:type rdf:List;
    skos:prefLabel 'List of bendpoints';
    skos:definition 'List of bendpoints for an archimate view';
    rdf:first ?bendPointIRI.
    
  ?bendPointIRI
    rdf:type archimate:BendPoint;    
    archimate:horizontal ?x;
    archimate:vertical   ?y;
    prov:wasDerivedFrom ?bendPoint;
    rdfs:isDefinedBy ?model.    

} where {
  
  $this archiXML:relationshipRef ?identifier.
  ?archiXML_Relationship archiXML:identifier ?identifier.
  ?archimate_Relationship prov:wasDerivedFrom ?archiXML_Relationship;
                          rdfs:isDefinedBy ?model;
                          skos:prefLabel ?relationshipLabel.
  BIND(CONCAT('A depiction of ',?relationshipLabel) as ?depictionLabel)
  BIND(IRI(CONCAT(STR($this),  '-Archimate')) as ?relationshipDepiction)
  
  optional {
  $this      ?member ?style.
  ?style     rdf:type archiXML:Style;
             ?styleLineColorMember ?lineColor;
             ?styleFontMember      ?font.
  ?lineColor rdf:type archiXML:LineColor;
             archiXML:r ?lineColorR;
             archiXML:g ?lineColorG;             
             archiXML:b ?lineColorB.            
  ?font      rdf:type archiXML:Font;
             archiXML:name ?fontName;
             archiXML:size ?fontSize;
             ?fontMember   ?fontColor.
  ?fontColor rdf:type archiXML:Color;             
             archiXML:r ?fontColorR;
             archiXML:g ?fontColorG;             
             archiXML:b ?fontColorB.
  }

  optional {
  $this      ?memberBendPoint ?bendPoint.
  ?bendPoint rdf:type archiXML:BendPoint;
             archiXML:x ?x;
             archiXML:y ?y.
  }

  BIND(IRI(CONCAT(STR($this),  '-Archimate_LineColor'))            as ?lineColorIRI)
  BIND(IRI(CONCAT(STR($this),  '-Archimate_Font'))                 as ?fontIRI)
  BIND(IRI(CONCAT(STR($this),  '-Archimate_FontColor'))            as ?fontColorIRI)
  BIND(IRI(CONCAT(STR($this),  '-Archimate_BendPoint', '-',?x,'-',?y)) as ?bendPointIRI)
  BIND(BNODE() as ?bendPointListItem)

  }
''';
    rdfs:isDefinedBy archimate:.
    
shp:BendPointListCreator
    a sh:NodeShape;
    sh:rule rule:BendPointListCreator;
    sh:target target:BendPointListCreator;
    skos:prefLabel 'bend point list creator shape'@en;
    rdfs:isDefinedBy archimate:.

target:BendPointListCreator
    a sh:SPARQLTarget;
    rdfs:comment 'Select all bendpoints in the generated archimate model that have to be processed into a archimate bend point list belonging to an archimate connection.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML:  <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov:      <http://www.w3.org/ns/prov#>
prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs:      <http://www.w3.org/2000/01/rdf-schema#>
prefix skos:      <http://www.w3.org/2004/02/skos/core#>
prefix xsi:       <http://www.w3.org/2001/XMLSchema-instance/model/def/>

select $this {

  # Select all archimate bendpoints...
  $this rdf:type archimate:BendPoint.
  ?list rdf:first $this.
  
  # ...that have not been processed yet
  filter not exists {
  ?list rdf:rest [].
  }
}
''';
    rdfs:isDefinedBy archiXML:.
    
rule:BendPointListCreator
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an list of bendpoints for a connection as part of an archimate view.'@en;
    skos:prefLabel 'archimate bendpoint list creator rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

construct {
  
  ?archimateConnection 
    archimate:bendPoint ?firstListItem.
  
  ?bendPointListItem
    rdf:rest ?restList.
}    

where {    
  # Get bendpoint and connection metadata
  ?bendPointListItem rdf:first $this.
  $this prov:wasDerivedFrom ?archiXMLBendPoint.
  ?connection ?member ?archiXMLBendPoint.
  ?archimateConnection prov:wasDerivedFrom ?connection.
  filter(strstarts(str(?member), concat(str(rdf:), '_')))  
  
  # Establish the bendpoint index
  {select ?connection $this ((count(?prevIndex)+1) as ?indexBendPoint)
   where {
    $this rdf:type archimate:BendPoint;
          prov:wasDerivedFrom ?archiXMLBendPoint.
    ?connection ?member ?archiXMLBendPoint.
    filter(strstarts(str(?member), concat(str(rdf:), '_')))
    bind(xsd:integer(strafter(str(?member), concat(str(rdf:),'_'))) as ?index)
    optional {
              ?bendPoint rdf:type archimate:BendPoint;
                         prov:wasDerivedFrom ?prevBendPoint.              
              ?connection ?prevMember ?prevBendPoint.
              filter(strstarts(str(?prevMember), concat(str(rdf:), '_')))
              bind(xsd:integer(strafter(str(?prevMember), concat(str(rdf:),'_'))) as ?prevIndex)
              filter(?prevIndex < ?index)
             }
     } group by ?connection $this 
   }

  # Establish the bendpoint index for the next bendpoint
  optional{
  {select ?connection ?nextBendPoint ((count(?prevIndex)+1) as ?indexOtherBendPoint)
   where {
    ?nextBendPoint rdf:type archimate:BendPoint;
          prov:wasDerivedFrom ?archiXMLBendPoint.
    ?connection ?member ?archiXMLBendPoint.
    filter(strstarts(str(?member), concat(str(rdf:), '_')))
    bind(xsd:integer(strafter(str(?member), concat(str(rdf:),'_'))) as ?index)
    optional {
              ?bendPoint rdf:type archimate:BendPoint;
                         prov:wasDerivedFrom ?prevBendPoint.              
              ?connection ?prevMember ?prevBendPoint.
              filter(strstarts(str(?prevMember), concat(str(rdf:), '_')))
              bind(xsd:integer(strafter(str(?prevMember), concat(str(rdf:),'_'))) as ?prevIndex)
              filter(?prevIndex < ?index)
             }
     } group by ?connection ?nextBendPoint
   }  

  filter(?indexOtherBendPoint = ?indexBendPoint + 1)
  ?nextBendPointListItem rdf:first ?nextBendPoint.
  }
  
  # Establish the total bendpoint count as an indicator of the end of the list
  {select ?connection ((count(?archiXMLBendPoint)) as ?totalBendPoints)
   where {
    ?connection ?member ?archiXMLBendPoint.
    ?archiXMLBendPoint rdf:type archiXML:BendPoint.
    filter(strstarts(str(?member), concat(str(rdf:), '_')))
    } group by ?connection
  }
  
  BIND(IF(?indexBendPoint = 1, ?bendPointListItem, ?unboundDummy) as ?firstListItem)
  BIND(IF(?indexBendPoint = ?totalBendPoints, rdf:nil, ?nextBendPointListItem) as ?restList)

  }
''';
    rdfs:isDefinedBy archimate:.
    

shp:ViewComponentConnector
    a sh:NodeShape;
    sh:rule rule:ViewComponentConnector;
    sh:target target:ViewComponentConnector;
    skos:prefLabel 'view component connector shape'@en;
    rdfs:isDefinedBy archimate:.

target:ViewComponentConnector
    a sh:SPARQLTarget;
    rdfs:comment 'Select all nodes and connections that have to be connected to the archimate view.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select $this {

  # select all viewnodes and connections without a parent - child relation.
 {$this rdf:type archimate:ViewNode.
   filter not exists {
    ?parent archimate:contains $this.
    }
 }
 UNION
  {$this rdf:type archimate:Container.
   filter not exists {
    ?parent archimate:contains $this.
    }
 }
 UNION
  {$this rdf:type archimate:Note.
   filter not exists {
    ?parent archimate:contains $this.
    }
 }
 UNION
 {$this rdf:type archimate:Connection.
   filter not exists {
    ?parent archimate:contains $this.
    }    
  }
}
''';
    rdfs:isDefinedBy archiXML:.
    
rule:ViewComponentConnector
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a connection between nodes and connections on the one hand and the archimate view or parent node on the other hand.'@en;
    skos:prefLabel 'archimate view component connector rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

construct {

  # connect the parent with the children
  ?parent archimate:contains $this.

} where {

  # Get the parent for the viewnodes and connections in case the corresponding parent in archixml is a view.
  {$this 
    prov:wasDerivedFrom ?archiXML_component.
  ?archiXML_parent 
    rdf:type archiXML:View;
    ?member ?archiXML_component.
  filter(strstarts(str(?member), concat(str(rdf:), '_')))         
  ?parent prov:wasDerivedFrom ?archiXML_parent. 
  }
  UNION
  
  # Get the parent for the viewnodes and connections in case the corresponding parent in archixml is a node.
  {$this 
    prov:wasDerivedFrom ?archiXML_component.
  ?archiXML_parent 
        rdf:type archiXML:Node;
        ?member ?archiXML_component.
  filter(strstarts(str(?member), concat(str(rdf:), '_')))         
  ?parent prov:wasDerivedFrom ?archiXML_parent. 
  }
}
''';
    rdfs:isDefinedBy archimate:.
    
shp:ModelLinker
    a sh:NodeShape;
    sh:rule rule:ModelLinker;
    sh:target target:ModelLinker;
    skos:prefLabel 'Model Linker shape'@en;
    rdfs:isDefinedBy archimate:.

target:ModelLinker
    a sh:SPARQLTarget;
    rdfs:comment 'Select all view nodes that have to be connected to the archimate model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

 # select all viewnodes without a link to the model...
 # ...but only when they are contained by a parent node with model linkage.
 
 ?parent archimate:contains+ $this;
         rdfs:isDefinedBy ?model. 
  filter not exists {
    $this rdfs:isDefinedBy [].
    }    
  }
''';
    rdfs:isDefinedBy archimate:.    
    
rule:ModelLinker
    a sh:SPARQLRule;
    rdfs:comment 'A rule that links a view node to the archimate model.'@en;
    skos:prefLabel 'archimate model linker rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

construct {

  # create the model identifier
  $this rdfs:isDefinedBy ?model .

} where {
  ?parent archimate:contains+ $this;
          rdfs:isDefinedBy ?model. 
  }
''';
    rdfs:isDefinedBy archimate:.    
