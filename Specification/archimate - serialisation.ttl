prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dcm: <http://purl.org/dc/dcmitype/>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix function: <https://data.rijksfinancien.nl/archimate/model/function/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfa: <http://www.w3.org/ns/rdfa#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix status: <http://purl.org/adms/status/>
prefix vann:      <http://purl.org/vocab/vann/>
prefix void:      <http://rdfs.org/ns/void#>
prefix xsd:       <http://www.w3.org/2001/XMLSchema#>
prefix xml:       <http://www.w3.org/XML/model/def/>
prefix xmlns:     <http://www.w3.org/2000/xmlns/model/def/> 
prefix xsi:       <http://www.w3.org/2001/XMLSchema-instance/model/def/>

prefix graph:     <https://data.rijksfinancien.nl/archimate/graph/>
prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix respec:    <https://respec.org/model/def/>
prefix rule:      <https://data.rijksfinancien.nl/archimate/model/rule/>
prefix section:   <https://data.rijksfinancien.nl/archimate/id/section/>
prefix shp:       <https://data.rijksfinancien.nl/archimate/model/shp/>
prefix standard:  <https://data.rijksfinancien.nl/archimate/id/standard/>
prefix target:    <https://data.rijksfinancien.nl/archimate/model/target/>

archimate:
    a
      owl:Ontology,
      respec:Ontology,
      void:Dataset;
    dct:created '2024-02-14'^^xsd:date;
    dct:creator
      'Flores Bakker';
    respec:introduction '''
Introduction of archimate serialisation vocabulary.
'''@en;
    respec:objective '''Objective of archimate serialisation vocabulary'''@en;
    respec:audience  '''Audience of archimate serialisation vocabulary'''@en;
    dct:description  '''Description of archimate serialisation vocabulary'''@en;
    dct:abstract     '''Abstract of archimate serialisation vocabulary'''@en; 
    skos:example """

""";
    dct:language 'iso639-1:en';
    dct:license 'https://creativecommons.org/licenses/by/4.0/'^^xsd:anyURI;
    dct:publisher <https://www.example.com>;
    dct:status status:UnderDevelopment;
    dct:title 'Archimate Core Vocabulary'@en;
    dct:source <https://www.example.com/archimate-vocabulary>;
    foaf:homepage 'https://www.example.com/'^^xsd:anyURI;
    owl:versionInfo '1.0';
    vann:preferredNamespacePrefix 'archimate';
    vann:preferredNamespaceUri 'https://data.rijksfinancien.nl/archimate/model/def/';
    void:uriRegexPattern '^https://data.rijksfinancien.nl/archimate/model/def/';
    void:uriSpace 'https://data.rijksfinancien.nl/xml/archimate/def/'^^xsd:anyURI.

### Logic


shp:Document
    a sh:NodeShape;
    sh:rule rule:Document;
    sh:targetClass archiXML:Document;
    skos:prefLabel 'Model shape'@en;
    rdfs:isDefinedBy archimate:.

rule:Document
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate representation in RDF based on an RDF-based archimate model in XML.'@en;
    skos:prefLabel 'archimate document rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>

construct {

  
  ?model rdf:type archimate:Model;
         skos:prefLabel ?modelName;
         skos:definition ?modelDefinition;
         rdfs:isDefinedBy ?model;
         prov:wasDerivedFrom $this.


} where {

    # Get the archiXML Document & Model
    $this  rdf:type archiXML:Document;
           ?member ?modelArchiXML.
    ?modelArchiXML rdf:type archiXML:Model;
           ?memberName ?modelNameNode.
    ?modelNameNode rdf:type archiXML:Name;
                   rdf:_1 ?modelNameTextNode.
    ?modelNameTextNode rdf:type archiXML:Text;
                   xml:fragment ?modelName.

    # Establish definition
    optional {
    ?modelArchiXML ?memberDoc ?documentationNode.
    ?documentationNode rdf:type archiXML:Documentation;
                       rdf:_1 ?documentationTextNode.
    ?documentationTextNode rdf:type archiXML:Text;
                         xml:fragment ?definition.}
    bind(coalesce(?definition, "An archimate model") as ?modelDefinition)

    # Create IRI's    
    BIND(IRI(CONCAT(STR(?modelArchiXML), "-Archimate")) as ?model)

  }

''';
    rdfs:isDefinedBy archiXML:.


  shp:Element
    a sh:NodeShape;
    sh:rule rule:Element;
    sh:targetClass archiXML:Element;
    skos:prefLabel 'element shape'@en;
    rdfs:isDefinedBy archimate:.

  rule:Element
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate element based on an element.'@en;
    skos:prefLabel 'archimate element rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  ?element rdf:type ?elementClass;
           skos:prefLabel ?elementName;
           skos:definition ?elementDefinition;
           rdfs:isDefinedBy ?model;
           prov:wasDerivedFrom $this.

} where {

  # Get the archimate metadata of the archimate element to be serialized.
  
  $this xsi:type ?xsiType;
        ?memberName ?elementNameNode.
  ?elementNameNode rdf:type archiXML:Name;
        rdf:_1 ?elementNameTextNode.
  ?elementNameTextNode rdf:type archiXML:Text;
        xml:fragment ?elementName.

  ?elementsNode ?member $this.
  ?documentModel ?modelMember ?elementsNode.
  ?document ?docMember ?documentModel.
  ?model prov:wasDerivedFrom ?document.

  optional {
  $this ?memberDoc ?documentationNode.
  ?documentationNode rdf:type archiXML:Documentation;
                     rdf:_1 ?documentationTextNode.
  ?documentationTextNode rdf:type archiXML:Text;
                         xml:fragment ?definition.}  
  bind(coalesce(?definition, "An archimate element") as ?elementDefinition)

  # Create IRI's
  BIND(IRI(CONCAT(STR(archimate:), ?xsiType)) as ?elementClass)
  BIND(IRI(CONCAT(STR($this),  '-Archimate')) as ?element)
  }

''';
    rdfs:isDefinedBy archiXML:.

shp:Relationship
    a sh:NodeShape;
    sh:rule rule:Relationship;
    sh:targetClass archiXML:Relationship;
    skos:prefLabel 'relationship shape'@en;
    rdfs:isDefinedBy archimate:.   

rule:Relationship
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate relationship based on an XML document.'@en;
    skos:prefLabel 'archimate relationship rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix dct: <http://purl.org/dc/terms/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance/model/def/>

construct {

  ?relationship rdf:type archimate:Relationship;
           skos:prefLabel ?relationshipName;
           skos:definition ?definition;
           archimate:relationship ?relationtype;
           archimate:from ?source;
           archimate:to ?target;
           rdfs:isDefinedBy ?model;
           prov:wasDerivedFrom $this.

} where {

  # Get the archimate metadata of the archiXML relationship
 
  $this rdf:type archiXML:Relationship.
  
  ?relationshipsNode ?member $this.
  ?documentModel ?modelMember ?relationshipsNode.
  ?document ?docMember ?documentModel.
  ?model prov:wasDerivedFrom ?document.

  optional{
  $this ?memberName ?relationshipNameNode.
  ?relationshipNameNode rdf:type archiXML:Name;
        rdf:_1 ?relationshipNameTextNode.
  ?relationshipNameTextNode rdf:type archiXML:Text;
        xml:fragment ?relationshipName.}
 
  $this archiXML:target ?targetIdentifier;
        archiXML:source ?sourceIdentifier;
        xsi:type ?xsiType.
   
  ?sourceNode archiXML:identifier ?targetIdentifier.
  ?targetNode archiXML:identifier ?sourceIdentifier.
  ?relationtype dct:identifier ?xsiType.
  
  optional{
  $this ?memberDoc ?documentationNode.
  ?documentationNode rdf:type archiXML:Documentation;
                     rdf:_1 ?documentationTextNode.
  ?documentationTextNode rdf:type archiXML:Text;
                         xml:fragment ?definition.}                       

  # Create IRI's
  BIND(IRI(CONCAT(STR(?sourceNode),  '-Archimate')) as ?source)
  BIND(IRI(CONCAT(STR(?targetNode),  '-Archimate')) as ?target)
  BIND(IRI(CONCAT(STR($this),        '-Archimate')) as ?relationship)
  
  }

''';
    rdfs:isDefinedBy archimate:.

shp:RelationshipLabel
    a sh:NodeShape;
    sh:rule rule:RelationshipLabel;
    sh:target target:RelationshipLabel;
    skos:prefLabel 'relationship label shape'@en;
    rdfs:isDefinedBy archimate:.   

target:RelationshipLabel
    a sh:SPARQLTarget;
    rdfs:comment 'Select all elements in the model.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

select $this {

  # Select all relationships without a prefLabel.
  $this rdf:type archimate:Relationship.
  filter not exists {
    $this skos:prefLabel []
    }    
  }
''';
    rdfs:isDefinedBy archiXML:.

rule:RelationshipLabel
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a label for an archimate relationship.'@en;
    skos:prefLabel 'archimate relationship label rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  $this skos:prefLabel ?label.
  
} where {

  # Get the archimate metadata of the archiXML relationship
 
  $this rdf:type archimate:Relationship;
        archimate:relationship ?relationtype;
        archimate:from ?source;
        archimate:to ?target.
        
  ?relationtype skos:prefLabel ?relationshipName.
  ?source skos:prefLabel ?sourceLabel.
  ?target skos:prefLabel ?targetLabel.
  
  bind(concat(?relationshipName, ' (', ?sourceLabel, ' - ', ?targetLabel, ')') as ?label)
  
  }

''';
    rdfs:isDefinedBy archimate:.


shp:RelationshipDefinition
    a sh:NodeShape;
    sh:rule rule:RelationshipDefinition;
    sh:target target:RelationshipDefinition;
    skos:prefLabel 'relationship definition shape'@en;
    rdfs:isDefinedBy archimate:.   

target:RelationshipDefinition
    a sh:SPARQLTarget;
    rdfs:comment 'Select all relationships in the model without a skos definition.'@en;
    sh:select '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>


select $this {

  # Select all relationships without a definition.
  $this rdf:type archimate:Relationship.
  filter not exists {
    $this skos:definition []
    }
  }
''';
    rdfs:isDefinedBy archiXML:.

rule:RelationshipDefinition
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a definition for an archimate relationship.'@en;
    skos:prefLabel 'archimate relationship definition rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>


construct {

  $this skos:definition ?definition.
  
} where {

  # Get the archimate metadata of the archiXML relationship
 
  $this rdf:type archimate:Relationship;
        archimate:relationship ?relationtype;
        archimate:from ?source;
        archimate:to ?target.
        
  ?relationtype skos:prefLabel ?relationshipName.
  ?source skos:prefLabel ?sourceLabel.
  ?target skos:prefLabel ?targetLabel.
  
  bind(concat(?relationshipName, ' from "', ?sourceLabel, '" to "', ?targetLabel, '"') as ?definition)
  
  }

''';
    rdfs:isDefinedBy archimate:.

shp:View
    a sh:NodeShape;
    sh:rule rule:View;
    sh:targetClass archiXML:View;
    skos:prefLabel 'view shape'@en;
    rdfs:isDefinedBy archimate:.
    
    
rule:View
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate view based on an XML document.'@en;
    skos:prefLabel 'archimate view rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix xml: <http://www.w3.org/XML/model/def/>

construct {

  ?view rdf:type archimate:View;
        skos:prefLabel ?viewName;
        skos:definition ?viewDefinition;
        rdfs:isDefinedBy ?model;
        prov:wasDerivedFrom $this.
             
} where {

  # Get the archimate metadata of the archiXML relationship
 
  $this rdf:type archiXML:View;
        ?memberView ?viewNameNode.
  ?viewNameNode rdf:type archiXML:Name;
        rdf:_1 ?viewNameTextNode.
  ?viewNameTextNode rdf:type archiXML:Text;
        xml:fragment ?viewName.

  ?diagramNode ?memberViews $this.
  ?viewsNode ?memberDiagram ?diagramNode.
  ?documentModel ?modelMember ?viewsNode.
  ?document ?docMember ?documentModel.
  ?model prov:wasDerivedFrom ?document.

  optional {
  $this ?memberDoc ?documentationNode.
  ?documentationNode rdf:type archiXML:Documentation;
                     rdf:_1 ?documentationTextNode.
  ?documentationTextNode rdf:type archiXML:Text;
                         xml:fragment ?definition.}
  bind(coalesce(?definition, "An archimate view") as ?viewDefinition)
  bind(iri(concat(str($this), '-Archimate')) as ?view)
  }
''';
    rdfs:isDefinedBy archimate:.
    

shp:NodeDepiction
    a sh:NodeShape;
    sh:rule rule:NodeDepiction;
    sh:targetClass archiXML:Node;
    skos:prefLabel 'node depiction shape'@en;
    rdfs:isDefinedBy archimate:.
       
rule:NodeDepiction
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate depiction node as part of an archimate view.'@en;
    skos:prefLabel 'archimate node depiction rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the depiction of an archimate element
  ?elementDepiction rdf:type archimate:ViewNode;
        skos:prefLabel ?depictionLabel;
        foaf:depicts ?archimate_Element;
        rdfs:isDefinedBy ?model;
        prov:wasDerivedFrom $this.

} where {
  
  $this archiXML:elementRef ?identifier.
  ?archiXML_Element archiXML:identifier ?identifier.
  ?archimate_Element prov:wasDerivedFrom ?archiXML_Element;
                     rdfs:isDefinedBy ?model;
                     skos:prefLabel ?elementLabel.
  BIND(CONCAT('A depiction of ',?elementLabel) as ?depictionLabel)
  BIND(IRI(CONCAT(STR($this),  '-Archimate')) as ?elementDepiction)

  }
''';
    rdfs:isDefinedBy archimate:.


shp:ConnectionDepiction
    a sh:NodeShape;
    sh:rule rule:ConnectionDepiction;
    sh:targetClass archiXML:Connection;
    skos:prefLabel 'connection depiction shape'@en;
    rdfs:isDefinedBy archimate:.

rule:ConnectionDepiction
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an archimate depiction connection as part of an archimate view.'@en;
    skos:prefLabel 'archimate connection depiction rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>


construct {

  # create the depiction of an archimate relationship
  ?relationshipDepiction rdf:type archimate:Connection;
        skos:prefLabel ?depictionLabel;
        foaf:depicts ?archimate_Relationship;
        rdfs:isDefinedBy ?model;
        prov:wasDerivedFrom $this.

} where {
  
  $this archiXML:relationshipRef ?identifier.
  ?archiXML_Relationship archiXML:identifier ?identifier.
  ?archimate_Relationship prov:wasDerivedFrom ?archiXML_Relationship;
                     rdfs:isDefinedBy ?model;
                     skos:prefLabel ?relationshipLabel.
  BIND(CONCAT('A depiction of ',?relationshipLabel) as ?depictionLabel)
  BIND(IRI(CONCAT(STR($this),  '-Archimate')) as ?relationshipDepiction)

  }
''';
    rdfs:isDefinedBy archimate:.

shp:ViewComponentConnector
    a sh:NodeShape;
    sh:rule rule:ViewComponentConnector;
    sh:target target:ViewComponentConnector;
    skos:prefLabel 'view component connector shape'@en;
    rdfs:isDefinedBy archimate:.

target:ViewComponentConnector
    a sh:SPARQLTarget;
    rdfs:comment 'Select all nodes and connections that have to be connected to the archimate view.'@en;
    sh:select '''
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

select $this {

  # Select all relationships without a member relation.
 {$this rdf:type archimate:ViewNode.
   filter not exists {
    [] archimate:contains $this
    }
 }
 UNION
 {$this rdf:type archimate:Connection.
   filter not exists {
    [] archimate:contains $this
    }    
  }
 }
''';
    rdfs:isDefinedBy archiXML:.
    
rule:ViewComponentConnector
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a connection between nodes and connections on the one hand and the archimate view on the other hand.'@en;
    skos:prefLabel 'archimate view component connector rule'@en;
    sh:construct '''

prefix archimate: <https://data.rijksfinancien.nl/archimate/model/def/>
prefix archiXML: <https://data.rijksfinancien.nl/archixml/model/def/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>


construct {

  # connect the parent with the children
  ?view archimate:contains $this.

} where {

  $this prov:wasDerivedFrom ?archiXML_component.
  ?archiXML_view ?member ?archiXML_component. 
  filter(strstarts(str(?member), concat(str(rdf:), '_')))
  ?view prov:wasDerivedFrom ?archiXML_view. 

   }

''';
    rdfs:isDefinedBy archimate:.
